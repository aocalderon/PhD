data(ROCR.hiv)
ROCR.hiv
?ROCR.hiv
data(ROCR.hiv)
attach(ROCR.hiv)
pred.svm <- prediction(hiv.svm$predictions, hiv.svm$labels)
perf.svm <- performance(pred.svm, 'tpr', 'fpr')
pred.nn <- prediction(hiv.nn$predictions, hiv.svm$labels)
perf.nn <- performance(pred.nn, 'tpr', 'fpr')
plot(perf.svm, lty=3, col="red",main="SVMs and NNs for prediction of
HIV-1 coreceptor usage")
plot(perf.nn, lty=3, col="blue",add=TRUE)
plot(perf.svm, avg="vertical", lwd=3, col="red",
spread.estimate="stderror",plotCI.lwd=2,add=TRUE)
hiv.nn
plot(perf.nn, lty=3, col="blue",add=TRUE)
hiv.nn$predictions
ROCR.simple$predictions
?predict
library("rminer", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
data(iris)
M=fit(Species~.,iris,model="lr")
iris
M
P=predict(M,iris)
P
M=fit(Species~.,iris,model="knn")
M
P=predict(M,iris)
P
print(mmetric(iris$Species,P,"CONF")) # confusion matrix
getwd()
allpools = read.csv('allpools.txt', header = F)
View(allpools)
View(allpools)
finalpools = read.csv('finalpools.txt', header = F)
View(finalpools)
data(iris)
iris
View(allpools)
M=fit(V4~.,allpools,model="knn")
M
P=predict(M,allpools)
P
allpools$V4
allpools$V4==1
allpools[allpools$V4==1,]
allpools[allpools$V4==1,V4]
allpools[allpools$V4==1,4]
allpools[allpools$V4==1,4] = 'pool'
allpools[allpools$V4==0,4] = 'nopool'
allpools = read.csv('allpools.txt', header = F)
allpools[allpools$V4==1,4] = 'pool'
allpools[allpools$V4==0,4] = 'nopool'
finalpools = read.csv('finalpools.txt', header = F)
M=fit(V4~.,allpools,model="knn")
M
P=predict(M,allpools)
data(iris)
class(iris)
data(iris)
iris
class(iris$Species)
class(allpools$V40
class(allpools$V4)
class(allpools$V4)
as.factor(allpools$V4)
allpools.V4 = as.factor(allpools$V4)
M=fit(V4~.,allpools,model="knn")
P=predict(M,allpools)
M
?fit
M=fit(V4~.,allpools,model="knn", task='c')
M
P=predict(M,allpools)
P
M=fit(Species~.,iris,model="knn")
P=predict(M,iris)
P
M
allpools = read.csv('allpools.txt', header = F)
allpools[allpools$V4==1,4] = 'pool'
allpools[allpools$V4==0,4] = 'nopool'
allpools.V4 = as.factor(allpools$V4)
finalpools = read.csv('finalpools.txt', header = F)
M=fit(V4~.,allpools,model="knn", task='p')
P=predict(M,allpools)
View(iris)
M=fit(Species~.,iris,model="knn")
M
M=fit(V4~.,allpools,model="knn", task='p')
M
class(iris$Species)
class(allpools$V4)
allpools.V4 = as.factor(allpools$V4)
class(allpools$V4)
allpools$V4 = as.factor(allpools$V4)
class(allpools$V4)
M=fit(V4~.,allpools,model="knn", task='p')
P=predict(M,allpools)
P
write.csv(P,'scores.txt')
write.csv(P,'scores.txt', col.names = R, row.names = F)
write.csv(P,'scores.txt', col.names = F, row.names = F)
write.csv(P,'scores.txt', row.names = F)
M
P=predict(M,finalpools)
P
write.csv(P,'scores.txt', row.names = F)
class(P)
class(ROCR.simple$predictions)
ROCR.simple$predictions
ROCR.simple
?prediction
data(iris)
M=fit(Species~.,iris,model="knn")
P=predict(M,iris)
print(mmetric(iris$Species,P,"CONF")) # confusion matrix
T = [0,1,0,0,0,0,0,1,0,0,0,0,0,1,1,0,0,1,0]
T = c(0,1,0,0,0,0,0,1,0,0,0,0,0,1,1,0,0,1,0)
T
t(T)
prediction(t(T), P)
class(ROCR.simple$predictions)
class(t(T))
class(T)
prediction(T, P)
T
ROCR.simple$predictions
prediction(P, T)
P
allpools = read.csv('allpools.txt', header = F)
allpools[allpools$V4==1,4] = 'pool'
allpools[allpools$V4==0,4] = 'nopool'
allpools$V4 = as.factor(allpools$V4)
finalpools = read.csv('finalpools.txt', header = F)
M=fit(V4~.,allpools,model="knn", task='p')
P=predict(M,finalpools)
print(mmetric(T,P,"CONF")) # confusion matrix
thelabels = c(0,1,0,0,0,0,0,1,0,0,0,0,0,1,1,0,0,1,0)
P
P$nopools
P[,1]
thepredictions = P[,1]
prediction(thepredictions, thelabels)
allpools = read.csv('allpools.txt', header = F)
allpools[allpools$V4==1,4] = 'pool'
allpools[allpools$V4==0,4] = 'nopool'
allpools$V4 = as.factor(allpools$V4)
finalpools = read.csv('finalpools.txt', header = F)
M=fit(V4~.,allpools,model="knn", task='p')
P=predict(M,finalpools)
P
T
mmetric(thelabels, thepredictions,"CONF")
pred <- prediction(thepredictions, thelabels)
perf <- performance(pred,"tpr","fpr")
plot(perf,colorize=TRUE)
M
P=predict(M,finalpools)
P=predict(M,allpools)
print(mmetric(iris$Species,P,"CONF")) # confusion matrix
print(mmetric(allpools$V4,P,"CONF")) # confusion matrix
?mmetric
print(mmetric(allpools$V4,P,"AUC")) # confusion matrix
allpools = read.csv('allpools.txt', header = F)
allpools[allpools$V4==1,4] = 'pool'
allpools[allpools$V4==0,4] = 'nopool'
allpools$V4 = as.factor(allpools$V4)
finalpools = read.csv('finalpools.txt', header = F)
M=fit(V4~.,allpools,model="knn", task='p')
P=predict(M,finalpools)
print(mmetric(T,P,"CONF")) # confusion matrix
P
T
thelabels
thepredictions
thepredictions = P[,2]
thelabels
thepredictions
M=fit(V4~.,allpools,model="knn", task='p')
M=fit(V4~.,allpools,model="knn", task='c')
P=predict(M,finalpools)
P
allpools = read.csv('allpools.txt', header = F)
allpools$V4 = as.factor(allpools$V4)
M=fit(V4~.,allpools,model="knn", task='c')
P=predict(M,finalpools)
P
M=fit(V4~.,allpools,model="knn", task='p')
P=predict(M,finalpools)
P
thelabels
P
M=fit(V4~.,allpools,model="knn", task='c')
thelabels
P=predict(M,finalpools)
P
thepredictions = P
thepredictions
M=fit(V4~.,allpools,model="knn", task='p')
P=predict(M,finalpools)
P
P[,1]
P[thepredictions==thelabels,1]
thepredictions
thelabels
P
P[,1] > P[,2]
P[,1] > P[,2] ? P[,1] : P[,2]
P[,1] > P[,2] ? P[,1] : P[,2];
function(a,b){if}
f=function(a,b){if(a>b){a}else{b}}
f(1,2)
f(3,2)
P
apply(P,2,f)
apply(P,1,f)
lapply(P,1,f)
lapply(P,2,f)
lapply(P,f)
f(P[,1],P[,2])
apply(P,2,max)
apply(P,1,max)
P
thepredictions = apply(P,1,max)
thepredictions
thelabels
M=fit(V4~.,allpools,model="knn", task='c')
P=predict(M,finalpools)
P
thescores = thepredictions
P
thepredictions = P
thelabels
thepredictions
thescores
P
print(mmetric(thelabels,P,"CONF")) # confusion matrix
allpools = read.csv('allpools.txt', header = F)
#allpools[allpools$V4==1,4] = 'pool'
#allpools[allpools$V4==0,4] = 'nopool'
allpools$V4 = as.factor(allpools$V4)
finalpools = read.csv('finalpools.txt', header = F)
M=fit(V4~.,allpools,model="knn", task='c')
P=predict(M,finalpools)
print(mmetric(thelabels,P,"CONF")) # confusion matrix
thelabels
P
class(thelabels)
thelabels=as.factor(thelabels)
class(thelabels)
print(mmetric(thelabels,P,"CONF")) # confusion matrix
allpools = read.csv('allpools.txt', header = F)
#allpools[allpools$V4==1,4] = 'pool'
#allpools[allpools$V4==0,4] = 'nopool'
allpools$V4 = as.factor(allpools$V4)
thelabels = c(0,1,0,0,0,0,0,1,0,0,0,0,0,1,1,0,0,1,0)
thelabels=as.factor(thelabels)
finalpools = read.csv('finalpools.txt', header = F)
finalpools[,3:5]
allpools = read.csv('allpools.txt', header = F)
#allpools[allpools$V4==1,4] = 'pool'
#allpools[allpools$V4==0,4] = 'nopool'
allpools$V4 = as.factor(allpools$V4)
thelabels = c(0,1,0,0,0,0,0,1,0,0,0,0,0,1,1,0,0,1,0)
thelabels=as.factor(thelabels)
finalpools = read.csv('finalpools.txt', header = F)
finalpools = finalpools[,3:5]
M=fit(V4~.,allpools,model="knn", task='c')
P=predict(M,finalpools)
allpools = read.csv('allpools.txt', header = F)
#allpools[allpools$V4==1,4] = 'pool'
#allpools[allpools$V4==0,4] = 'nopool'
allpools$V4 = as.factor(allpools$V4)
names(allpools) = c('R','G','B','P')
thelabels = c(0,1,0,0,0,0,0,1,0,0,0,0,0,1,1,0,0,1,0)
thelabels=as.factor(thelabels)
finalpools = read.csv('finalpools.txt', header = F)
finalpools = finalpools[,3:5]
names(finalpools) = c('R','G','B')
M=fit(P~.,allpools,model="knn", task='c')
P=predict(M,finalpools)
print(mmetric(thelabels,P,"CONF")) # confusion matrix
P
thelabels
ROCR.simple$predictions
ROCR.simple$labels
source('~/Documents/PhD/Y1Q2/DataMining/Homeworks/HM3/script.R')
dev.off()
dev.off()
source('~/Documents/PhD/Y1Q2/DataMining/Homeworks/HM3/script.R')
source('~/Documents/PhD/Y1Q2/DataMining/Homeworks/HM3/script.R')
source('~/Documents/PhD/Y1Q2/DataMining/Homeworks/HM3/script.R')
source('~/Documents/PhD/Y1Q2/DataMining/Homeworks/HM3/script.R')
print(mmetric(thelabels,thepredictions,"CONF")) # confusion matrix
print(mmetric(thelabels,thepredictions,"AUC")) # confusion matrix
M=fit(P~.,allpools,model="knn", task='p')
P=predict(M,finalpools)
P
thelabels
print(mmetric(thelabels,thepredictions,"CONF")) # confusion matrix
print(mmetric(thelabels,P,"CONF")) # confusion matrix
P
print(mmetric(thelabels,P,"CONF")) # confusion matrix
print(mmetric(thelabels,P,"AUC")) # confusion matrix
pred <- prediction(thepredictions, thelabels)
pred <- prediction(P, thelabels)
pred <- prediction(apply(P,1,max), thelabels)
perf <- performance(pred,"tpr","fpr")
plot(perf,colorize=TRUE)
pred <- prediction(apply(P,1,max), thepredictions)
perf <- performance(pred,"tpr","fpr")
plot(perf,colorize=TRUE)
?performance
thepredictions
thescores
print(mmetric(thelabels,P,"AUC")) # AUC
ROCR.hiv
require(ROCR)
data(iris)
iris$setosa <- factor(1*(iris$Species == 'setosa'))
iris
iris.rf <- randomForest(setosa ~ ., data=iris[,-5])
install.packages("randomForest")
install.packages("randomForest")
install.packages("randomForest")
install.packages("randomForest")
install.packages("randomForest")
install.packages("randomForest")
install.packages("randomForest")
detach("package:ROCR", unload=TRUE)
library("ROCR", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
detach("package:ROCR", unload=TRUE)
detach("package:rminer", unload=TRUE)
library("ROCR", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
install.packages("randomForest")
install.packages("randomForest")
install.packages("randomForest")
library("randomForest", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
iris.rf <- randomForest(setosa ~ ., data=iris[,-5])
iris.rf
summary(predict(iris.rf, iris[,-5]))
summary(iris.preds <- predict(iris.rf, iris[,-5], type = 'prob'))
iris.preds
preds <- iris.preds[,2]
plot(performance(prediction(preds, iris$setosa), 'tpr', 'fpr'))
M=fit(P~.,allpools,model="knn", task='p')
M
P=predict(M,finalpools)
P
thelabels
P[,2]
thelabels
plot(performance(prediction(preds, iris$setosa), 'tpr', 'fpr'))
plot(performance(prediction(P[,2], thelabels), 'tpr', 'fpr'))
source('~/Documents/PhD/Code/Y1Q2/DataMining/HW3/script.R')
source('~/Documents/PhD/Code/Y1Q2/DataMining/HW3/script.R')
source('~/Documents/PhD/Code/Y1Q2/DataMining/HW3/script.R')
print(mmetric(thelabels,thepredictions,"CONF")) # confusion matrix
source('~/Documents/PhD/Code/Y1Q2/DataMining/HW3/script.R')
source('~/Documents/PhD/Code/Y1Q2/DataMining/HW3/script.R')
source('~/Documents/PhD/Code/Y1Q2/DataMining/HW3/script.R')
source('~/Documents/PhD/Code/Y1Q2/DataMining/HW3/script.R')
source('~/Documents/PhD/Code/Y1Q2/DataMining/HW3/script.R')
?rminer
?fit
source('~/Documents/PhD/Code/Y1Q2/DataMining/HW3/script.R')
source('~/Documents/PhD/Code/Y1Q2/DataMining/HW3/script.R')
source('~/Documents/PhD/Code/Y1Q2/DataMining/HW3/script.R')
source('~/Documents/PhD/Code/Y1Q2/DataMining/HW3/script.R')
source('~/Documents/PhD/Code/Y1Q2/DataMining/HW3/script.R')
source('~/Documents/PhD/Code/Y1Q2/DataMining/HW3/script.R')
source('~/Documents/PhD/Code/Y1Q2/DataMining/HW3/script.R')
source('~/Documents/PhD/Code/Y1Q2/DataMining/HW3/script.R')
ROCR.hiv
library(ROCR)
data(ROCR.simple)
pred <- prediction( ROCR.simple$predictions, ROCR.simple$labels )
perf <- performance( pred, "tpr", "fpr" )
plot( perf )
# To entertain your children, make your plots nicer
# using ROCR's flexible parameter passing mechanisms
# (much cheaper than a finger painting set)
par(bg="lightblue", mai=c(1.2,1.5,1,1))
plot(perf, main="ROCR fingerpainting toolkit", colorize=TRUE,
xlab="Mary's axis", ylab="", box.lty=7, box.lwd=5,
box.col="gold", lwd=17, colorkey.relwidth=0.5, xaxis.cex.axis=2,
xaxis.col='blue', xaxis.col.axis="blue", yaxis.col='green', yaxis.cex.axis=2,
yaxis.at=c(0,0.5,0.8,0.85,0.9,1), yaxis.las=1, xaxis.lwd=2, yaxis.lwd=3,
yaxis.col.axis="orange", cex.lab=2, cex.main=2)
source('~/Documents/PhD/Code/Y1Q2/DataMining/HW3/ROCR.R')
dev.off()
source('~/Documents/PhD/Code/Y1Q2/DataMining/HW3/ROCR.R')
source('~/Documents/PhD/Code/Y1Q2/DataMining/HW3/script.R')
source('~/Documents/PhD/Code/Y1Q2/DataMining/HW3/script.R')
source('~/Documents/PhD/Code/Y1Q2/DataMining/HW3/script.R')
source('~/Documents/PhD/Code/Y1Q2/DataMining/HW3/script.R')
source('~/Documents/PhD/Code/Y1Q2/DataMining/HW3/script.R')
source('~/Documents/PhD/Code/Y1Q2/DataMining/HW3/script.R')
source('~/Documents/PhD/Code/Y1Q2/DataMining/HW3/script.R')
source('~/Documents/PhD/Code/Y1Q2/DataMining/HW3/script.R')
source('~/Documents/PhD/Code/Y1Q2/DataMining/HW3/script.R')
source('~/Documents/PhD/Code/Y1Q2/DataMining/HW3/script.R')
source('~/Documents/PhD/Code/Y1Q2/DataMining/HW3/script.R')
source('~/Documents/PhD/Code/Y1Q2/DataMining/HW3/script.R')
source('~/Documents/PhD/Code/Y1Q2/DataMining/HW3/script.R')
source('~/Documents/PhD/Code/Y1Q2/DataMining/HW3/script.R')
source('~/Documents/PhD/Code/Y1Q2/DataMining/HW3/script.R')
source('~/Documents/PhD/Code/Y1Q2/DataMining/HW3/script.R')
source('~/Documents/PhD/Code/Y1Q2/DataMining/HW3/script.R')
source('~/Documents/PhD/Code/Y1Q2/DataMining/HW3/script.R')
source('~/Documents/PhD/Code/Y1Q2/DataMining/HW3/script.R')
source('~/Documents/PhD/Code/Y1Q2/DataMining/HW3/script.R')
source('~/Documents/PhD/Code/Y1Q2/DataMining/HW3/script.R')
source('~/Documents/PhD/Code/Y1Q2/DataMining/HW3/script.R')
source('~/Documents/PhD/Code/Y1Q2/DataMining/HW3/script.R')
source('~/Documents/PhD/Code/Y1Q2/DataMining/HW3/script.R')
source('~/Documents/PhD/Code/Y1Q2/DataMining/HW3/script.R')
source('~/Documents/PhD/Code/Y1Q2/DataMining/HW3/script.R')
getwd()
setwd("~/Documents/PhD/Code/Y1Q2/DataMining/HW3")
image('pools3.tif')
install.packages("tiff")
library("tiff", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
readTIFF('pools3b.tif')
im = readTIFF('pools3b.tif')
plot(im)
plot(im, type=n)
im
im[,,1:3]
im = im[,,1:3]
plot(im)
im = as.raster(im[,,1:3])
plot(im)
lines(c(1,1), c(50,50))
plot(c(1,1), c(50,50), add=TRUE)
plot(im)
lines(c(1,50), c(1,50))
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/Documents/PhD/Code/Y1Q2/DataMining/HW3/grid.R')
source('~/Documents/PhD/Code/Y1Q2/DataMining/HW3/grid.R')
im = readTIFF('pools3b.tif')
im = as.raster(im[,,1:3])
pdf("figures/image2.pdf", 7.83, 5.17)
plot(im)
dev.off()
source('~/Documents/PhD/Code/Y1Q2/DataMining/HW3/grid.R')
source('~/Documents/PhD/Code/Y1Q2/DataMining/HW3/grid.R')
source('~/Documents/PhD/Code/Y1Q2/DataMining/HW3/grid.R')
source('~/Documents/PhD/Code/Y1Q2/DataMining/HW3/grid.R')
source('~/Documents/PhD/Code/Y1Q2/DataMining/HW3/grid.R')
source('~/Documents/PhD/Code/Y1Q2/DataMining/HW3/script.R')
thepredictions
thescores
P
write.csv(P,'/home/and/scores.txt', row.names = F)
source('~/Documents/PhD/Code/Y1Q2/DataMining/HW3/script.R')
P
P[,2]
P[,1]
cbind(P[,2],P[,1])
p=cbind(P[,2],P[,1])
write.csv(p,'/home/and/scores.txt', row.names = F)
points = read.csv('newvalpools.txt')
points = points[,1:2]
points
points = read.csv('newvalpools.txt', header = F)
points = points[,1:2]
points
points = read.csv('newvalpools.txt', header = F)
View(points)
source('~/Documents/PhD/Code/Y1Q2/DataMining/HW3/grid.R')
source('~/Documents/PhD/Code/Y1Q2/DataMining/HW3/grid.R')
source('~/Documents/PhD/Code/Y1Q2/DataMining/HW3/grid.R')
source('~/Documents/PhD/Code/Y1Q2/DataMining/HW3/grid.R')
source('~/Documents/PhD/Code/Y1Q2/DataMining/HW3/grid.R')
source('~/Documents/PhD/Code/Y1Q2/DataMining/HW3/grid.R')
source('~/Documents/PhD/Code/Y1Q2/DataMining/HW3/grid.R')
source('~/Documents/PhD/Code/Y1Q2/DataMining/HW3/grid.R')
source('~/Documents/PhD/Code/Y1Q2/DataMining/HW3/grid.R')
source('~/Documents/PhD/Code/Y1Q2/DataMining/HW3/grid.R')
source('~/Documents/PhD/Code/Y1Q2/DataMining/HW3/grid.R')
source('~/Documents/PhD/Code/Y1Q2/DataMining/HW3/grid.R')
source('~/Documents/PhD/Code/Y1Q2/DataMining/HW3/grid.R')
source('~/Documents/PhD/Code/Y1Q2/DataMining/HW3/grid.R')
source('~/Documents/PhD/Code/Y1Q2/DataMining/HW3/script.R')
thescores
P
p = cbind(P[,2], P[,1])
p
t(p)
p = t(p)
write.csv(p,'/home/and/scores.txt', row.names = F)
source('~/Documents/PhD/Code/Y1Q2/DataMining/HW3/script.R')
source('~/Documents/PhD/Code/Y1Q2/DataMining/HW3/script.R')
source('~/Documents/PhD/Code/Y1Q2/DataMining/HW3/script.R')
source('~/Documents/PhD/Code/Y1Q2/DataMining/HW3/script.R')
?fit
source('~/Documents/PhD/Code/Y1Q2/DataMining/HW3/script.R')
source('~/Documents/PhD/Code/Y1Q2/DataMining/HW3/script.R')
source('~/Documents/PhD/Code/Y1Q2/DataMining/HW3/script.R')
source('~/Documents/PhD/Code/Y1Q2/DataMining/HW3/script.R')
source('~/Documents/PhD/Code/Y1Q2/DataMining/HW3/script.R')
source('~/Documents/PhD/Code/Y1Q2/DataMining/HW3/script.R')
?fit
