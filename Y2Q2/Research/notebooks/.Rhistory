install.packages("optparse")
q()
opt$lat = 39.976057
opt = {}
opt$lat = 39.976057
opt
library(SparkR)
library(leaflet)
library(sp)
options(digits=15)
source("input.R")
the_lat = opt$lat
the_lng = opt$lng
the_zoom = opt$zoom
epsilon = opt$epsilon
mu = opt$mu
source("pbfe.R")
output = paste0(opt$out, "_E",  epsilon, "_M", mu)
data = read.csv(opt$input)
names(data) = c("ID","lat","lng")
sc <- sparkR.init("local[*]", "SparkR")
sqlContext <- sparkRSQL.init(sc)
dataRDD = SparkR:::textFile(sc,opt$input)
dataRDD = SparkR:::map(dataRDD, transformCoords)
head(dataRDD)
print("Transforming coordinates...")
schema <- structType(structField("id", "double"), structField("lng", "double"), structField("lat", "double"))
points <- createDataFrame(sqlContext, dataRDD, schema = schema)
head(points)
registerTempTable(points, "p1")
registerTempTable(points, "p2")
print("Running distance join...")
sql = paste0("SELECT * FROM p1 DISTANCE JOIN p2 ON POINT(p2.lng, p2.lat) IN CIRCLERANGE(POINT(p1.lng, p1.lat), ",epsilon,") WHERE p2.id < p1.id")
pairs = sql(sqlContext,sql)
head(pairs)
head(points)
epsilon
library(SparkR)
library(leaflet)
library(sp)
options(digits=15)
source("input.R")
the_lat = opt$lat
the_lng = opt$lng
the_zoom = opt$zoom
epsilon = opt$epsilon
mu = opt$mu
source("pbfe.R")
output = paste0(opt$out, "_E",  epsilon, "_M", mu)
data = read.csv(opt$input)
names(data) = c("ID","lat","lng")
sc <- sparkR.init("local[*]", "SparkR")
sqlContext <- sparkRSQL.init(sc)
dataRDD = SparkR:::textFile(sc,opt$input)
dataRDD = SparkR:::map(dataRDD, transformCoords)
print("Transforming coordinates...")
schema <- structType(structField("id", "double"), structField("lng", "double"), structField("lat", "double"))
points <- createDataFrame(sqlContext, dataRDD, schema = schema)
registerTempTable(points, "p1")
registerTempTable(points, "p2")
print("Running distance join...")
sql = paste0("SELECT * FROM p1 DISTANCE JOIN p2 ON POINT(p2.lng, p2.lat) IN CIRCLERANGE(POINT(p1.lng, p1.lat), ",epsilon,") WHERE p2.id < p1.id")
pairs = sql(sqlContext,sql)
head(pairs)
source("input.R")
the_lat = opt$lat
the_lng = opt$lng
the_zoom = opt$zoom
epsilon = opt$epsilon
mu = opt$mu
source("pbfe.R")
output = paste0(opt$out, "_E",  epsilon, "_M", mu)
data = read.csv(opt$input)
names(data) = c("ID","lat","lng")
# head(data)
# map = leaflet() %>%
#	addTiles() %>%
#	addCircleMarkers(lng=data$lng, lat=data$lat,weight=2,fillOpacity=1,color="blue",radius=2)
# file = 'map.html'
# htmlwidgets::saveWidget(map, file = file, selfcontained = F)
# IRdisplay::display_html(paste("<iframe width=100% height=400 src=' ", file, " ' ","/>"))
sc <- sparkR.init("local[*]", "SparkR")
sqlContext <- sparkRSQL.init(sc)
dataRDD = SparkR:::textFile(sc,opt$input)
dataRDD = SparkR:::map(dataRDD, transformCoords)
print("Transforming coordinates...")
schema <- structType(structField("id", "double"), structField("lng", "double"), structField("lat", "double"))
points <- createDataFrame(sqlContext, dataRDD, schema = schema)
# cache(points)
# head(points)
# count(points)
registerTempTable(points, "p1")
registerTempTable(points, "p2")
print("Running distance join...")
sql = paste0("SELECT * FROM p1 DISTANCE JOIN p2 ON POINT(p2.lng, p2.lat) IN CIRCLERANGE(POINT(p1.lng, p1.lat), ",epsilon,") WHERE p2.id < p1.id")
pairs = sql(sqlContext,sql)
head(pairs)
# nrow(pairs)
centers <- SparkR:::map(pairs, calculateDisk)
schema <- structType(structField("id1", "double"), structField("id2", "double"), structField("lng1", "double"), structField("lat1", "double"), structField("lng2", "double"), structField("lat2", "double"))
d <- createDataFrame(sqlContext, centers, schema = schema)
source('~/Documents/PhD/Code/Y2Q2/Research/notebooks/Beijing_Finding_Disks1.R')
source('~/Documents/PhD/Code/Y2Q2/Research/notebooks/Beijing_Finding_Disks1.R')
sparkR.stop()
source('~/Documents/PhD/Code/Y2Q2/Research/notebooks/Beijing_Finding_Disks1.R')
library(sqldf)
library(SparkR)
library(leaflet)
library(sp)
options(digits=15)
source("input.R")
the_lat = opt$lat
the_lng = opt$lng
the_zoom = opt$zoom
epsilon = opt$epsilon
mu = opt$mu
source("pbfe.R")
output = paste0(opt$out, "_E",  epsilon, "_M", mu)
data = read.csv(opt$input)
names(data) = c("ID","lat","lng")
# head(data)
# map = leaflet() %>%
#	addTiles() %>%
#	addCircleMarkers(lng=data$lng, lat=data$lat,weight=2,fillOpacity=1,color="blue",radius=2)
# file = 'map.html'
# htmlwidgets::saveWidget(map, file = file, selfcontained = F)
# IRdisplay::display_html(paste("<iframe width=100% height=400 src=' ", file, " ' ","/>"))
sc <- sparkR.init("local[*]", "SparkR")
sqlContext <- sparkRSQL.init(sc)
dataRDD = SparkR:::textFile(sc,opt$input)
dataRDD = SparkR:::map(dataRDD, transformCoords)
print("Transforming coordinates...")
schema <- structType(structField("id", "double"), structField("lng", "double"), structField("lat", "double"))
points <- createDataFrame(sqlContext, dataRDD, schema = schema)
# cache(points)
# head(points)
# count(points)
registerTempTable(points, "p1")
registerTempTable(points, "p2")
print("Running distance join...")
sql = paste0("SELECT * FROM p1 DISTANCE JOIN p2 ON POINT(p2.lng, p2.lat) IN CIRCLERANGE(POINT(p1.lng, p1.lat), ",epsilon,") WHERE p2.id < p1.id")
pairs = sql(sqlContext,sql)
# head(pairs)
# nrow(pairs)
centers <- SparkR:::map(pairs, calculateDisk)
schema <- structType(structField("id1", "double"), structField("id2", "double"), structField("lng1", "double"), structField("lat1", "double"), structField("lng2", "double"), structField("lat2", "double"))
d <- createDataFrame(sqlContext, centers, schema = schema)
# head(d)
# count(d)
print("Transforming centers...")
centers_lnglat <- SparkR:::map(centers, transformCenters)
disks <- as.data.frame(createDataFrame(sqlContext,centers_lnglat))
names(disks) = c("id1","id2","lng1","lat1","lng2","lat2")
# head(disks)
# nrow(disks)
p = sort(unique(c(disks$id1,disks$id2)))
data2 = data[p,]
print("Saving map with initial set...")
map = leaflet() %>% setView(lat = the_lat, lng = the_lng, zoom = the_zoom) %>% addTiles() %>%
addCircles(lng=disks$lng1, lat=disks$lat1, weight=2, fillOpacity=0.25, color="red", radius = epsilon/2) %>%
addCircles(lng=disks$lng2, lat=disks$lat2, weight=2, fillOpacity=0.25, color="red", radius = epsilon/2) %>%
addCircleMarkers(lng=data$lng, lat=data$lat, weight=2, fillOpacity=1,radius = 2) %>%
addCircleMarkers(lng=data2$lng, lat=data2$lat, weight=2, fillOpacity=1, color="purple", radius = 2, popup=paste(data2$ID)) %>%
addProviderTiles("Esri.WorldImagery", group = "ESRI") %>%
addLayersControl(baseGroup = c("OSM(default)", "ESRI"))
file = paste0(output,'_P1.html')
htmlwidgets::saveWidget(map, file = file, selfcontained = F)
# IRdisplay::display_html(paste("<iframe width=100% height=400 src=' ", file, " ' ","/>"))
registerTempTable(d, "d")
registerTempTable(points, "p")
print("Pruning disks with less than mu objects...")
sql = paste0("SELECT d.lng1 AS lng, d.lat1 AS lat, id AS id_member FROM d DISTANCE JOIN p ON POINT(p.lng, p.lat) IN CIRCLERANGE(POINT(d.lng1, d.lat1), ",(epsilon/2)+0.01,")")
mmdisks1 = sql(sqlContext,sql)
registerTempTable(mmdisks1, "m1")
sql = paste0("SELECT lng, lat FROM m1 GROUP BY lng, lat HAVING count(id_member) >= ", mu)
mdisks1 = sql(sqlContext,sql)
sql = paste0("SELECT d.lng2 AS lng, d.lat2 AS lat, id AS id_member FROM d DISTANCE JOIN p ON POINT(p.lng, p.lat) IN CIRCLERANGE(POINT(d.lng2, d.lat2), ",(epsilon/2)+0.01,")")
mmdisks2 = sql(sqlContext,sql)
registerTempTable(mmdisks2, "m2")
sql = paste0("SELECT lng, lat FROM m2 GROUP BY lng, lat HAVING count(id_member) >= ", mu)
mdisks2 = sql(sqlContext,sql)
mmdisks = as.data.frame(rbind(mmdisks1, mmdisks2))
source('~/Documents/PhD/Code/Y2Q2/Research/notebooks/Beijing_Finding_Disks1.R')
1:3
data
data[,1:2]
