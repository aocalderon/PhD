source('~/Documents/PhD/Code/Y2Q2/Research/notebooks/Beijing_Finding_Disks1.R')
View(data)
View(disks)
View(data2)
print("Saving final map...")
map = leaflet() %>% setView(lat = the_lat, lng = the_lng, zoom = the_zoom) %>% addTiles() %>%
addCircleMarkers(lng=data$lng, lat=data$lat, weight=2, fillOpacity=1,radius = 2, group = "Points") %>%
addCircles(lng=disks$lng1, lat=disks$lat1, weight=2, fillOpacity=0.10, color="red", radius = epsilon/2, group = "Initial set") %>%
addCircles(lng=disks$lng2, lat=disks$lat2, weight=2, fillOpacity=0.10, color="red", radius = epsilon/2, group = "Initial set") %>%
addCircleMarkers(lng=data2$lng, lat=data2$lat, weight=2, fillOpacity=1, color="purple", radius=2, group = "Initial set") %>%
addCircles(lng=mdisks$lng1, lat=mdisks$lat1, weight=2, fillOpacity=0.20, color="blue", radius = epsilon/2, group = "Prune less than mu") %>%
addCircleMarkers(lng=data2$lng, lat=data2$lat, weight=2, fillOpacity=1, color="purple", radius=2, group = "Prune less than mu") %>%
addCircles(lng=maximal$lng1, lat=maximal$lat1, weight=2, fillOpacity=0.40, color="orange", radius = epsilon/2, popup = maximal$pids, group = "Prune redundant") %>%
addCircleMarkers(lng=data2$lng, lat=data2$lat, weight=2, fillOpacity=1, color="purple", radius=2, group = "Prune redundant") %>%
addProviderTiles("Esri.WorldImagery", group = "ESRI") %>%
addLayersControl(baseGroup = c("OSM(default)", "ESRI"), overlayGroups = c("Initial set", "Prune less than mu", "Prune redundant", "Points"), options = layersControlOptions(collapsed = FALSE, autoZIndex = FALSE))
file = paste0(output,'_All.html')
htmlwidgets::saveWidget(map, file = file, selfcontained = F)
data2
data2[1:17,]
data2 = data2[1:17,]
print("Saving final map...")
map = leaflet() %>% setView(lat = the_lat, lng = the_lng, zoom = the_zoom) %>% addTiles() %>%
addCircleMarkers(lng=data$lng, lat=data$lat, weight=2, fillOpacity=1,radius = 2, group = "Points") %>%
addCircles(lng=disks$lng1, lat=disks$lat1, weight=2, fillOpacity=0.10, color="red", radius = epsilon/2, group = "Initial set") %>%
addCircles(lng=disks$lng2, lat=disks$lat2, weight=2, fillOpacity=0.10, color="red", radius = epsilon/2, group = "Initial set") %>%
addCircleMarkers(lng=data2$lng, lat=data2$lat, weight=2, fillOpacity=1, color="purple", radius=2, group = "Initial set") %>%
addCircles(lng=mdisks$lng1, lat=mdisks$lat1, weight=2, fillOpacity=0.20, color="blue", radius = epsilon/2, group = "Prune less than mu") %>%
addCircleMarkers(lng=data2$lng, lat=data2$lat, weight=2, fillOpacity=1, color="purple", radius=2, group = "Prune less than mu") %>%
addCircles(lng=maximal$lng1, lat=maximal$lat1, weight=2, fillOpacity=0.40, color="orange", radius = epsilon/2, popup = maximal$pids, group = "Prune redundant") %>%
addCircleMarkers(lng=data2$lng, lat=data2$lat, weight=2, fillOpacity=1, color="purple", radius=2, group = "Prune redundant") %>%
addProviderTiles("Esri.WorldImagery", group = "ESRI") %>%
addLayersControl(baseGroup = c("OSM(default)", "ESRI"), overlayGroups = c("Initial set", "Prune less than mu", "Prune redundant", "Points"), options = layersControlOptions(collapsed = FALSE, autoZIndex = FALSE))
file = paste0(output,'_All.html')
htmlwidgets::saveWidget(map, file = file, selfcontained = F)
library(sqldf)
library(SparkR)
library(leaflet)
library(sp)
options(digits=15)
source("input.R")
the_lat = opt$lat
the_lng = opt$lng
the_zoom = opt$zoom
epsilon = opt$epsilon
mu = opt$mu
source("pbfe.R")
output = paste0(opt$out, "_E",  epsilon, "_M", mu)
data = read.csv(opt$input)
names(data) = c("ID","lat","lng")
# head(data)
# map = leaflet() %>%
#	addTiles() %>%
#	addCircleMarkers(lng=data$lng, lat=data$lat,weight=2,fillOpacity=1,color="blue",radius=2)
# file = 'map.html'
# htmlwidgets::saveWidget(map, file = file, selfcontained = F)
# IRdisplay::display_html(paste("<iframe width=100% height=400 src=' ", file, " ' ","/>"))
sc <- sparkR.init("local[*]", "SparkR")
sqlContext <- sparkRSQL.init(sc)
dataRDD = SparkR:::textFile(sc,opt$input)
dataRDD = SparkR:::map(dataRDD, transformCoords)
print("Transforming coordinates...")
schema <- structType(structField("id", "double"), structField("lng", "double"), structField("lat", "double"))
points <- createDataFrame(sqlContext, dataRDD, schema = schema)
# cache(points)
# head(points)
# count(points)
registerTempTable(points, "p1")
registerTempTable(points, "p2")
print("Running distance join...")
sql = paste0("SELECT * FROM p1 DISTANCE JOIN p2 ON POINT(p2.lng, p2.lat) IN CIRCLERANGE(POINT(p1.lng, p1.lat), ",epsilon,") WHERE p2.id < p1.id")
pairs = sql(sqlContext,sql)
# head(pairs)
# nrow(pairs)
centers <- SparkR:::map(pairs, calculateDisk)
schema <- structType(structField("id1", "double"), structField("id2", "double"), structField("lng1", "double"), structField("lat1", "double"), structField("lng2", "double"), structField("lat2", "double"))
d <- createDataFrame(sqlContext, centers, schema = schema)
# head(d)
# count(d)
print("Transforming centers...")
centers_lnglat <- SparkR:::map(centers, transformCenters)
disks <- as.data.frame(createDataFrame(sqlContext,centers_lnglat))
names(disks) = c("id1","id2","lng1","lat1","lng2","lat2")
# head(disks)
# nrow(disks)
p = sort(unique(c(disks$id1,disks$id2)))
data2 = data[p,]
sparkR.stop()
sparkR.stop()
library(sqldf)
library(SparkR)
library(leaflet)
library(sp)
options(digits=15)
source("input.R")
the_lat = opt$lat
the_lng = opt$lng
the_zoom = opt$zoom
epsilon = opt$epsilon
mu = opt$mu
source("pbfe.R")
output = paste0(opt$out, "_E",  epsilon, "_M", mu)
data = read.csv(opt$input)
names(data) = c("ID","lat","lng")
# head(data)
# map = leaflet() %>%
#	addTiles() %>%
#	addCircleMarkers(lng=data$lng, lat=data$lat,weight=2,fillOpacity=1,color="blue",radius=2)
# file = 'map.html'
# htmlwidgets::saveWidget(map, file = file, selfcontained = F)
# IRdisplay::display_html(paste("<iframe width=100% height=400 src=' ", file, " ' ","/>"))
sc <- sparkR.init("local[*]", "SparkR")
sqlContext <- sparkRSQL.init(sc)
dataRDD = SparkR:::textFile(sc,opt$input)
dataRDD = SparkR:::map(dataRDD, transformCoords)
print("Transforming coordinates...")
schema <- structType(structField("id", "double"), structField("lng", "double"), structField("lat", "double"))
points <- createDataFrame(sqlContext, dataRDD, schema = schema)
# cache(points)
# head(points)
# count(points)
registerTempTable(points, "p1")
registerTempTable(points, "p2")
print("Running distance join...")
sql = paste0("SELECT * FROM p1 DISTANCE JOIN p2 ON POINT(p2.lng, p2.lat) IN CIRCLERANGE(POINT(p1.lng, p1.lat), ",epsilon,") WHERE p2.id < p1.id")
pairs = sql(sqlContext,sql)
# head(pairs)
# nrow(pairs)
centers <- SparkR:::map(pairs, calculateDisk)
schema <- structType(structField("id1", "double"), structField("id2", "double"), structField("lng1", "double"), structField("lat1", "double"), structField("lng2", "double"), structField("lat2", "double"))
d <- createDataFrame(sqlContext, centers, schema = schema)
# head(d)
# count(d)
print("Transforming centers...")
centers_lnglat <- SparkR:::map(centers, transformCenters)
disks <- as.data.frame(createDataFrame(sqlContext,centers_lnglat))
names(disks) = c("id1","id2","lng1","lat1","lng2","lat2")
# head(disks)
# nrow(disks)
p = sort(unique(c(disks$id1,disks$id2)))
data2 = data[p,]
View(data2)
View(disks)
p = sort(unique(c(disks$id1,disks$id2)))
p
View(data)
data = read.csv(opt$input, header = F)
names(data) = c("ID","lat","lng")
dataRDD = SparkR:::textFile(sc,opt$input)
dataRDD = SparkR:::map(dataRDD, transformCoords)
sparkR.stop()
sparkR.stop()
library(sqldf)
library(SparkR)
library(leaflet)
library(sp)
options(digits=15)
source("input.R")
the_lat = opt$lat
the_lng = opt$lng
the_zoom = opt$zoom
epsilon = opt$epsilon
mu = opt$mu
source("pbfe.R")
output = paste0(opt$out, "_E",  epsilon, "_M", mu)
data = read.csv(opt$input, header = F)
names(data) = c("ID","lat","lng")
# head(data)
# map = leaflet() %>%
#	addTiles() %>%
#	addCircleMarkers(lng=data$lng, lat=data$lat,weight=2,fillOpacity=1,color="blue",radius=2)
# file = 'map.html'
# htmlwidgets::saveWidget(map, file = file, selfcontained = F)
# IRdisplay::display_html(paste("<iframe width=100% height=400 src=' ", file, " ' ","/>"))
sc <- sparkR.init("local[*]", "SparkR")
sqlContext <- sparkRSQL.init(sc)
dataRDD = SparkR:::textFile(sc,opt$input)
dataRDD = SparkR:::map(dataRDD, transformCoords)
print("Transforming coordinates...")
schema <- structType(structField("id", "double"), structField("lng", "double"), structField("lat", "double"))
points <- createDataFrame(sqlContext, dataRDD, schema = schema)
# cache(points)
# head(points)
# count(points)
registerTempTable(points, "p1")
registerTempTable(points, "p2")
print("Running distance join...")
sql = paste0("SELECT * FROM p1 DISTANCE JOIN p2 ON POINT(p2.lng, p2.lat) IN CIRCLERANGE(POINT(p1.lng, p1.lat), ",epsilon,") WHERE p2.id < p1.id")
pairs = sql(sqlContext,sql)
# head(pairs)
# nrow(pairs)
centers <- SparkR:::map(pairs, calculateDisk)
schema <- structType(structField("id1", "double"), structField("id2", "double"), structField("lng1", "double"), structField("lat1", "double"), structField("lng2", "double"), structField("lat2", "double"))
d <- createDataFrame(sqlContext, centers, schema = schema)
# head(d)
# count(d)
print("Transforming centers...")
centers_lnglat <- SparkR:::map(centers, transformCenters)
disks <- as.data.frame(createDataFrame(sqlContext,centers_lnglat))
names(disks) = c("id1","id2","lng1","lat1","lng2","lat2")
# head(disks)
# nrow(disks)
View(data2)
View(data)
p = sort(unique(c(disks$id1,disks$id2)))
data2 = data[p,]
View(data2)
source('~/Documents/PhD/Code/Y2Q2/Research/notebooks/makeLinkTable.R')
source('~/Documents/PhD/Code/Y2Q2/Research/notebooks/Beijing_Finding_Disks1.R')
library("pacman", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
library(sp)
wgs84 = CRS("+init=epsg:4326")
mercator = CRS("+init=epsg:4799")
points = read.csv('p.csv', header = F)
names(points) = c("ID","lat","lng")
coordinates(points) = ~lng+lat
proj4string(points) = wgs84
points = spTransform(points, mercator)
points
plot(points)
coordinates(points)
coordinates(points)$lng
coordinates(points)
class(coordinates(points))
coordinates(points)[1]
coordinates(points)[1,]
coordinates(points)[,1]
coordinates(points)[,2]
as.data.frame(coordinates(points))
pp = as.data.frame(coordinates(points))
pp$ID = points$ID
pp
library("ggmap")
install.packages("ggmap")
q()
