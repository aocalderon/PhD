source('~/Documents/PhD/Code/Y2Q2/Research/notebooks/Beijing_Finding_Disks1.R')
View(data)
View(disks)
View(data2)
print("Saving final map...")
map = leaflet() %>% setView(lat = the_lat, lng = the_lng, zoom = the_zoom) %>% addTiles() %>%
addCircleMarkers(lng=data$lng, lat=data$lat, weight=2, fillOpacity=1,radius = 2, group = "Points") %>%
addCircles(lng=disks$lng1, lat=disks$lat1, weight=2, fillOpacity=0.10, color="red", radius = epsilon/2, group = "Initial set") %>%
addCircles(lng=disks$lng2, lat=disks$lat2, weight=2, fillOpacity=0.10, color="red", radius = epsilon/2, group = "Initial set") %>%
addCircleMarkers(lng=data2$lng, lat=data2$lat, weight=2, fillOpacity=1, color="purple", radius=2, group = "Initial set") %>%
addCircles(lng=mdisks$lng1, lat=mdisks$lat1, weight=2, fillOpacity=0.20, color="blue", radius = epsilon/2, group = "Prune less than mu") %>%
addCircleMarkers(lng=data2$lng, lat=data2$lat, weight=2, fillOpacity=1, color="purple", radius=2, group = "Prune less than mu") %>%
addCircles(lng=maximal$lng1, lat=maximal$lat1, weight=2, fillOpacity=0.40, color="orange", radius = epsilon/2, popup = maximal$pids, group = "Prune redundant") %>%
addCircleMarkers(lng=data2$lng, lat=data2$lat, weight=2, fillOpacity=1, color="purple", radius=2, group = "Prune redundant") %>%
addProviderTiles("Esri.WorldImagery", group = "ESRI") %>%
addLayersControl(baseGroup = c("OSM(default)", "ESRI"), overlayGroups = c("Initial set", "Prune less than mu", "Prune redundant", "Points"), options = layersControlOptions(collapsed = FALSE, autoZIndex = FALSE))
file = paste0(output,'_All.html')
htmlwidgets::saveWidget(map, file = file, selfcontained = F)
data2
data2[1:17,]
data2 = data2[1:17,]
print("Saving final map...")
map = leaflet() %>% setView(lat = the_lat, lng = the_lng, zoom = the_zoom) %>% addTiles() %>%
addCircleMarkers(lng=data$lng, lat=data$lat, weight=2, fillOpacity=1,radius = 2, group = "Points") %>%
addCircles(lng=disks$lng1, lat=disks$lat1, weight=2, fillOpacity=0.10, color="red", radius = epsilon/2, group = "Initial set") %>%
addCircles(lng=disks$lng2, lat=disks$lat2, weight=2, fillOpacity=0.10, color="red", radius = epsilon/2, group = "Initial set") %>%
addCircleMarkers(lng=data2$lng, lat=data2$lat, weight=2, fillOpacity=1, color="purple", radius=2, group = "Initial set") %>%
addCircles(lng=mdisks$lng1, lat=mdisks$lat1, weight=2, fillOpacity=0.20, color="blue", radius = epsilon/2, group = "Prune less than mu") %>%
addCircleMarkers(lng=data2$lng, lat=data2$lat, weight=2, fillOpacity=1, color="purple", radius=2, group = "Prune less than mu") %>%
addCircles(lng=maximal$lng1, lat=maximal$lat1, weight=2, fillOpacity=0.40, color="orange", radius = epsilon/2, popup = maximal$pids, group = "Prune redundant") %>%
addCircleMarkers(lng=data2$lng, lat=data2$lat, weight=2, fillOpacity=1, color="purple", radius=2, group = "Prune redundant") %>%
addProviderTiles("Esri.WorldImagery", group = "ESRI") %>%
addLayersControl(baseGroup = c("OSM(default)", "ESRI"), overlayGroups = c("Initial set", "Prune less than mu", "Prune redundant", "Points"), options = layersControlOptions(collapsed = FALSE, autoZIndex = FALSE))
file = paste0(output,'_All.html')
htmlwidgets::saveWidget(map, file = file, selfcontained = F)
library(sqldf)
library(SparkR)
library(leaflet)
library(sp)
options(digits=15)
source("input.R")
the_lat = opt$lat
the_lng = opt$lng
the_zoom = opt$zoom
epsilon = opt$epsilon
mu = opt$mu
source("pbfe.R")
output = paste0(opt$out, "_E",  epsilon, "_M", mu)
data = read.csv(opt$input)
names(data) = c("ID","lat","lng")
# head(data)
# map = leaflet() %>%
#	addTiles() %>%
#	addCircleMarkers(lng=data$lng, lat=data$lat,weight=2,fillOpacity=1,color="blue",radius=2)
# file = 'map.html'
# htmlwidgets::saveWidget(map, file = file, selfcontained = F)
# IRdisplay::display_html(paste("<iframe width=100% height=400 src=' ", file, " ' ","/>"))
sc <- sparkR.init("local[*]", "SparkR")
sqlContext <- sparkRSQL.init(sc)
dataRDD = SparkR:::textFile(sc,opt$input)
dataRDD = SparkR:::map(dataRDD, transformCoords)
print("Transforming coordinates...")
schema <- structType(structField("id", "double"), structField("lng", "double"), structField("lat", "double"))
points <- createDataFrame(sqlContext, dataRDD, schema = schema)
# cache(points)
# head(points)
# count(points)
registerTempTable(points, "p1")
registerTempTable(points, "p2")
print("Running distance join...")
sql = paste0("SELECT * FROM p1 DISTANCE JOIN p2 ON POINT(p2.lng, p2.lat) IN CIRCLERANGE(POINT(p1.lng, p1.lat), ",epsilon,") WHERE p2.id < p1.id")
pairs = sql(sqlContext,sql)
# head(pairs)
# nrow(pairs)
centers <- SparkR:::map(pairs, calculateDisk)
schema <- structType(structField("id1", "double"), structField("id2", "double"), structField("lng1", "double"), structField("lat1", "double"), structField("lng2", "double"), structField("lat2", "double"))
d <- createDataFrame(sqlContext, centers, schema = schema)
# head(d)
# count(d)
print("Transforming centers...")
centers_lnglat <- SparkR:::map(centers, transformCenters)
disks <- as.data.frame(createDataFrame(sqlContext,centers_lnglat))
names(disks) = c("id1","id2","lng1","lat1","lng2","lat2")
# head(disks)
# nrow(disks)
p = sort(unique(c(disks$id1,disks$id2)))
data2 = data[p,]
sparkR.stop()
sparkR.stop()
library(sqldf)
library(SparkR)
library(leaflet)
library(sp)
options(digits=15)
source("input.R")
the_lat = opt$lat
the_lng = opt$lng
the_zoom = opt$zoom
epsilon = opt$epsilon
mu = opt$mu
source("pbfe.R")
output = paste0(opt$out, "_E",  epsilon, "_M", mu)
data = read.csv(opt$input)
names(data) = c("ID","lat","lng")
# head(data)
# map = leaflet() %>%
#	addTiles() %>%
#	addCircleMarkers(lng=data$lng, lat=data$lat,weight=2,fillOpacity=1,color="blue",radius=2)
# file = 'map.html'
# htmlwidgets::saveWidget(map, file = file, selfcontained = F)
# IRdisplay::display_html(paste("<iframe width=100% height=400 src=' ", file, " ' ","/>"))
sc <- sparkR.init("local[*]", "SparkR")
sqlContext <- sparkRSQL.init(sc)
dataRDD = SparkR:::textFile(sc,opt$input)
dataRDD = SparkR:::map(dataRDD, transformCoords)
print("Transforming coordinates...")
schema <- structType(structField("id", "double"), structField("lng", "double"), structField("lat", "double"))
points <- createDataFrame(sqlContext, dataRDD, schema = schema)
# cache(points)
# head(points)
# count(points)
registerTempTable(points, "p1")
registerTempTable(points, "p2")
print("Running distance join...")
sql = paste0("SELECT * FROM p1 DISTANCE JOIN p2 ON POINT(p2.lng, p2.lat) IN CIRCLERANGE(POINT(p1.lng, p1.lat), ",epsilon,") WHERE p2.id < p1.id")
pairs = sql(sqlContext,sql)
# head(pairs)
# nrow(pairs)
centers <- SparkR:::map(pairs, calculateDisk)
schema <- structType(structField("id1", "double"), structField("id2", "double"), structField("lng1", "double"), structField("lat1", "double"), structField("lng2", "double"), structField("lat2", "double"))
d <- createDataFrame(sqlContext, centers, schema = schema)
# head(d)
# count(d)
print("Transforming centers...")
centers_lnglat <- SparkR:::map(centers, transformCenters)
disks <- as.data.frame(createDataFrame(sqlContext,centers_lnglat))
names(disks) = c("id1","id2","lng1","lat1","lng2","lat2")
# head(disks)
# nrow(disks)
p = sort(unique(c(disks$id1,disks$id2)))
data2 = data[p,]
View(data2)
View(disks)
p = sort(unique(c(disks$id1,disks$id2)))
p
View(data)
data = read.csv(opt$input, header = F)
names(data) = c("ID","lat","lng")
dataRDD = SparkR:::textFile(sc,opt$input)
dataRDD = SparkR:::map(dataRDD, transformCoords)
sparkR.stop()
sparkR.stop()
library(sqldf)
library(SparkR)
library(leaflet)
library(sp)
options(digits=15)
source("input.R")
the_lat = opt$lat
the_lng = opt$lng
the_zoom = opt$zoom
epsilon = opt$epsilon
mu = opt$mu
source("pbfe.R")
output = paste0(opt$out, "_E",  epsilon, "_M", mu)
data = read.csv(opt$input, header = F)
names(data) = c("ID","lat","lng")
# head(data)
# map = leaflet() %>%
#	addTiles() %>%
#	addCircleMarkers(lng=data$lng, lat=data$lat,weight=2,fillOpacity=1,color="blue",radius=2)
# file = 'map.html'
# htmlwidgets::saveWidget(map, file = file, selfcontained = F)
# IRdisplay::display_html(paste("<iframe width=100% height=400 src=' ", file, " ' ","/>"))
sc <- sparkR.init("local[*]", "SparkR")
sqlContext <- sparkRSQL.init(sc)
dataRDD = SparkR:::textFile(sc,opt$input)
dataRDD = SparkR:::map(dataRDD, transformCoords)
print("Transforming coordinates...")
schema <- structType(structField("id", "double"), structField("lng", "double"), structField("lat", "double"))
points <- createDataFrame(sqlContext, dataRDD, schema = schema)
# cache(points)
# head(points)
# count(points)
registerTempTable(points, "p1")
registerTempTable(points, "p2")
print("Running distance join...")
sql = paste0("SELECT * FROM p1 DISTANCE JOIN p2 ON POINT(p2.lng, p2.lat) IN CIRCLERANGE(POINT(p1.lng, p1.lat), ",epsilon,") WHERE p2.id < p1.id")
pairs = sql(sqlContext,sql)
# head(pairs)
# nrow(pairs)
centers <- SparkR:::map(pairs, calculateDisk)
schema <- structType(structField("id1", "double"), structField("id2", "double"), structField("lng1", "double"), structField("lat1", "double"), structField("lng2", "double"), structField("lat2", "double"))
d <- createDataFrame(sqlContext, centers, schema = schema)
# head(d)
# count(d)
print("Transforming centers...")
centers_lnglat <- SparkR:::map(centers, transformCenters)
disks <- as.data.frame(createDataFrame(sqlContext,centers_lnglat))
names(disks) = c("id1","id2","lng1","lat1","lng2","lat2")
# head(disks)
# nrow(disks)
View(data2)
View(data)
p = sort(unique(c(disks$id1,disks$id2)))
data2 = data[p,]
View(data2)
source('~/Documents/PhD/Code/Y2Q2/Research/notebooks/makeLinkTable.R')
source('~/Documents/PhD/Code/Y2Q2/Research/notebooks/Beijing_Finding_Disks1.R')
library("pacman", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
library(sp)
wgs84 = CRS("+init=epsg:4326")
mercator = CRS("+init=epsg:4799")
points = read.csv('p.csv', header = F)
names(points) = c("ID","lat","lng")
coordinates(points) = ~lng+lat
proj4string(points) = wgs84
points = spTransform(points, mercator)
points
plot(points)
coordinates(points)
coordinates(points)$lng
coordinates(points)
class(coordinates(points))
coordinates(points)[1]
coordinates(points)[1,]
coordinates(points)[,1]
coordinates(points)[,2]
as.data.frame(coordinates(points))
pp = as.data.frame(coordinates(points))
pp$ID = points$ID
pp
library("ggmap")
install.packages("ggmap")
source('~/Documents/PhD/Code/Y2Q2/Research/notebooks/Beijing_Finding_Disks1.R')
source('~/Documents/PhD/Code/Y2Q2/Research/notebooks/Beijing_Finding_Disks1.R')
write.table(centers, 'centers_4799.csv', row.names = F, col.names = F)
write.table(collect(centers), 'centers_4799.csv', row.names = F, col.names = F)
library(sqldf)
library(SparkR)
library(leaflet)
library(sp)
options(digits=15)
source("input.R")
the_lat = opt$lat
the_lng = opt$lng
the_zoom = opt$zoom
epsilon = opt$epsilon
mu = opt$mu
source("pbfe.R")
output = paste0(opt$out, "_E",  epsilon, "_M", mu)
data = read.csv(opt$input, header = F)
names(data) = c("ID","lat","lng")
sc <- sparkR.init("local[*]", "SparkR")
sqlContext <- sparkRSQL.init(sc)
Sys.setenv(SPARK_HOME = "/opt/Simba/")
sc <- sparkR.init("local[*]", "SparkR")
source('~/Documents/PhD/Code/Y2Q2/Research/notebooks/Beijing_Finding_Disks1.R')
?write.df
source('~/Documents/PhD/Code/Y2Q2/Research/notebooks/Beijing_Finding_Disks1.R')
sparkR.stop()
source('~/Documents/PhD/Code/Y2Q2/Research/notebooks/Beijing_Finding_Disks1.R')
source('~/Documents/PhD/Code/Y2Q2/Research/notebooks/Beijing_Finding_Disks1.R')
sparkR.stop()
source('~/Documents/PhD/Code/Y2Q2/Research/notebooks/Beijing_Finding_Disks1.R')
library(sp)
wgs84 = CRS("+init=epsg:4326")
mercator = CRS("+init=epsg:4799")
points = read.csv('p.csv', header = F)
names(points) = c("ID","lat","lng")
coordinates(points) = ~lng+lat
proj4string(points) = wgs84
points = spTransform(points, mercator)
coordinates(points)
coordinates(points)[,1]
coordinates(points)[,2]
pointsDF = data.class(ID=points$ID, lng=coordinates(points)[,1], lat=coordinates(points)[,2])
pointsDF = data.frame(ID=points$ID, lng=coordinates(points)[,1], lat=coordinates(points)[,2])
View(pointsDF)
write.table(pointsDF, 'p_4799.csv', row.names = F, col.names = F)
plot(x=pointsDF$lng, y=pointsDFRlat)
plot(x=pointsDF$lng, y=pointsDF$lat)
epsilon = 100
plot(1, asp=1, axes = F, , xlab = "", ylab = "", type='n',
xlim = c(min(pointsDF$lng) - epsilon,  max(pointsDF$lng) + epsilon),
ylim = c(min(pointsDF$lat) - epsilon,  max(pointsDF$lat) + epsilon))
pointsDF$lat
pointsDF$lat[1]
draw.circle(pointsDF$lng[1], pointsDF$lat[1], epsilon/2, nv = 1000, border = 2,
col = NA, lty = 2, lwd = 0.5)
install.packages("plotrix")
library("plotrix", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
draw.circle(pointsDF$lng[1], pointsDF$lat[1],
epsilon/2, nv = 1000, border = 2,
col = NA, lty = 2, lwd = 0.5)
circle <- function(point){
draw.circle(point$lng, point$lat,
epsilon/2, nv = 1000, border = 2,
col = NA, lty = 2, lwd = 0.5)
}
apply(pointsDF, 1, circle)
apply(pointsDF, 1, function(x){x})
apply(pointsDF, 1, function(x){x.lat})
apply(pointsDF, 1, function(x){x['ID']})
apply(pointsDF, 1, function(x){x['lat']})
apply(pointsDF, 1, function(x){x['lng']})
circle <- function(point){
draw.circle(point[lng], point[lat],
epsilon/2, nv = 1000, border = 2,
col = NA, lty = 2, lwd = 0.5)
}
apply(pointsDF, 1, circle)
circle <- function(point){
draw.circle(point['lng'], point['lat'],
epsilon/2, nv = 1000, border = 2,
col = NA, lty = 2, lwd = 0.5)
}
apply(pointsDF, 1, circle)
plot(1, asp=1, axes = F, , xlab = "", ylab = "", type='n',
xlim = c(min(pointsDF$lng) - epsilon,  max(pointsDF$lng) + epsilon),
ylim = c(min(pointsDF$lat) - epsilon,  max(pointsDF$lat) + epsilon))
source('~/Documents/PhD/Code/Y2Q3/Viz/drawDisks.R')
source('~/Documents/PhD/Code/Y2Q3/Viz/drawDisks.R')
library(plotrix)
epsilon = 100
points = read.csv('p_4799.csv', header = F)
names(points) = c("ID","lat","lng")
View(points)
source('~/Documents/PhD/Code/Y2Q3/Viz/drawDisks.R')
source('~/Documents/PhD/Code/Y2Q3/Viz/drawDisks.R')
source('~/Documents/PhD/Code/Y2Q3/Viz/drawDisks.R')
source('~/Documents/PhD/Code/Y2Q3/Viz/drawDisks.R')
source('~/Documents/PhD/Code/Y2Q3/Viz/drawDisks.R')
source('~/Documents/PhD/Code/Y2Q3/Viz/drawDisks.R')
source('~/Documents/PhD/Code/Y2Q3/Viz/drawDisks.R')
source('~/Documents/PhD/Code/Y2Q3/Viz/drawDisks.R')
points = read.csv('mdisks.csv', header = F)
View(points)
points = read.csv('mdisks.csv')
View(points)
source('~/Documents/PhD/Code/Y2Q3/Viz/transformCoords.R')
source('~/Documents/PhD/Code/Y2Q3/Viz/transformCoords.R')
source('~/Documents/PhD/Code/Y2Q3/Viz/transformCoords.R')
points = read.csv('f1_4799.csv', header = F)
names(points) = c("ID","lng","lat")
View(points)
draw.circle(points$lng, points$lat,
epsilon/2, nv = 1000, border = 2,
col = NA, lty = 2, lwd = 0.5)
par(mar=c(0.1,0.1,0.1,0.1))
plot(1, asp=1, axes = F, , xlab = "", ylab = "", type='n',
xlim = c(min(points$lng) - epsilon,  max(points$lng) + epsilon),
ylim = c(min(points$lat) - epsilon,  max(points$lat) + epsilon))
points = read.csv('p_4799.csv', header = F)
names(points) = c("ID","lng","lat")
points = read.csv('f1_4799.csv', header = F)
names(points) = c("ID","lng","lat")
draw.circle(points$lng, points$lat,
epsilon/2, nv = 1000, border = 2,
col = NA, lty = 2, lwd = 0.5)
source('~/Documents/PhD/Code/Y2Q3/Viz/drawDisks.R')
points(points$lng, points$lat, pch = 21, cex = 0.5, col = 1, bg = 1 )
source('~/Documents/PhD/Code/Y2Q3/Viz/drawDisks.R')
source('~/Documents/PhD/Code/Y2Q3/Viz/drawDisks.R')
source('~/Documents/PhD/Code/Y2Q3/Viz/drawDisks.R')
source('~/Documents/PhD/Code/Y2Q3/Viz/drawDisks.R')
source('~/Documents/PhD/Code/Y2Q3/Viz/drawDisks.R')
source('~/Documents/PhD/Code/Y2Q3/Viz/drawDisks.R')
source('~/Documents/PhD/Code/Y2Q3/Viz/drawDisks.R')
source('~/Documents/PhD/Code/Y2Q3/Viz/drawDisks.R')
source('~/Documents/PhD/Code/Y2Q3/Viz/drawDisks.R')
source('~/Documents/PhD/Code/Y2Q3/Viz/drawDisks.R')
?draw.circle
source('~/Documents/PhD/Code/Y2Q3/Viz/drawDisks.R')
source('~/Documents/PhD/Code/Y2Q3/Viz/drawDisks.R')
source('~/Documents/PhD/Code/Y2Q3/Viz/drawDisks.R')
source('~/Documents/PhD/Code/Y2Q3/Viz/drawDisks.R')
source('~/Documents/PhD/Code/Y2Q3/Viz/drawDisks.R')
source('~/Documents/PhD/Code/Y2Q3/Viz/drawDisks.R')
source('~/Documents/PhD/Code/Y2Q2/Research/notebooks/Beijing_Finding_Disks1.R')
sparkR.stop()
source('~/Documents/PhD/Code/Y2Q2/Research/notebooks/Beijing_Finding_Disks1.R')
sparkR.stop()
sparkR.stop()
sparkR.stop()
source('~/Documents/PhD/Code/Y2Q2/Research/notebooks/Beijing_Finding_Disks1.R')
source('~/Documents/PhD/Code/Y2Q2/Research/notebooks/Beijing_Finding_Disks1.R')
source('~/Documents/PhD/Code/Y2Q2/Research/notebooks/Beijing_Finding_Disks1.R')
points = read.csv('disks.csv')
View(points)
points = read.csv('disks.csv')
points1 = points[,c('id1','lng1','lat1')]
points2 = points[,c('id2','lng2','lat2')]
View(points1)
View(points2)
points = read.csv('disks.csv')
points1 = points[,c('lng1','lat1')]
points2 = points[,c('lng2','lat2')]
points = rbind(points1, points2)
points = read.csv('disks.csv')
points1 = points[,c('lng1','lat1')]
names(points1) = c("lng","lat")
points2 = points[,c('lng2','lat2')]
names(points2) = c("lng","lat")
points = rbind(points1, points2)
points$ID = 1:nrow(points)
points = points[,c('ID','lng1','lat1')]
points = points[,c('ID','lng','lat')]
View(points)
source('~/Documents/PhD/Code/Y2Q3/Viz/transformCoords.R')
source('~/Documents/PhD/Code/Y2Q3/Viz/transformCoords.R')
source('~/Documents/PhD/Code/Y2Q3/Viz/drawDisks.R')
par(mar=c(0.1,0.1,0.1,0.1))
plot(1, asp=1, axes = F, , xlab = "", ylab = "", type='n',
xlim = c(min(f0$lng) - epsilon,  max(f0$lng) + epsilon),
ylim = c(min(f0$lat) - epsilon,  max(f0$lat) + epsilon))
apply(f0, 1, circle, 'red')
f1 = read.csv('f1_4799.csv', header = F)
names(f1) = c("ID","lng","lat")
apply(f1, 1, circle, 'blue')
points = read.csv('p_4799.csv', header = F)
names(points) = c("ID","lng","lat")
points(points$lng, points$lat, pch = 21, cex = 0.5, col = 1, bg = 1 )
box()
source('~/Documents/PhD/Code/Y2Q3/Viz/transformCoords.R')
points = read.csv('maximal.csv')
View(points)
source('~/Documents/PhD/Code/Y2Q3/Viz/transformCoords.R')
source('~/Documents/PhD/Code/Y2Q3/Viz/transformCoords.R')
View(points)
source('~/Documents/PhD/Code/Y2Q3/Viz/drawDisks.R')
source('~/Documents/PhD/Code/Y2Q3/Viz/drawDisks.R')
par(mar=c(0.1,0.1,0.1,0.1))
plot(1, asp=1, axes = F, , xlab = "", ylab = "", type='n',
xlim = c(min(f0$lng) - epsilon,  max(f0$lng) + epsilon),
ylim = c(min(f0$lat) - epsilon,  max(f0$lat) + epsilon))
f2 = read.csv('f2_4799.csv', header = F)
names(f2) = c("ID","lng","lat")
apply(f2, 1, circle, 'purple')
View(f2)
View(f1)
View(f2)
apply(f2, 1, circle, 'purple')
View(f2)
source('~/Documents/PhD/Code/Y2Q3/Viz/drawDisks.R')
View(f2)
epsilon = 100
source('~/Documents/PhD/Code/Y2Q3/Viz/drawDisks.R')
source('~/Documents/PhD/Code/Y2Q3/Viz/drawDisks.R')
f1 = read.csv('f1_4799.csv', header = F)
names(f1) = c("ID","lng","lat")
apply(f1, 1, circle, 'blue')
f2 = read.csv('f2_4799.csv', header = F)
names(f2) = c("ID","lng","lat")
apply(f2, 1, circle, 'purple')
points(f2$lng, f2$lat, pch = 21, cex = 0.5, col = 1, bg = 1 )
draw.circle(f2['lng'], f2['lat'],
epsilon/2, nv = 1000, border = color,
col = adjustcolor(color, alpha=0.05), lty = 2, lwd = 0.75)
color = 'purple'
draw.circle(f2['lng'], f2['lat'],
epsilon/2, nv = 1000, border = color,
col = adjustcolor(color, alpha=0.05), lty = 2, lwd = 0.75)
f0['lng']
class(f0['lng'])
class(f2['lng'])
class(f2[,c('lng')])
class(f0[,c('lng')])
class(f2[,c('lat')])
class(f0[,c('lat')])
f2 = read.csv('f2_4799.csv', header = F)
f2 = f2[,c('lng', 'lat')]
f2 = read.csv('f2_4799.csv', header = F)
names(f2) = c("PIDs","lng","lat")
f2 = f2[,c('lng', 'lat')]
apply(f2, 1, circle, 'purple')
source('~/Documents/PhD/Code/Y2Q3/Viz/drawDisks.R')
plot(1, asp=1, axes = F, , xlab = "", ylab = "", type='n',
xlim = c(min(f0$lng) - epsilon,  max(f0$lng) + epsilon),
ylim = c(min(f0$lat) - epsilon,  max(f0$lat) + epsilon))
f2 = read.csv('f2_4799.csv', header = F)
names(f2) = c("PIDs","lng","lat")
f2 = f2[,c('lng', 'lat')]
apply(f2, 1, circle, 'purple')
points = read.csv('p_4799.csv', header = F)
names(points) = c("ID","lng","lat")
points(points$lng, points$lat, pch = 21, cex = 0.5, col = 1, bg = 1 )
box()
source('~/Documents/PhD/Code/Y2Q3/Viz/drawDisks.R')
source('~/Documents/PhD/Code/Y2Q3/Viz/drawDisks.R')
?box
source('~/Documents/PhD/Code/Y2Q3/Viz/drawDisks.R')
source('~/Documents/PhD/Code/Y2Q3/Viz/drawDisks.R')
source('~/Documents/PhD/Code/Y2Q3/Viz/drawDisks.R')
source('~/Documents/PhD/Code/Y2Q3/Viz/drawDisks.R')
source('~/Documents/PhD/Code/Y2Q3/Viz/drawDisks.R')
source('~/Documents/PhD/Code/Y2Q3/Viz/drawDisks.R')
source('~/Documents/PhD/Code/Y2Q3/Viz/drawDisks.R')
source('~/Documents/PhD/Code/Y2Q3/Viz/drawDisks.R')
source('~/Documents/PhD/Code/Y2Q3/Viz/drawDisks.R')
source('~/Documents/PhD/Code/Y2Q3/Viz/drawDisks.R')
source('~/Documents/PhD/Code/Y2Q3/Viz/drawDisks.R')
source('~/Documents/PhD/Code/Y2Q3/Viz/drawDisks.R')
source('~/Documents/PhD/Code/Y2Q3/Viz/drawDisks.R')
source('~/Documents/PhD/Code/Y2Q3/Viz/drawDisks.R')
source('~/Documents/PhD/Code/Y2Q3/Viz/drawDisks.R')
source('~/Documents/PhD/Code/Y2Q3/Viz/drawDisks.R')
source('~/Documents/PhD/Code/Y2Q3/Viz/drawDisks.R')
