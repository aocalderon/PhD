sim-outorder: SimpleScalar/Alpha Tool Set version 3.0 of August, 2003.
Copyright (c) 1994-2003 by Todd M. Austin, Ph.D. and SimpleScalar, LLC.
All Rights Reserved. This version of SimpleScalar is licensed for academic
non-commercial use.  No portion of this work may be used by any commercial
entity, or for any commercial purpose, without the prior written permission
of SimpleScalar, LLC (info@simplescalar.com).


Processor Parameters:
Issue Width: 8
Window Size: 16
Number of Virtual Registers: 32
Number of Physical Registers: 16
Datapath Width: 64
Total Power Consumption: 93.8952
Branch Predictor Power Consumption: 4.52313  (4.92%)
 branch target buffer power (W): 4.16837
 local predict power (W): 0.0879711
 global predict power (W): 0.0996078
 chooser power (W): 0.0702439
 RAS power (W): 0.0969383
Rename Logic Power Consumption: 0.417965  (0.455%)
 Instruction Decode Power (W): 0.0159915
 RAT decode_power (W): 0.113514
 RAT wordline_power (W): 0.0307815
 RAT bitline_power (W): 0.246771
 DCL Comparators (W): 0.0109075
Instruction Window Power Consumption: 6.41079  (6.98%)
 tagdrive (W): 0.223096
 tagmatch (W): 0.0741378
 Selection Logic (W): 0.0268434
 decode_power (W): 0.106501
 wordline_power (W): 0.288569
 bitline_power (W): 5.69164
Load/Store Queue Power Consumption: 0.963281  (1.05%)
 tagdrive (W): 0.457232
 tagmatch (W): 0.100875
 decode_power (W): 0.00799577
 wordline_power (W): 0.0150119
 bitline_power (W): 0.382166
Arch. Register File Power Consumption: 9.39491  (10.2%)
 decode_power (W): 0.227029
 wordline_power (W): 0.288569
 bitline_power (W): 8.87931
Result Bus Power Consumption: 5.27305  (5.74%)
Total Clock Power: 33.1996  (36.1%)
Int ALU Power: 4.66013  (5.07%)
FP ALU Power: 14.281  (15.5%)
Instruction Cache Power Consumption: 2.21363  (2.41%)
 decode_power (W): 0.779481
 wordline_power (W): 0.028656
 bitline_power (W): 0.886372
 senseamp_power (W): 0.096
 tagarray_power (W): 0.423116
Itlb_power (W): 0.263418 (0.287%)
Data Cache Power Consumption: 5.18303  (5.64%)
 decode_power (W): 0.651055
 wordline_power (W): 0.196735
 bitline_power (W): 2.71235
 senseamp_power (W): 0.768
 tagarray_power (W): 0.854886
Dtlb_power (W): 0.902079 (0.982%)
Level 2 Cache Power Consumption: 4.2091 (4.58%)
 decode_power (W): 0.41817
 wordline_power (W): 0.0430878
 bitline_power (W): 3.0244
 senseamp_power (W): 0.192
 tagarray_power (W): 0.531433
warning: section `.comment' ignored...
sim: command line: ./sim-outorder -issue:width 8 ../benchmarks/go.alpha ../benchmarks/1stmt.i 

sim: simulation started @ Fri Apr 15 16:52:34 2016, options follow:

sim-outorder: This simulator implements a very detailed out-of-order issue
superscalar processor with a two-level memory system and speculative
execution support.  This simulator is a performance simulator, tracking the
latency of all pipeline operations.

# -config                     # load configuration from a file
# -dumpconfig                 # dump configuration to a file
# -h                    false # print help message    
# -v                    false # verbose operation     
# -d                    false # enable debug message  
# -i                    false # start in Dlite debugger
-seed                       1 # random number generator seed (0 for timer seed)
# -q                    false # initialize and terminate immediately
# -chkpt               <null> # restore EIO trace execution from <fname>
# -redir:sim           <null> # redirect simulator output to file (non-interactive only)
# -redir:prog          <null> # redirect simulated program output to file
-nice                       0 # simulator scheduling priority
-max:inst                   0 # maximum number of inst's to execute
-fastfwd                    0 # number of insts skipped before timing starts
# -ptrace              <null> # generate pipetrace, i.e., <fname|stdout|stderr> <range>
-fetch:ifqsize              4 # instruction fetch queue size (in insts)
-fetch:mplat                3 # extra branch mis-prediction latency
-fetch:speed                1 # speed of front-end of machine relative to execution core
-bpred                  bimod # branch predictor type {nottaken|taken|perfect|bimod|2lev|comb}
-bpred:bimod     2048 # bimodal predictor config (<table size>)
-bpred:2lev      1 1024 8 0 # 2-level predictor config (<l1size> <l2size> <hist_size> <xor>)
-bpred:comb      1024 # combining predictor config (<meta_table_size>)
-bpred:ras                  8 # return address stack size (0 for no return stack)
-bpred:btb       512 4 # BTB config (<num_sets> <associativity>)
# -bpred:spec_update       <null> # speculative predictors update in {ID|WB} (default non-spec)
-decode:width               4 # instruction decode B/W (insts/cycle)
-issue:width                8 # instruction issue B/W (insts/cycle)
-issue:inorder          false # run pipeline with in-order issue
-issue:wrongpath         true # issue instructions down wrong execution paths
-commit:width               4 # instruction commit B/W (insts/cycle)
-ruu:size                  16 # register update unit (RUU) size
-lsq:size                   8 # load/store queue (LSQ) size
-cache:dl1       dl1:128:32:4:l # l1 data cache config, i.e., {<config>|none}
-cache:dl1lat               1 # l1 data cache hit latency (in cycles)
-cache:dl2       ul2:1024:64:4:l # l2 data cache config, i.e., {<config>|none}
-cache:dl2lat               6 # l2 data cache hit latency (in cycles)
-cache:il1       il1:512:32:1:l # l1 inst cache config, i.e., {<config>|dl1|dl2|none}
-cache:il1lat               1 # l1 instruction cache hit latency (in cycles)
-cache:il2                dl2 # l2 instruction cache config, i.e., {<config>|dl2|none}
-cache:il2lat               6 # l2 instruction cache hit latency (in cycles)
-cache:flush            false # flush caches on system calls
-cache:icompress        false # convert 64-bit inst addresses to 32-bit inst equivalents
-mem:lat         18 2 # memory access latency (<first_chunk> <inter_chunk>)
-mem:width                  8 # memory access bus width (in bytes)
-tlb:itlb        itlb:16:4096:4:l # instruction TLB config, i.e., {<config>|none}
-tlb:dtlb        dtlb:32:4096:4:l # data TLB config, i.e., {<config>|none}
-tlb:lat                   30 # inst/data TLB miss latency (in cycles)
-res:ialu                   4 # total number of integer ALU's available
-res:imult                  1 # total number of integer multiplier/dividers available
-res:memport                2 # total number of memory system ports available (to CPU)
-res:fpalu                  4 # total number of floating point ALU's available
-res:fpmult                 1 # total number of floating point multiplier/dividers available
# -pcstat              <null> # profile stat(s) against text addr's (mult uses ok)
-bugcompat              false # operate in backward-compatible bugs mode (for testing only)

  Pipetrace range arguments are formatted as follows:

    {{@|#}<start>}:{{@|#|+}<end>}

  Both ends of the range are optional, if neither are specified, the entire
  execution is traced.  Ranges that start with a `@' designate an address
  range to be traced, those that start with an `#' designate a cycle count
  range.  All other range values represent an instruction count range.  The
  second argument, if specified with a `+', indicates a value relative
  to the first argument, e.g., 1000:+100 == 1000:1100.  Program symbols may
  be used in all contexts.

    Examples:   -ptrace FOO.trc #0:#1000
                -ptrace BAR.trc @2000:
                -ptrace BLAH.trc :1500
                -ptrace UXXE.trc :
                -ptrace FOOBAR.trc @main:+278

  Branch predictor configuration examples for 2-level predictor:
    Configurations:   N, M, W, X
      N   # entries in first level (# of shift register(s))
      W   width of shift register(s)
      M   # entries in 2nd level (# of counters, or other FSM)
      X   (yes-1/no-0) xor history and address for 2nd level index
    Sample predictors:
      GAg     : 1, W, 2^W, 0
      GAp     : 1, W, M (M > 2^W), 0
      PAg     : N, W, 2^W, 0
      PAp     : N, W, M (M == 2^(N+W)), 0
      gshare  : 1, W, 2^W, 1
  Predictor `comb' combines a bimodal and a 2-level predictor.

  The cache config parameter <config> has the following format:

    <name>:<nsets>:<bsize>:<assoc>:<repl>

    <name>   - name of the cache being defined
    <nsets>  - number of sets in the cache
    <bsize>  - block size of the cache
    <assoc>  - associativity of the cache
    <repl>   - block replacement strategy, 'l'-LRU, 'f'-FIFO, 'r'-random

    Examples:   -cache:dl1 dl1:4096:32:1:l
                -dtlb dtlb:128:4096:32:r

  Cache levels can be unified by pointing a level of the instruction cache
  hierarchy at the data cache hiearchy using the "dl1" and "dl2" cache
  configuration arguments.  Most sensible combinations are supported, e.g.,

    A unified l2 cache (il2 is pointed at dl2):
      -cache:il1 il1:128:64:1:l -cache:il2 dl2
      -cache:dl1 dl1:256:32:1:l -cache:dl2 ul2:1024:64:2:l

    Or, a fully unified cache hierarchy (il1 pointed at dl1):
      -cache:il1 dl1
      -cache:dl1 ul1:256:32:1:l -cache:dl2 ul2:1024:64:2:l



sim: ** starting performance simulation **
warning: partially supported sigprocmask() call...

sim: ** simulation statistics **
sim_num_insn                 709658 # total number of instructions committed
sim_num_refs                 196706 # total number of loads and stores committed
sim_num_loads                104966 # total number of loads committed
sim_num_stores           91740.0000 # total number of stores committed
sim_num_branches             124445 # total number of branches committed
sim_elapsed_time                  1 # total simulation time in seconds
sim_inst_rate           709658.0000 # simulation speed (in insts/sec)
sim_total_insn               813192 # total number of instructions executed
sim_total_refs               222561 # total number of loads and stores executed
sim_total_loads              125701 # total number of loads executed
sim_total_stores         96860.0000 # total number of stores executed
sim_total_branches           143212 # total number of branches executed
sim_cycle                    374475 # total simulation time in cycles
sim_IPC                      1.8951 # instructions per cycle
sim_CPI                      0.5277 # cycles per instruction
sim_exec_BW                  2.1716 # total instructions (mis-spec + committed) per cycle
sim_IPB                      5.7026 # instruction per branch
IFQ_count                   1128973 # cumulative IFQ occupancy
IFQ_fcount                   253352 # cumulative IFQ full count
ifq_occupancy                3.0148 # avg IFQ occupancy (insn's)
ifq_rate                     2.1716 # avg IFQ dispatch rate (insn/cycle)
ifq_latency                  1.3883 # avg IFQ occupant latency (cycle's)
ifq_full                     0.6766 # fraction of time (cycle's) IFQ was full
RUU_count                   4207137 # cumulative RUU occupancy
RUU_fcount                   147242 # cumulative RUU full count
ruu_occupancy               11.2348 # avg RUU occupancy (insn's)
ruu_rate                     2.1716 # avg RUU dispatch rate (insn/cycle)
ruu_latency                  5.1736 # avg RUU occupant latency (cycle's)
ruu_full                     0.3932 # fraction of time (cycle's) RUU was full
LSQ_count                   1151571 # cumulative LSQ occupancy
LSQ_fcount                    15338 # cumulative LSQ full count
lsq_occupancy                3.0752 # avg LSQ occupancy (insn's)
lsq_rate                     2.1716 # avg LSQ dispatch rate (insn/cycle)
lsq_latency                  1.4161 # avg LSQ occupant latency (cycle's)
lsq_full                     0.0410 # fraction of time (cycle's) LSQ was full
sim_slip                    5898553 # total number of slip cycles
avg_sim_slip                 8.3118 # the average slip between issue and retirement
bpred_bimod.lookups          151931 # total number of bpred lookups
bpred_bimod.updates          124445 # total number of updates
bpred_bimod.addr_hits        111369 # total number of address-predicted hits
bpred_bimod.dir_hits         112272 # total number of direction-predicted hits (includes addr-hits)
bpred_bimod.misses            12173 # total number of misses
bpred_bimod.jr_hits            8357 # total number of address-predicted hits for JR's
bpred_bimod.jr_seen            9646 # total number of JR's seen
bpred_bimod.jr_non_ras_hits.PP         5099 # total number of address-predicted hits for non-RAS JR's
bpred_bimod.jr_non_ras_seen.PP         6327 # total number of non-RAS JR's seen
bpred_bimod.bpred_addr_rate    0.8949 # branch address-prediction rate (i.e., addr-hits/updates)
bpred_bimod.bpred_dir_rate    0.9022 # branch direction-prediction rate (i.e., all-hits/updates)
bpred_bimod.bpred_jr_rate    0.8664 # JR address-prediction rate (i.e., JR addr-hits/JRs seen)
bpred_bimod.bpred_jr_non_ras_rate.PP    0.8059 # non-RAS JR addr-pred rate (ie, non-RAS JR hits/JRs seen)
bpred_bimod.retstack_pushes         3764 # total number of address pushed onto ret-addr stack
bpred_bimod.retstack_pops         3617 # total number of address popped off of ret-addr stack
bpred_bimod.used_ras.PP         3319 # total number of RAS predictions used
bpred_bimod.ras_hits.PP         3258 # total number of RAS hits
bpred_bimod.ras_rate.PP    0.9816 # RAS prediction rate (i.e., RAS hits/used RAS)
il1.accesses                 859362 # total number of accesses
il1.hits                     857480 # total number of hits
il1.misses                     1882 # total number of misses
il1.replacements               1412 # total number of replacements
il1.writebacks                    0 # total number of writebacks
il1.invalidations                 0 # total number of invalidations
il1.miss_rate                0.0022 # miss rate (i.e., misses/ref)
il1.repl_rate                0.0016 # replacement rate (i.e., repls/ref)
il1.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
il1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
dl1.accesses                 205150 # total number of accesses
dl1.hits                     193498 # total number of hits
dl1.misses                    11652 # total number of misses
dl1.replacements              11140 # total number of replacements
dl1.writebacks                 9913 # total number of writebacks
dl1.invalidations                 0 # total number of invalidations
dl1.miss_rate                0.0568 # miss rate (i.e., misses/ref)
dl1.repl_rate                0.0543 # replacement rate (i.e., repls/ref)
dl1.wb_rate                  0.0483 # writeback rate (i.e., wrbks/ref)
dl1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
ul2.accesses                  23447 # total number of accesses
ul2.hits                      17986 # total number of hits
ul2.misses                     5461 # total number of misses
ul2.replacements               1417 # total number of replacements
ul2.writebacks                  946 # total number of writebacks
ul2.invalidations                 0 # total number of invalidations
ul2.miss_rate                0.2329 # miss rate (i.e., misses/ref)
ul2.repl_rate                0.0604 # replacement rate (i.e., repls/ref)
ul2.wb_rate                  0.0403 # writeback rate (i.e., wrbks/ref)
ul2.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
itlb.accesses                859362 # total number of accesses
itlb.hits                    859312 # total number of hits
itlb.misses                      50 # total number of misses
itlb.replacements                 9 # total number of replacements
itlb.writebacks                   0 # total number of writebacks
itlb.invalidations                0 # total number of invalidations
itlb.miss_rate               0.0001 # miss rate (i.e., misses/ref)
itlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
itlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
itlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
dtlb.accesses                205318 # total number of accesses
dtlb.hits                    205207 # total number of hits
dtlb.misses                     111 # total number of misses
dtlb.replacements                 6 # total number of replacements
dtlb.writebacks                   0 # total number of writebacks
dtlb.invalidations                0 # total number of invalidations
dtlb.miss_rate               0.0005 # miss rate (i.e., misses/ref)
dtlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
dtlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
dtlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
rename_power            156517.6257 # total power usage of rename unit
bpred_power            1693797.7572 # total power usage of bpred unit
window_power           2400678.8989 # total power usage of instruction window
lsq_power               360724.6993 # total power usage of load/store queue
regfile_power          3518157.8252 # total power usage of arch. regfile
icache_power            927590.6301 # total power usage of icache
dcache_power           2278721.0232 # total power usage of dcache
dcache2_power          1576201.0165 # total power usage of dcache2
alu_power              7092996.6586 # total power usage of alu
falu_power             5347894.3061 # total power usage of falu
resultbus_power        1974625.1174 # total power usage of resultbus
clock_power            12432429.6723 # total power usage of clock
avg_rename_power             0.4180 # avg power usage of rename unit
avg_bpred_power              4.5231 # avg power usage of bpred unit
avg_window_power             6.4108 # avg power usage of instruction window
avg_lsq_power                0.9633 # avg power usage of lsq
avg_regfile_power            9.3949 # avg power usage of arch. regfile
avg_icache_power             2.4770 # avg power usage of icache
avg_dcache_power             6.0851 # avg power usage of dcache
avg_dcache2_power            4.2091 # avg power usage of dcache2
avg_alu_power               18.9412 # avg power usage of alu
avg_falu_power              14.2810 # avg power usage of falu
avg_resultbus_power          5.2730 # avg power usage of resultbus
avg_clock_power             33.1996 # avg power usage of clock
fetch_stage_power      2621388.3873 # total power usage of fetch stage
dispatch_stage_power    156517.6257 # total power usage of dispatch stage
issue_stage_power      15683947.4139 # total power usage of issue stage
avg_fetch_power              7.0002 # average power of fetch unit per cycle
avg_dispatch_power           0.4180 # average power of dispatch unit per cycle
avg_issue_power             41.8825 # average power of issue unit per cycle
total_power            34412440.9243 # total power per cycle
avg_total_power_cycle       91.8952 # average total power per cycle
avg_total_power_cycle_nofp_nod2      73.4050 # average total power per cycle
avg_total_power_insn        42.3177 # average total power per insn
avg_total_power_insn_nofp_nod2      33.8030 # average total power per insn
rename_power_cc1        111624.3707 # total power usage of rename unit_cc1
bpred_power_cc1         501155.6200 # total power usage of bpred unit_cc1
window_power_cc1       1733279.8815 # total power usage of instruction window_cc1
lsq_power_cc1            73708.1314 # total power usage of lsq_cc1
regfile_power_cc1      2369925.2638 # total power usage of arch. regfile_cc1
icache_power_cc1        695838.4988 # total power usage of icache_cc1
dcache_power_cc1        903769.4491 # total power usage of dcache_cc1
dcache2_power_cc1        56414.5062 # total power usage of dcache2_cc1
alu_power_cc1          1284611.4112 # total power usage of alu_cc1
resultbus_power_cc1    1176713.0378 # total power usage of resultbus_cc1
clock_power_cc1        5113509.0730 # total power usage of clock_cc1
avg_rename_power_cc1         0.2981 # avg power usage of rename unit_cc1
avg_bpred_power_cc1          1.3383 # avg power usage of bpred unit_cc1
avg_window_power_cc1         4.6286 # avg power usage of instruction window_cc1
avg_lsq_power_cc1            0.1968 # avg power usage of lsq_cc1
avg_regfile_power_cc1        6.3287 # avg power usage of arch. regfile_cc1
avg_icache_power_cc1         1.8582 # avg power usage of icache_cc1
avg_dcache_power_cc1         2.4134 # avg power usage of dcache_cc1
avg_dcache2_power_cc1        0.1506 # avg power usage of dcache2_cc1
avg_alu_power_cc1            3.4304 # avg power usage of alu_cc1
avg_resultbus_power_cc1       3.1423 # avg power usage of resultbus_cc1
avg_clock_power_cc1         13.6551 # avg power usage of clock_cc1
fetch_stage_power_cc1  1196994.1188 # total power usage of fetch stage_cc1
dispatch_stage_power_cc1  111624.3707 # total power usage of dispatch stage_cc1
issue_stage_power_cc1  5228496.4171 # total power usage of issue stage_cc1
avg_fetch_power_cc1          3.1965 # average power of fetch unit per cycle_cc1
avg_dispatch_power_cc1       0.2981 # average power of dispatch unit per cycle_cc1
avg_issue_power_cc1         13.9622 # average power of issue unit per cycle_cc1
total_power_cycle_cc1  14020549.2435 # total power per cycle_cc1
avg_total_power_cycle_cc1      37.4405 # average total power per cycle_cc1
avg_total_power_insn_cc1      17.2414 # average total power per insn_cc1
rename_power_cc2         84971.5475 # total power usage of rename unit_cc2
bpred_power_cc2         281440.2322 # total power usage of bpred unit_cc2
window_power_cc2        859751.7088 # total power usage of instruction window_cc2
lsq_power_cc2            49650.8461 # total power usage of lsq_cc2
regfile_power_cc2       803899.8620 # total power usage of arch. regfile_cc2
icache_power_cc2        695838.4988 # total power usage of icache_cc2
dcache_power_cc2        624180.0092 # total power usage of dcache_cc2
dcache2_power_cc2        49345.3304 # total power usage of dcache2_cc2
alu_power_cc2           893045.3777 # total power usage of alu_cc2
resultbus_power_cc2     407938.7443 # total power usage of resultbus_cc2
clock_power_cc2        2601090.1948 # total power usage of clock_cc2
avg_rename_power_cc2         0.2269 # avg power usage of rename unit_cc2
avg_bpred_power_cc2          0.7516 # avg power usage of bpred unit_cc2
avg_window_power_cc2         2.2959 # avg power usage of instruction window_cc2
avg_lsq_power_cc2            0.1326 # avg power usage of instruction lsq_cc2
avg_regfile_power_cc2        2.1467 # avg power usage of arch. regfile_cc2
avg_icache_power_cc2         1.8582 # avg power usage of icache_cc2
avg_dcache_power_cc2         1.6668 # avg power usage of dcache_cc2
avg_dcache2_power_cc2        0.1318 # avg power usage of dcache2_cc2
avg_alu_power_cc2            2.3848 # avg power usage of alu_cc2
avg_resultbus_power_cc2       1.0894 # avg power usage of resultbus_cc2
avg_clock_power_cc2          6.9460 # avg power usage of clock_cc2
fetch_stage_power_cc2   977278.7310 # total power usage of fetch stage_cc2
dispatch_stage_power_cc2   84971.5475 # total power usage of dispatch stage_cc2
issue_stage_power_cc2  2883912.0165 # total power usage of issue stage_cc2
avg_fetch_power_cc2          2.6097 # average power of fetch unit per cycle_cc2
avg_dispatch_power_cc2       0.2269 # average power of dispatch unit per cycle_cc2
avg_issue_power_cc2          7.7012 # average power of issue unit per cycle_cc2
total_power_cycle_cc2  7351152.3519 # total power per cycle_cc2
avg_total_power_cycle_cc2      19.6306 # average total power per cycle_cc2
avg_total_power_insn_cc2       9.0399 # average total power per insn_cc2
rename_power_cc3         89460.8730 # total power usage of rename unit_cc3
bpred_power_cc3         400731.3585 # total power usage of bpred unit_cc3
window_power_cc3        905548.2476 # total power usage of instruction window_cc3
lsq_power_cc3            78261.3171 # total power usage of lsq_cc3
regfile_power_cc3       886220.8562 # total power usage of arch. regfile_cc3
icache_power_cc3        719013.7120 # total power usage of icache_cc3
dcache_power_cc3        763675.6461 # total power usage of dcache_cc3
dcache2_power_cc3       201634.1918 # total power usage of dcache2_cc3
alu_power_cc3          1473883.9025 # total power usage of alu_cc3
resultbus_power_cc3     465052.7226 # total power usage of resultbus_cc3
clock_power_cc3        3290906.9620 # total power usage of clock_cc3
avg_rename_power_cc3         0.2389 # avg power usage of rename unit_cc3
avg_bpred_power_cc3          1.0701 # avg power usage of bpred unit_cc3
avg_window_power_cc3         2.4182 # avg power usage of instruction window_cc3
avg_lsq_power_cc3            0.2090 # avg power usage of instruction lsq_cc3
avg_regfile_power_cc3        2.3666 # avg power usage of arch. regfile_cc3
avg_icache_power_cc3         1.9201 # avg power usage of icache_cc3
avg_dcache_power_cc3         2.0393 # avg power usage of dcache_cc3
avg_dcache2_power_cc3        0.5384 # avg power usage of dcache2_cc3
avg_alu_power_cc3            3.9359 # avg power usage of alu_cc3
avg_resultbus_power_cc3       1.2419 # avg power usage of resultbus_cc3
avg_clock_power_cc3          8.7881 # avg power usage of clock_cc3
fetch_stage_power_cc3  1119745.0705 # total power usage of fetch stage_cc3
dispatch_stage_power_cc3   89460.8730 # total power usage of dispatch stage_cc3
issue_stage_power_cc3  3888056.0277 # total power usage of issue stage_cc3
avg_fetch_power_cc3          2.9902 # average power of fetch unit per cycle_cc3
avg_dispatch_power_cc3       0.2389 # average power of dispatch unit per cycle_cc3
avg_issue_power_cc3         10.3827 # average power of issue unit per cycle_cc3
total_power_cycle_cc3  9274389.7893 # total power per cycle_cc3
avg_total_power_cycle_cc3      24.7664 # average total power per cycle_cc3
avg_total_power_insn_cc3      11.4049 # average total power per insn_cc3
total_rename_access          813192 # total number accesses of rename unit
total_bpred_access           124445 # total number accesses of bpred unit
total_window_access         2825672 # total number accesses of instruction window
total_lsq_access             208399 # total number accesses of load/store queue
total_regfile_access        1168441 # total number accesses of arch. regfile
total_icache_access          859925 # total number accesses of icache
total_dcache_access          205150 # total number accesses of dcache
total_dcache2_access          23447 # total number accesses of dcache2
total_alu_access             760682 # total number accesses of alu
total_resultbus_access       738348 # total number accesses of resultbus
avg_rename_access            2.1716 # avg number accesses of rename unit
avg_bpred_access             0.3323 # avg number accesses of bpred unit
avg_window_access            7.5457 # avg number accesses of instruction window
avg_lsq_access               0.5565 # avg number accesses of lsq
avg_regfile_access           3.1202 # avg number accesses of arch. regfile
avg_icache_access            2.2963 # avg number accesses of icache
avg_dcache_access            0.5478 # avg number accesses of dcache
avg_dcache2_access           0.0626 # avg number accesses of dcache2
avg_alu_access               2.0313 # avg number accesses of alu
avg_resultbus_access         1.9717 # avg number accesses of resultbus
max_rename_access                 4 # max number accesses of rename unit
max_bpred_access                  3 # max number accesses of bpred unit
max_window_access                18 # max number accesses of instruction window
max_lsq_access                    4 # max number accesses of load/store queue
max_regfile_access               11 # max number accesses of arch. regfile
max_icache_access                 4 # max number accesses of icache
max_dcache_access                 4 # max number accesses of dcache
max_dcache2_access                6 # max number accesses of dcache2
max_alu_access                    5 # max number accesses of alu
max_resultbus_access              7 # max number accesses of resultbus
max_cycle_power_cc1         67.5814 # maximum cycle power usage of cc1
max_cycle_power_cc2         41.0642 # maximum cycle power usage of cc2
max_cycle_power_cc3         44.6846 # maximum cycle power usage of cc3
sim_invalid_addrs                 2 # total non-speculative bogus addresses seen (debug var)
ld_text_base           0x0120000000 # program text (code) segment base
ld_text_size                 376832 # program text (code) size in bytes
ld_data_base           0x0140000000 # program initialized data segment base
ld_data_size                 612032 # program init'ed `.data' and uninit'ed `.bss' size in bytes
ld_stack_base          0x011ff9b000 # program stack segment base (highest address in stack)
ld_stack_size                 16384 # program initial stack size
ld_prog_entry          0x0120007bb0 # program entry point (initial PC)
ld_environ_base        0x011ff97000 # program environment base address address
ld_target_big_endian              0 # target executable endian-ness, non-zero if big endian
mem.page_count                  111 # total number of pages allocated
mem.page_mem                   888k # total size of memory pages allocated
mem.ptab_misses                1718 # total first level page table misses
mem.ptab_accesses           4565729 # total page table accesses
mem.ptab_miss_rate           0.0004 # first level page table miss rate

