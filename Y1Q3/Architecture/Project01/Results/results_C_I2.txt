sim-outorder: SimpleScalar/Alpha Tool Set version 3.0 of August, 2003.
Copyright (c) 1994-2003 by Todd M. Austin, Ph.D. and SimpleScalar, LLC.
All Rights Reserved. This version of SimpleScalar is licensed for academic
non-commercial use.  No portion of this work may be used by any commercial
entity, or for any commercial purpose, without the prior written permission
of SimpleScalar, LLC (info@simplescalar.com).


Processor Parameters:
Issue Width: 2
Window Size: 16
Number of Virtual Registers: 32
Number of Physical Registers: 16
Datapath Width: 64
Total Power Consumption: 65.8065
Branch Predictor Power Consumption: 4.52313  (7.09%)
 branch target buffer power (W): 4.16837
 local predict power (W): 0.0879711
 global predict power (W): 0.0996078
 chooser power (W): 0.0702439
 RAS power (W): 0.0969383
Rename Logic Power Consumption: 0.417965  (0.655%)
 Instruction Decode Power (W): 0.0159915
 RAT decode_power (W): 0.113514
 RAT wordline_power (W): 0.0307815
 RAT bitline_power (W): 0.246771
 DCL Comparators (W): 0.0109075
Instruction Window Power Consumption: 0.849701  (1.33%)
 tagdrive (W): 0.0428745
 tagmatch (W): 0.0160167
 Selection Logic (W): 0.00671084
 decode_power (W): 0.0266252
 wordline_power (W): 0.0272771
 bitline_power (W): 0.730197
Load/Store Queue Power Consumption: 0.96318  (1.51%)
 tagdrive (W): 0.457232
 tagmatch (W): 0.100774
 decode_power (W): 0.00799577
 wordline_power (W): 0.0150119
 bitline_power (W): 0.382166
Arch. Register File Power Consumption: 1.30831  (2.05%)
 decode_power (W): 0.0567572
 wordline_power (W): 0.0272771
 bitline_power (W): 1.22428
Result Bus Power Consumption: 1.06403  (1.67%)
Total Clock Power: 22.9681  (36%)
Int ALU Power: 4.66013  (7.3%)
FP ALU Power: 14.281  (22.4%)
Instruction Cache Power Consumption: 2.21363  (3.47%)
 decode_power (W): 0.779481
 wordline_power (W): 0.028656
 bitline_power (W): 0.886372
 senseamp_power (W): 0.096
 tagarray_power (W): 0.423116
Itlb_power (W): 0.263317 (0.413%)
Data Cache Power Consumption: 5.18303  (8.12%)
 decode_power (W): 0.651055
 wordline_power (W): 0.196735
 bitline_power (W): 2.71235
 senseamp_power (W): 0.768
 tagarray_power (W): 0.854886
Dtlb_power (W): 0.901877 (1.41%)
Level 2 Cache Power Consumption: 4.2091 (6.6%)
 decode_power (W): 0.41817
 wordline_power (W): 0.0430878
 bitline_power (W): 3.0244
 senseamp_power (W): 0.192
 tagarray_power (W): 0.531433
warning: section `.comment' ignored...
sim: command line: ./sim-outorder -issue:width 2 ../benchmarks/compress95.alpha ../benchmarks/1stmt.i 

sim: simulation started @ Fri Apr 15 16:55:36 2016, options follow:

sim-outorder: This simulator implements a very detailed out-of-order issue
superscalar processor with a two-level memory system and speculative
execution support.  This simulator is a performance simulator, tracking the
latency of all pipeline operations.

# -config                     # load configuration from a file
# -dumpconfig                 # dump configuration to a file
# -h                    false # print help message    
# -v                    false # verbose operation     
# -d                    false # enable debug message  
# -i                    false # start in Dlite debugger
-seed                       1 # random number generator seed (0 for timer seed)
# -q                    false # initialize and terminate immediately
# -chkpt               <null> # restore EIO trace execution from <fname>
# -redir:sim           <null> # redirect simulator output to file (non-interactive only)
# -redir:prog          <null> # redirect simulated program output to file
-nice                       0 # simulator scheduling priority
-max:inst                   0 # maximum number of inst's to execute
-fastfwd                    0 # number of insts skipped before timing starts
# -ptrace              <null> # generate pipetrace, i.e., <fname|stdout|stderr> <range>
-fetch:ifqsize              4 # instruction fetch queue size (in insts)
-fetch:mplat                3 # extra branch mis-prediction latency
-fetch:speed                1 # speed of front-end of machine relative to execution core
-bpred                  bimod # branch predictor type {nottaken|taken|perfect|bimod|2lev|comb}
-bpred:bimod     2048 # bimodal predictor config (<table size>)
-bpred:2lev      1 1024 8 0 # 2-level predictor config (<l1size> <l2size> <hist_size> <xor>)
-bpred:comb      1024 # combining predictor config (<meta_table_size>)
-bpred:ras                  8 # return address stack size (0 for no return stack)
-bpred:btb       512 4 # BTB config (<num_sets> <associativity>)
# -bpred:spec_update       <null> # speculative predictors update in {ID|WB} (default non-spec)
-decode:width               4 # instruction decode B/W (insts/cycle)
-issue:width                2 # instruction issue B/W (insts/cycle)
-issue:inorder          false # run pipeline with in-order issue
-issue:wrongpath         true # issue instructions down wrong execution paths
-commit:width               4 # instruction commit B/W (insts/cycle)
-ruu:size                  16 # register update unit (RUU) size
-lsq:size                   8 # load/store queue (LSQ) size
-cache:dl1       dl1:128:32:4:l # l1 data cache config, i.e., {<config>|none}
-cache:dl1lat               1 # l1 data cache hit latency (in cycles)
-cache:dl2       ul2:1024:64:4:l # l2 data cache config, i.e., {<config>|none}
-cache:dl2lat               6 # l2 data cache hit latency (in cycles)
-cache:il1       il1:512:32:1:l # l1 inst cache config, i.e., {<config>|dl1|dl2|none}
-cache:il1lat               1 # l1 instruction cache hit latency (in cycles)
-cache:il2                dl2 # l2 instruction cache config, i.e., {<config>|dl2|none}
-cache:il2lat               6 # l2 instruction cache hit latency (in cycles)
-cache:flush            false # flush caches on system calls
-cache:icompress        false # convert 64-bit inst addresses to 32-bit inst equivalents
-mem:lat         18 2 # memory access latency (<first_chunk> <inter_chunk>)
-mem:width                  8 # memory access bus width (in bytes)
-tlb:itlb        itlb:16:4096:4:l # instruction TLB config, i.e., {<config>|none}
-tlb:dtlb        dtlb:32:4096:4:l # data TLB config, i.e., {<config>|none}
-tlb:lat                   30 # inst/data TLB miss latency (in cycles)
-res:ialu                   4 # total number of integer ALU's available
-res:imult                  1 # total number of integer multiplier/dividers available
-res:memport                2 # total number of memory system ports available (to CPU)
-res:fpalu                  4 # total number of floating point ALU's available
-res:fpmult                 1 # total number of floating point multiplier/dividers available
# -pcstat              <null> # profile stat(s) against text addr's (mult uses ok)
-bugcompat              false # operate in backward-compatible bugs mode (for testing only)

  Pipetrace range arguments are formatted as follows:

    {{@|#}<start>}:{{@|#|+}<end>}

  Both ends of the range are optional, if neither are specified, the entire
  execution is traced.  Ranges that start with a `@' designate an address
  range to be traced, those that start with an `#' designate a cycle count
  range.  All other range values represent an instruction count range.  The
  second argument, if specified with a `+', indicates a value relative
  to the first argument, e.g., 1000:+100 == 1000:1100.  Program symbols may
  be used in all contexts.

    Examples:   -ptrace FOO.trc #0:#1000
                -ptrace BAR.trc @2000:
                -ptrace BLAH.trc :1500
                -ptrace UXXE.trc :
                -ptrace FOOBAR.trc @main:+278

  Branch predictor configuration examples for 2-level predictor:
    Configurations:   N, M, W, X
      N   # entries in first level (# of shift register(s))
      W   width of shift register(s)
      M   # entries in 2nd level (# of counters, or other FSM)
      X   (yes-1/no-0) xor history and address for 2nd level index
    Sample predictors:
      GAg     : 1, W, 2^W, 0
      GAp     : 1, W, M (M > 2^W), 0
      PAg     : N, W, 2^W, 0
      PAp     : N, W, M (M == 2^(N+W)), 0
      gshare  : 1, W, 2^W, 1
  Predictor `comb' combines a bimodal and a 2-level predictor.

  The cache config parameter <config> has the following format:

    <name>:<nsets>:<bsize>:<assoc>:<repl>

    <name>   - name of the cache being defined
    <nsets>  - number of sets in the cache
    <bsize>  - block size of the cache
    <assoc>  - associativity of the cache
    <repl>   - block replacement strategy, 'l'-LRU, 'f'-FIFO, 'r'-random

    Examples:   -cache:dl1 dl1:4096:32:1:l
                -dtlb dtlb:128:4096:32:r

  Cache levels can be unified by pointing a level of the instruction cache
  hierarchy at the data cache hiearchy using the "dl1" and "dl2" cache
  configuration arguments.  Most sensible combinations are supported, e.g.,

    A unified l2 cache (il2 is pointed at dl2):
      -cache:il1 il1:128:64:1:l -cache:il2 dl2
      -cache:dl1 dl1:256:32:1:l -cache:dl2 ul2:1024:64:2:l

    Or, a fully unified cache hierarchy (il1 pointed at dl1):
      -cache:il1 dl1
      -cache:dl1 ul1:256:32:1:l -cache:dl2 ul2:1024:64:2:l



sim: ** starting performance simulation **
warning: partially supported sigaction() call...
../benchmarks/1stmt.i: No such file or directory

sim: ** simulation statistics **
sim_num_insn                   9325 # total number of instructions committed
sim_num_refs                   2209 # total number of loads and stores committed
sim_num_loads                  1317 # total number of loads committed
sim_num_stores             892.0000 # total number of stores committed
sim_num_branches               1893 # total number of branches committed
sim_elapsed_time                  1 # total simulation time in seconds
sim_inst_rate             9325.0000 # simulation speed (in insts/sec)
sim_total_insn                11695 # total number of instructions executed
sim_total_refs                 2555 # total number of loads and stores executed
sim_total_loads                1552 # total number of loads executed
sim_total_stores          1003.0000 # total number of stores executed
sim_total_branches             2191 # total number of branches executed
sim_cycle                     15363 # total simulation time in cycles
sim_IPC                      0.6070 # instructions per cycle
sim_CPI                      1.6475 # cycles per instruction
sim_exec_BW                  0.7612 # total instructions (mis-spec + committed) per cycle
sim_IPB                      4.9260 # instruction per branch
IFQ_count                     27814 # cumulative IFQ occupancy
IFQ_fcount                     6323 # cumulative IFQ full count
ifq_occupancy                1.8105 # avg IFQ occupancy (insn's)
ifq_rate                     0.7612 # avg IFQ dispatch rate (insn/cycle)
ifq_latency                  2.3783 # avg IFQ occupant latency (cycle's)
ifq_full                     0.4116 # fraction of time (cycle's) IFQ was full
RUU_count                    110720 # cumulative RUU occupancy
RUU_fcount                     5093 # cumulative RUU full count
ruu_occupancy                7.2069 # avg RUU occupancy (insn's)
ruu_rate                     0.7612 # avg RUU dispatch rate (insn/cycle)
ruu_latency                  9.4673 # avg RUU occupant latency (cycle's)
ruu_full                     0.3315 # fraction of time (cycle's) RUU was full
LSQ_count                     24752 # cumulative LSQ occupancy
LSQ_fcount                      243 # cumulative LSQ full count
lsq_occupancy                1.6111 # avg LSQ occupancy (insn's)
lsq_rate                     0.7612 # avg LSQ dispatch rate (insn/cycle)
lsq_latency                  2.1165 # avg LSQ occupant latency (cycle's)
lsq_full                     0.0158 # fraction of time (cycle's) LSQ was full
sim_slip                     132916 # total number of slip cycles
avg_sim_slip                14.2537 # the average slip between issue and retirement
bpred_bimod.lookups            2305 # total number of bpred lookups
bpred_bimod.updates            1893 # total number of updates
bpred_bimod.addr_hits          1440 # total number of address-predicted hits
bpred_bimod.dir_hits           1663 # total number of direction-predicted hits (includes addr-hits)
bpred_bimod.misses              230 # total number of misses
bpred_bimod.jr_hits             152 # total number of address-predicted hits for JR's
bpred_bimod.jr_seen             310 # total number of JR's seen
bpred_bimod.jr_non_ras_hits.PP           34 # total number of address-predicted hits for non-RAS JR's
bpred_bimod.jr_non_ras_seen.PP          115 # total number of non-RAS JR's seen
bpred_bimod.bpred_addr_rate    0.7607 # branch address-prediction rate (i.e., addr-hits/updates)
bpred_bimod.bpred_dir_rate    0.8785 # branch direction-prediction rate (i.e., all-hits/updates)
bpred_bimod.bpred_jr_rate    0.4903 # JR address-prediction rate (i.e., JR addr-hits/JRs seen)
bpred_bimod.bpred_jr_non_ras_rate.PP    0.2957 # non-RAS JR addr-pred rate (ie, non-RAS JR hits/JRs seen)
bpred_bimod.retstack_pushes          224 # total number of address pushed onto ret-addr stack
bpred_bimod.retstack_pops          231 # total number of address popped off of ret-addr stack
bpred_bimod.used_ras.PP          195 # total number of RAS predictions used
bpred_bimod.ras_hits.PP          118 # total number of RAS hits
bpred_bimod.ras_rate.PP    0.6051 # RAS prediction rate (i.e., RAS hits/used RAS)
il1.accesses                  11729 # total number of accesses
il1.hits                      11392 # total number of hits
il1.misses                      337 # total number of misses
il1.replacements                 83 # total number of replacements
il1.writebacks                    0 # total number of writebacks
il1.invalidations                 0 # total number of invalidations
il1.miss_rate                0.0287 # miss rate (i.e., misses/ref)
il1.repl_rate                0.0071 # replacement rate (i.e., repls/ref)
il1.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
il1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
dl1.accesses                   2249 # total number of accesses
dl1.hits                       1695 # total number of hits
dl1.misses                      554 # total number of misses
dl1.replacements                 99 # total number of replacements
dl1.writebacks                   82 # total number of writebacks
dl1.invalidations                 0 # total number of invalidations
dl1.miss_rate                0.2463 # miss rate (i.e., misses/ref)
dl1.repl_rate                0.0440 # replacement rate (i.e., repls/ref)
dl1.wb_rate                  0.0365 # writeback rate (i.e., wrbks/ref)
dl1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
ul2.accesses                    973 # total number of accesses
ul2.hits                        447 # total number of hits
ul2.misses                      526 # total number of misses
ul2.replacements                  0 # total number of replacements
ul2.writebacks                    0 # total number of writebacks
ul2.invalidations                 0 # total number of invalidations
ul2.miss_rate                0.5406 # miss rate (i.e., misses/ref)
ul2.repl_rate                0.0000 # replacement rate (i.e., repls/ref)
ul2.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
ul2.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
itlb.accesses                 11729 # total number of accesses
itlb.hits                     11718 # total number of hits
itlb.misses                      11 # total number of misses
itlb.replacements                 0 # total number of replacements
itlb.writebacks                   0 # total number of writebacks
itlb.invalidations                0 # total number of invalidations
itlb.miss_rate               0.0009 # miss rate (i.e., misses/ref)
itlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
itlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
itlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
dtlb.accesses                  2249 # total number of accesses
dtlb.hits                      2232 # total number of hits
dtlb.misses                      17 # total number of misses
dtlb.replacements                 0 # total number of replacements
dtlb.writebacks                   0 # total number of writebacks
dtlb.invalidations                0 # total number of invalidations
dtlb.miss_rate               0.0076 # miss rate (i.e., misses/ref)
dtlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
dtlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
dtlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
rename_power              6421.2038 # total power usage of rename unit
bpred_power              69488.7908 # total power usage of bpred unit
window_power             13053.9601 # total power usage of instruction window
lsq_power                14797.3341 # total power usage of load/store queue
regfile_power            20099.5820 # total power usage of arch. regfile
icache_power             38053.2559 # total power usage of icache
dcache_power             93482.4151 # total power usage of dcache
dcache2_power            64664.3333 # total power usage of dcache2
alu_power               290993.2777 # total power usage of alu
falu_power              219399.6935 # total power usage of falu
resultbus_power          16346.6316 # total power usage of resultbus
clock_power             352858.3805 # total power usage of clock
avg_rename_power             0.4180 # avg power usage of rename unit
avg_bpred_power              4.5231 # avg power usage of bpred unit
avg_window_power             0.8497 # avg power usage of instruction window
avg_lsq_power                0.9632 # avg power usage of lsq
avg_regfile_power            1.3083 # avg power usage of arch. regfile
avg_icache_power             2.4769 # avg power usage of icache
avg_dcache_power             6.0849 # avg power usage of dcache
avg_dcache2_power            4.2091 # avg power usage of dcache2
avg_alu_power               18.9412 # avg power usage of alu
avg_falu_power              14.2810 # avg power usage of falu
avg_resultbus_power          1.0640 # avg power usage of resultbus
avg_clock_power             22.9681 # avg power usage of clock
fetch_stage_power       107542.0467 # total power usage of fetch stage
dispatch_stage_power      6421.2038 # total power usage of dispatch stage
issue_stage_power       493337.9519 # total power usage of issue stage
avg_fetch_power              7.0001 # average power of fetch unit per cycle
avg_dispatch_power           0.4180 # average power of dispatch unit per cycle
avg_issue_power             32.1121 # average power of issue unit per cycle
total_power             980259.1649 # total power per cycle
avg_total_power_cycle       63.8065 # average total power per cycle
avg_total_power_cycle_nofp_nod2      45.3164 # average total power per cycle
avg_total_power_insn        83.8187 # average total power per insn
avg_total_power_insn_nofp_nod2      59.5293 # average total power per insn
rename_power_cc1          2075.1986 # total power usage of rename unit_cc1
bpred_power_cc1           7390.7885 # total power usage of bpred unit_cc1
window_power_cc1          6382.6629 # total power usage of instruction window_cc1
lsq_power_cc1              988.7654 # total power usage of lsq_cc1
regfile_power_cc1         6428.5116 # total power usage of arch. regfile_cc1
icache_power_cc1         13779.2269 # total power usage of icache_cc1
dcache_power_cc1         12166.7701 # total power usage of dcache_cc1
dcache2_power_cc1         3710.3176 # total power usage of dcache2_cc1
alu_power_cc1            28044.6651 # total power usage of alu_cc1
resultbus_power_cc1       5558.5467 # total power usage of resultbus_cc1
clock_power_cc1          47999.0620 # total power usage of clock_cc1
avg_rename_power_cc1         0.1351 # avg power usage of rename unit_cc1
avg_bpred_power_cc1          0.4811 # avg power usage of bpred unit_cc1
avg_window_power_cc1         0.4155 # avg power usage of instruction window_cc1
avg_lsq_power_cc1            0.0644 # avg power usage of lsq_cc1
avg_regfile_power_cc1        0.4184 # avg power usage of arch. regfile_cc1
avg_icache_power_cc1         0.8969 # avg power usage of icache_cc1
avg_dcache_power_cc1         0.7920 # avg power usage of dcache_cc1
avg_dcache2_power_cc1        0.2415 # avg power usage of dcache2_cc1
avg_alu_power_cc1            1.8255 # avg power usage of alu_cc1
avg_resultbus_power_cc1       0.3618 # avg power usage of resultbus_cc1
avg_clock_power_cc1          3.1243 # avg power usage of clock_cc1
fetch_stage_power_cc1    21170.0154 # total power usage of fetch stage_cc1
dispatch_stage_power_cc1    2075.1986 # total power usage of dispatch stage_cc1
issue_stage_power_cc1    56851.7277 # total power usage of issue stage_cc1
avg_fetch_power_cc1          1.3780 # average power of fetch unit per cycle_cc1
avg_dispatch_power_cc1       0.1351 # average power of dispatch unit per cycle_cc1
avg_issue_power_cc1          3.7006 # average power of issue unit per cycle_cc1
total_power_cycle_cc1   134524.5154 # total power per cycle_cc1
avg_total_power_cycle_cc1       8.7564 # average total power per cycle_cc1
avg_total_power_insn_cc1      11.5027 # average total power per insn_cc1
rename_power_cc2          1222.0266 # total power usage of rename unit_cc2
bpred_power_cc2           4281.1391 # total power usage of bpred unit_cc2
window_power_cc2          5504.6320 # total power usage of instruction window_cc2
lsq_power_cc2              534.9579 # total power usage of lsq_cc2
regfile_power_cc2         1096.8558 # total power usage of arch. regfile_cc2
icache_power_cc2         13779.2269 # total power usage of icache_cc2
dcache_power_cc2          6842.4771 # total power usage of dcache_cc2
dcache2_power_cc2         2047.7249 # total power usage of dcache2_cc2
alu_power_cc2            11412.6595 # total power usage of alu_cc2
resultbus_power_cc2       4182.1792 # total power usage of resultbus_cc2
clock_power_cc2          27883.7308 # total power usage of clock_cc2
avg_rename_power_cc2         0.0795 # avg power usage of rename unit_cc2
avg_bpred_power_cc2          0.2787 # avg power usage of bpred unit_cc2
avg_window_power_cc2         0.3583 # avg power usage of instruction window_cc2
avg_lsq_power_cc2            0.0348 # avg power usage of instruction lsq_cc2
avg_regfile_power_cc2        0.0714 # avg power usage of arch. regfile_cc2
avg_icache_power_cc2         0.8969 # avg power usage of icache_cc2
avg_dcache_power_cc2         0.4454 # avg power usage of dcache_cc2
avg_dcache2_power_cc2        0.1333 # avg power usage of dcache2_cc2
avg_alu_power_cc2            0.7429 # avg power usage of alu_cc2
avg_resultbus_power_cc2       0.2722 # avg power usage of resultbus_cc2
avg_clock_power_cc2          1.8150 # avg power usage of clock_cc2
fetch_stage_power_cc2    18060.3660 # total power usage of fetch stage_cc2
dispatch_stage_power_cc2    1222.0266 # total power usage of dispatch stage_cc2
issue_stage_power_cc2    30524.6307 # total power usage of issue stage_cc2
avg_fetch_power_cc2          1.1756 # average power of fetch unit per cycle_cc2
avg_dispatch_power_cc2       0.0795 # average power of dispatch unit per cycle_cc2
avg_issue_power_cc2          1.9869 # average power of issue unit per cycle_cc2
total_power_cycle_cc2    78787.6098 # total power per cycle_cc2
avg_total_power_cycle_cc2       5.1284 # average total power per cycle_cc2
avg_total_power_insn_cc2       6.7369 # average total power per insn_cc2
rename_power_cc3          1656.6271 # total power usage of rename unit_cc3
bpred_power_cc3          10503.1518 # total power usage of bpred unit_cc3
window_power_cc3          6180.8120 # total power usage of instruction window_cc3
lsq_power_cc3             1910.7983 # total power usage of lsq_cc3
regfile_power_cc3         2358.7217 # total power usage of arch. regfile_cc3
icache_power_cc3         16206.6298 # total power usage of icache_cc3
dcache_power_cc3         14975.5628 # total power usage of dcache_cc3
dcache2_power_cc3         8143.3370 # total power usage of dcache2_cc3
alu_power_cc3            37707.5207 # total power usage of alu_cc3
resultbus_power_cc3       5169.3825 # total power usage of resultbus_cc3
clock_power_cc3          58265.3415 # total power usage of clock_cc3
avg_rename_power_cc3         0.1078 # avg power usage of rename unit_cc3
avg_bpred_power_cc3          0.6837 # avg power usage of bpred unit_cc3
avg_window_power_cc3         0.4023 # avg power usage of instruction window_cc3
avg_lsq_power_cc3            0.1244 # avg power usage of instruction lsq_cc3
avg_regfile_power_cc3        0.1535 # avg power usage of arch. regfile_cc3
avg_icache_power_cc3         1.0549 # avg power usage of icache_cc3
avg_dcache_power_cc3         0.9748 # avg power usage of dcache_cc3
avg_dcache2_power_cc3        0.5301 # avg power usage of dcache2_cc3
avg_alu_power_cc3            2.4544 # avg power usage of alu_cc3
avg_resultbus_power_cc3       0.3365 # avg power usage of resultbus_cc3
avg_clock_power_cc3          3.7926 # avg power usage of clock_cc3
fetch_stage_power_cc3    26709.7816 # total power usage of fetch stage_cc3
dispatch_stage_power_cc3    1656.6271 # total power usage of dispatch stage_cc3
issue_stage_power_cc3    74087.4133 # total power usage of issue stage_cc3
avg_fetch_power_cc3          1.7386 # average power of fetch unit per cycle_cc3
avg_dispatch_power_cc3       0.1078 # average power of dispatch unit per cycle_cc3
avg_issue_power_cc3          4.8225 # average power of issue unit per cycle_cc3
total_power_cycle_cc3   163077.8853 # total power per cycle_cc3
avg_total_power_cycle_cc3      10.6150 # average total power per cycle_cc3
avg_total_power_insn_cc3      13.9442 # average total power per insn_cc3
total_rename_access           11695 # total number accesses of rename unit
total_bpred_access             1893 # total number accesses of bpred unit
total_window_access           34818 # total number accesses of instruction window
total_lsq_access               2255 # total number accesses of load/store queue
total_regfile_access          11753 # total number accesses of arch. regfile
total_icache_access           12893 # total number accesses of icache
total_dcache_access            2249 # total number accesses of dcache
total_dcache2_access            973 # total number accesses of dcache2
total_alu_access               9796 # total number accesses of alu
total_resultbus_access         9195 # total number accesses of resultbus
avg_rename_access            0.7612 # avg number accesses of rename unit
avg_bpred_access             0.1232 # avg number accesses of bpred unit
avg_window_access            2.2664 # avg number accesses of instruction window
avg_lsq_access               0.1468 # avg number accesses of lsq
avg_regfile_access           0.7650 # avg number accesses of arch. regfile
avg_icache_access            0.8392 # avg number accesses of icache
avg_dcache_access            0.1464 # avg number accesses of dcache
avg_dcache2_access           0.0633 # avg number accesses of dcache2
avg_alu_access               0.6376 # avg number accesses of alu
avg_resultbus_access         0.5985 # avg number accesses of resultbus
max_rename_access                 4 # max number accesses of rename unit
max_bpred_access                  3 # max number accesses of bpred unit
max_window_access                13 # max number accesses of instruction window
max_lsq_access                    2 # max number accesses of load/store queue
max_regfile_access               10 # max number accesses of arch. regfile
max_icache_access                 4 # max number accesses of icache
max_dcache_access                 4 # max number accesses of dcache
max_dcache2_access                3 # max number accesses of dcache2
max_alu_access                    2 # max number accesses of alu
max_resultbus_access              6 # max number accesses of resultbus
max_cycle_power_cc1         28.0485 # maximum cycle power usage of cc1
max_cycle_power_cc2         20.5264 # maximum cycle power usage of cc2
max_cycle_power_cc3         24.9154 # maximum cycle power usage of cc3
sim_invalid_addrs                 0 # total non-speculative bogus addresses seen (debug var)
ld_text_base           0x0120000000 # program text (code) segment base
ld_text_size                  65536 # program text (code) size in bytes
ld_data_base           0x0140000000 # program initialized data segment base
ld_data_size                 743728 # program init'ed `.data' and uninit'ed `.bss' size in bytes
ld_stack_base          0x011ff9b000 # program stack segment base (highest address in stack)
ld_stack_size                 16384 # program initial stack size
ld_prog_entry          0x0120002050 # program entry point (initial PC)
ld_environ_base        0x011ff97000 # program environment base address address
ld_target_big_endian              0 # target executable endian-ness, non-zero if big endian
mem.page_count                   18 # total number of pages allocated
mem.page_mem                   144k # total size of memory pages allocated
mem.ptab_misses                 461 # total first level page table misses
mem.ptab_accesses            225832 # total page table accesses
mem.ptab_miss_rate           0.0020 # first level page table miss rate

