sim-outorder: SimpleScalar/Alpha Tool Set version 3.0 of August, 2003.
Copyright (c) 1994-2003 by Todd M. Austin, Ph.D. and SimpleScalar, LLC.
All Rights Reserved. This version of SimpleScalar is licensed for academic
non-commercial use.  No portion of this work may be used by any commercial
entity, or for any commercial purpose, without the prior written permission
of SimpleScalar, LLC (info@simplescalar.com).


Processor Parameters:
Issue Width: 4
Window Size: 16
Number of Virtual Registers: 32
Number of Physical Registers: 16
Datapath Width: 64
Total Power Consumption: 73.7882
Branch Predictor Power Consumption: 4.52313  (6.3%)
 branch target buffer power (W): 4.16837
 local predict power (W): 0.0879711
 global predict power (W): 0.0996078
 chooser power (W): 0.0702439
 RAS power (W): 0.0969383
Rename Logic Power Consumption: 0.417965  (0.582%)
 Instruction Decode Power (W): 0.0159915
 RAT decode_power (W): 0.113514
 RAT wordline_power (W): 0.0307815
 RAT bitline_power (W): 0.246771
 DCL Comparators (W): 0.0109075
Instruction Window Power Consumption: 2.20432  (3.07%)
 tagdrive (W): 0.0943488
 tagmatch (W): 0.033695
 Selection Logic (W): 0.0134217
 decode_power (W): 0.0532503
 wordline_power (W): 0.0844643
 bitline_power (W): 1.92514
Load/Store Queue Power Consumption: 0.96318  (1.34%)
 tagdrive (W): 0.457232
 tagmatch (W): 0.100774
 decode_power (W): 0.00799577
 wordline_power (W): 0.0150119
 bitline_power (W): 0.382166
Arch. Register File Power Consumption: 3.57247  (4.98%)
 decode_power (W): 0.113514
 wordline_power (W): 0.0844643
 bitline_power (W): 3.37449
Result Bus Power Consumption: 2.29754  (3.2%)
Total Clock Power: 26.0975  (36.4%)
Int ALU Power: 4.66013  (6.49%)
FP ALU Power: 14.281  (19.9%)
Instruction Cache Power Consumption: 2.21363  (3.08%)
 decode_power (W): 0.779481
 wordline_power (W): 0.028656
 bitline_power (W): 0.886372
 senseamp_power (W): 0.096
 tagarray_power (W): 0.423116
Itlb_power (W): 0.263317 (0.367%)
Data Cache Power Consumption: 5.18303  (7.22%)
 decode_power (W): 0.651055
 wordline_power (W): 0.196735
 bitline_power (W): 2.71235
 senseamp_power (W): 0.768
 tagarray_power (W): 0.854886
Dtlb_power (W): 0.901877 (1.26%)
Level 2 Cache Power Consumption: 4.2091 (5.86%)
 decode_power (W): 0.41817
 wordline_power (W): 0.0430878
 bitline_power (W): 3.0244
 senseamp_power (W): 0.192
 tagarray_power (W): 0.531433
warning: section `.comment' ignored...
sim: command line: ./sim-outorder -bpred 2lev ../benchmarks/cc1.alpha ../benchmarks/1stmt.i 

sim: simulation started @ Thu Apr 14 17:46:43 2016, options follow:

sim-outorder: This simulator implements a very detailed out-of-order issue
superscalar processor with a two-level memory system and speculative
execution support.  This simulator is a performance simulator, tracking the
latency of all pipeline operations.

# -config                     # load configuration from a file
# -dumpconfig                 # dump configuration to a file
# -h                    false # print help message    
# -v                    false # verbose operation     
# -d                    false # enable debug message  
# -i                    false # start in Dlite debugger
-seed                       1 # random number generator seed (0 for timer seed)
# -q                    false # initialize and terminate immediately
# -chkpt               <null> # restore EIO trace execution from <fname>
# -redir:sim           <null> # redirect simulator output to file (non-interactive only)
# -redir:prog          <null> # redirect simulated program output to file
-nice                       0 # simulator scheduling priority
-max:inst                   0 # maximum number of inst's to execute
-fastfwd                    0 # number of insts skipped before timing starts
# -ptrace              <null> # generate pipetrace, i.e., <fname|stdout|stderr> <range>
-fetch:ifqsize              4 # instruction fetch queue size (in insts)
-fetch:mplat                3 # extra branch mis-prediction latency
-fetch:speed                1 # speed of front-end of machine relative to execution core
-bpred                   2lev # branch predictor type {nottaken|taken|perfect|bimod|2lev|comb}
-bpred:bimod     2048 # bimodal predictor config (<table size>)
-bpred:2lev      1 1024 8 0 # 2-level predictor config (<l1size> <l2size> <hist_size> <xor>)
-bpred:comb      1024 # combining predictor config (<meta_table_size>)
-bpred:ras                  8 # return address stack size (0 for no return stack)
-bpred:btb       512 4 # BTB config (<num_sets> <associativity>)
# -bpred:spec_update       <null> # speculative predictors update in {ID|WB} (default non-spec)
-decode:width               4 # instruction decode B/W (insts/cycle)
-issue:width                4 # instruction issue B/W (insts/cycle)
-issue:inorder          false # run pipeline with in-order issue
-issue:wrongpath         true # issue instructions down wrong execution paths
-commit:width               4 # instruction commit B/W (insts/cycle)
-ruu:size                  16 # register update unit (RUU) size
-lsq:size                   8 # load/store queue (LSQ) size
-cache:dl1       dl1:128:32:4:l # l1 data cache config, i.e., {<config>|none}
-cache:dl1lat               1 # l1 data cache hit latency (in cycles)
-cache:dl2       ul2:1024:64:4:l # l2 data cache config, i.e., {<config>|none}
-cache:dl2lat               6 # l2 data cache hit latency (in cycles)
-cache:il1       il1:512:32:1:l # l1 inst cache config, i.e., {<config>|dl1|dl2|none}
-cache:il1lat               1 # l1 instruction cache hit latency (in cycles)
-cache:il2                dl2 # l2 instruction cache config, i.e., {<config>|dl2|none}
-cache:il2lat               6 # l2 instruction cache hit latency (in cycles)
-cache:flush            false # flush caches on system calls
-cache:icompress        false # convert 64-bit inst addresses to 32-bit inst equivalents
-mem:lat         18 2 # memory access latency (<first_chunk> <inter_chunk>)
-mem:width                  8 # memory access bus width (in bytes)
-tlb:itlb        itlb:16:4096:4:l # instruction TLB config, i.e., {<config>|none}
-tlb:dtlb        dtlb:32:4096:4:l # data TLB config, i.e., {<config>|none}
-tlb:lat                   30 # inst/data TLB miss latency (in cycles)
-res:ialu                   4 # total number of integer ALU's available
-res:imult                  1 # total number of integer multiplier/dividers available
-res:memport                2 # total number of memory system ports available (to CPU)
-res:fpalu                  4 # total number of floating point ALU's available
-res:fpmult                 1 # total number of floating point multiplier/dividers available
# -pcstat              <null> # profile stat(s) against text addr's (mult uses ok)
-bugcompat              false # operate in backward-compatible bugs mode (for testing only)

  Pipetrace range arguments are formatted as follows:

    {{@|#}<start>}:{{@|#|+}<end>}

  Both ends of the range are optional, if neither are specified, the entire
  execution is traced.  Ranges that start with a `@' designate an address
  range to be traced, those that start with an `#' designate a cycle count
  range.  All other range values represent an instruction count range.  The
  second argument, if specified with a `+', indicates a value relative
  to the first argument, e.g., 1000:+100 == 1000:1100.  Program symbols may
  be used in all contexts.

    Examples:   -ptrace FOO.trc #0:#1000
                -ptrace BAR.trc @2000:
                -ptrace BLAH.trc :1500
                -ptrace UXXE.trc :
                -ptrace FOOBAR.trc @main:+278

  Branch predictor configuration examples for 2-level predictor:
    Configurations:   N, M, W, X
      N   # entries in first level (# of shift register(s))
      W   width of shift register(s)
      M   # entries in 2nd level (# of counters, or other FSM)
      X   (yes-1/no-0) xor history and address for 2nd level index
    Sample predictors:
      GAg     : 1, W, 2^W, 0
      GAp     : 1, W, M (M > 2^W), 0
      PAg     : N, W, 2^W, 0
      PAp     : N, W, M (M == 2^(N+W)), 0
      gshare  : 1, W, 2^W, 1
  Predictor `comb' combines a bimodal and a 2-level predictor.

  The cache config parameter <config> has the following format:

    <name>:<nsets>:<bsize>:<assoc>:<repl>

    <name>   - name of the cache being defined
    <nsets>  - number of sets in the cache
    <bsize>  - block size of the cache
    <assoc>  - associativity of the cache
    <repl>   - block replacement strategy, 'l'-LRU, 'f'-FIFO, 'r'-random

    Examples:   -cache:dl1 dl1:4096:32:1:l
                -dtlb dtlb:128:4096:32:r

  Cache levels can be unified by pointing a level of the instruction cache
  hierarchy at the data cache hiearchy using the "dl1" and "dl2" cache
  configuration arguments.  Most sensible combinations are supported, e.g.,

    A unified l2 cache (il2 is pointed at dl2):
      -cache:il1 il1:128:64:1:l -cache:il2 dl2
      -cache:dl1 dl1:256:32:1:l -cache:dl2 ul2:1024:64:2:l

    Or, a fully unified cache hierarchy (il1 pointed at dl1):
      -cache:il1 dl1
      -cache:dl1 ul1:256:32:1:l -cache:dl2 ul2:1024:64:2:l



sim: ** starting performance simulation **
warning: partially supported sigaction() call...
 label_rtx emit_jump expand_label expand_goto expand_goto_internal expand_fixup fixup_gotos expand_asm expand_asm_operands expand_expr_stmt clear_last_expr expand_start_stmt_expr expand_end_stmt_expr expand_start_cond expand_end_cond expand_start_else expand_end_else expand_start_loop expand_start_loop_continue_elsewhere expand_loop_continue_here expand_end_loop expand_continue_loop expand_exit_loop expand_exit_loop_if_false expand_exit_something expand_null_return expand_null_return_1 expand_return drop_through_at_end_p tail_recursion_args expand_start_bindings use_variable use_variable_after expand_end_bindings expand_decl expand_decl_init expand_anon_union_decl expand_cleanups fixup_cleanups move_cleanups_up expand_start_case expand_start_case_dummy expand_end_case_dummy pushcase pushcase_range check_for_full_enumeration_handling expand_end_case do_jump_if_equal group_case_nodes balance_case_nodes node_has_low_bound node_has_high_bound node_is_bounded emit_jump_if_reachable emit_case_nodes get_frame_size assign_stack_local put_var_into_stack fixup_var_refs fixup_var_refs_insns fixup_var_refs_1 fixup_memory_subreg walk_fixup_memory_subreg fixup_stack_1 optimize_bit_field max_parm_reg_num get_first_nonparm_insn parm_stack_loc assign_parms get_structure_value_addr uninitialized_vars_warning setjmp_protect expand_function_start expand_function_end
time in parse: 0.000000
time in integration: 0.000000
time in jump: 0.000000
time in cse: 0.000000
time in loop: 0.000000
time in cse2: 0.000000
time in flow: 0.000000
time in combine: 0.000000
time in sched: 0.000000
time in local-alloc: 0.000000
time in global-alloc: 0.000000
time in sched2: 0.000000
time in dbranch: 0.000000
time in shorten-branch: 0.000000
time in stack-reg: 0.000000
time in final: 0.000000
time in varconst: 0.000000
time in symout: 0.000000
time in dump: 0.000000
warning: partially supported sigprocmask() call...

sim: ** simulation statistics **
sim_num_insn              145043042 # total number of instructions committed
sim_num_refs               51386980 # total number of loads and stores committed
sim_num_loads              33904322 # total number of loads committed
sim_num_stores         17482658.0000 # total number of stores committed
sim_num_branches           23211008 # total number of branches committed
sim_elapsed_time                145 # total simulation time in seconds
sim_inst_rate          1000296.8414 # simulation speed (in insts/sec)
sim_total_insn            172041797 # total number of instructions executed
sim_total_refs             60956356 # total number of loads and stores executed
sim_total_loads            41546862 # total number of loads executed
sim_total_stores       19409494.0000 # total number of stores executed
sim_total_branches         27754143 # total number of branches executed
sim_cycle                 123880192 # total simulation time in cycles
sim_IPC                      1.1708 # instructions per cycle
sim_CPI                      0.8541 # cycles per instruction
sim_exec_BW                  1.3888 # total instructions (mis-spec + committed) per cycle
sim_IPB                      6.2489 # instruction per branch
IFQ_count                 251270644 # cumulative IFQ occupancy
IFQ_fcount                 54575475 # cumulative IFQ full count
ifq_occupancy                2.0283 # avg IFQ occupancy (insn's)
ifq_rate                     1.3888 # avg IFQ dispatch rate (insn/cycle)
ifq_latency                  1.4605 # avg IFQ occupant latency (cycle's)
ifq_full                     0.4406 # fraction of time (cycle's) IFQ was full
RUU_count                 945644524 # cumulative RUU occupancy
RUU_fcount                 21973511 # cumulative RUU full count
ruu_occupancy                7.6335 # avg RUU occupancy (insn's)
ruu_rate                     1.3888 # avg RUU dispatch rate (insn/cycle)
ruu_latency                  5.4966 # avg RUU occupant latency (cycle's)
ruu_full                     0.1774 # fraction of time (cycle's) RUU was full
LSQ_count                 338767456 # cumulative LSQ occupancy
LSQ_fcount                 11719483 # cumulative LSQ full count
lsq_occupancy                2.7346 # avg LSQ occupancy (insn's)
lsq_rate                     1.3888 # avg LSQ dispatch rate (insn/cycle)
lsq_latency                  1.9691 # avg LSQ occupant latency (cycle's)
lsq_full                     0.0946 # fraction of time (cycle's) LSQ was full
sim_slip                 1338941488 # total number of slip cycles
avg_sim_slip                 9.2313 # the average slip between issue and retirement
bpred_2lev.lookups         29007114 # total number of bpred lookups
bpred_2lev.updates         23211008 # total number of updates
bpred_2lev.addr_hits       18310763 # total number of address-predicted hits
bpred_2lev.dir_hits        19012559 # total number of direction-predicted hits (includes addr-hits)
bpred_2lev.misses           4198449 # total number of misses
bpred_2lev.jr_hits          1683911 # total number of address-predicted hits for JR's
bpred_2lev.jr_seen          2178506 # total number of JR's seen
bpred_2lev.jr_non_ras_hits.PP       247371 # total number of address-predicted hits for non-RAS JR's
bpred_2lev.jr_non_ras_seen.PP       659018 # total number of non-RAS JR's seen
bpred_2lev.bpred_addr_rate    0.7889 # branch address-prediction rate (i.e., addr-hits/updates)
bpred_2lev.bpred_dir_rate    0.8191 # branch direction-prediction rate (i.e., all-hits/updates)
bpred_2lev.bpred_jr_rate    0.7730 # JR address-prediction rate (i.e., JR addr-hits/JRs seen)
bpred_2lev.bpred_jr_non_ras_rate.PP    0.3754 # non-RAS JR addr-pred rate (ie, non-RAS JR hits/JRs seen)
bpred_2lev.retstack_pushes      2225468 # total number of address pushed onto ret-addr stack
bpred_2lev.retstack_pops      1837971 # total number of address popped off of ret-addr stack
bpred_2lev.used_ras.PP      1519488 # total number of RAS predictions used
bpred_2lev.ras_hits.PP      1436540 # total number of RAS hits
bpred_2lev.ras_rate.PP    0.9454 # RAS prediction rate (i.e., RAS hits/used RAS)
il1.accesses              185584046 # total number of accesses
il1.hits                  179947508 # total number of hits
il1.misses                  5636538 # total number of misses
il1.replacements            5636026 # total number of replacements
il1.writebacks                    0 # total number of writebacks
il1.invalidations                 0 # total number of invalidations
il1.miss_rate                0.0304 # miss rate (i.e., misses/ref)
il1.repl_rate                0.0304 # replacement rate (i.e., repls/ref)
il1.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
il1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
dl1.accesses               54384954 # total number of accesses
dl1.hits                   53016645 # total number of hits
dl1.misses                  1368309 # total number of misses
dl1.replacements            1367797 # total number of replacements
dl1.writebacks               424554 # total number of writebacks
dl1.invalidations                 0 # total number of invalidations
dl1.miss_rate                0.0252 # miss rate (i.e., misses/ref)
dl1.repl_rate                0.0252 # replacement rate (i.e., repls/ref)
dl1.wb_rate                  0.0078 # writeback rate (i.e., wrbks/ref)
dl1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
ul2.accesses                7429401 # total number of accesses
ul2.hits                    6984290 # total number of hits
ul2.misses                   445111 # total number of misses
ul2.replacements             441015 # total number of replacements
ul2.writebacks                98358 # total number of writebacks
ul2.invalidations                 0 # total number of invalidations
ul2.miss_rate                0.0599 # miss rate (i.e., misses/ref)
ul2.repl_rate                0.0594 # replacement rate (i.e., repls/ref)
ul2.wb_rate                  0.0132 # writeback rate (i.e., wrbks/ref)
ul2.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
itlb.accesses             185584046 # total number of accesses
itlb.hits                 185488034 # total number of hits
itlb.misses                   96012 # total number of misses
itlb.replacements             95948 # total number of replacements
itlb.writebacks                   0 # total number of writebacks
itlb.invalidations                0 # total number of invalidations
itlb.miss_rate               0.0005 # miss rate (i.e., misses/ref)
itlb.repl_rate               0.0005 # replacement rate (i.e., repls/ref)
itlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
itlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
dtlb.accesses              54874551 # total number of accesses
dtlb.hits                  54853203 # total number of hits
dtlb.misses                   21348 # total number of misses
dtlb.replacements             21220 # total number of replacements
dtlb.writebacks                   0 # total number of writebacks
dtlb.invalidations                0 # total number of invalidations
dtlb.miss_rate               0.0004 # miss rate (i.e., misses/ref)
dtlb.repl_rate               0.0004 # replacement rate (i.e., repls/ref)
dtlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
dtlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
rename_power           51777644.7360 # total power usage of rename unit
bpred_power            560325767.7103 # total power usage of bpred unit
window_power           273071512.6776 # total power usage of instruction window
lsq_power              119318922.0485 # total power usage of load/store queue
regfile_power          442558529.5516 # total power usage of arch. regfile
icache_power           306844018.1233 # total power usage of icache
dcache_power           753799355.9011 # total power usage of dcache
dcache2_power          521423550.3957 # total power usage of dcache2
alu_power              2346436451.1024 # total power usage of alu
falu_power             1769138591.4686 # total power usage of falu
resultbus_power        284620054.5218 # total power usage of resultbus
clock_power            3232959923.7972 # total power usage of clock
avg_rename_power             0.4180 # avg power usage of rename unit
avg_bpred_power              4.5231 # avg power usage of bpred unit
avg_window_power             2.2043 # avg power usage of instruction window
avg_lsq_power                0.9632 # avg power usage of lsq
avg_regfile_power            3.5725 # avg power usage of arch. regfile
avg_icache_power             2.4769 # avg power usage of icache
avg_dcache_power             6.0849 # avg power usage of dcache
avg_dcache2_power            4.2091 # avg power usage of dcache2
avg_alu_power               18.9412 # avg power usage of alu
avg_falu_power              14.2810 # avg power usage of falu
avg_resultbus_power          2.2975 # avg power usage of resultbus
avg_clock_power             26.0975 # avg power usage of clock
fetch_stage_power      867169785.8336 # total power usage of fetch stage
dispatch_stage_power   51777644.7360 # total power usage of dispatch stage
issue_stage_power      4298669846.6472 # total power usage of issue stage
avg_fetch_power              7.0001 # average power of fetch unit per cycle
avg_dispatch_power           0.4180 # average power of dispatch unit per cycle
avg_issue_power             34.7002 # average power of issue unit per cycle
total_power            8893135730.5656 # total power per cycle
avg_total_power_cycle       71.7882 # average total power per cycle
avg_total_power_cycle_nofp_nod2      53.2981 # average total power per cycle
avg_total_power_insn        51.6917 # average total power per insn
avg_total_power_insn_nofp_nod2      38.3777 # average total power per insn
rename_power_cc1       24901976.5969 # total power usage of rename unit_cc1
bpred_power_cc1        92859696.6811 # total power usage of bpred unit_cc1
window_power_cc1       180583747.7836 # total power usage of instruction window_cc1
lsq_power_cc1          20973650.9256 # total power usage of lsq_cc1
regfile_power_cc1      234089521.5630 # total power usage of arch. regfile_cc1
icache_power_cc1       162988148.5399 # total power usage of icache_cc1
dcache_power_cc1       236505496.1968 # total power usage of dcache_cc1
dcache2_power_cc1      29179322.6688 # total power usage of dcache2_cc1
alu_power_cc1          317729321.3504 # total power usage of alu_cc1
resultbus_power_cc1    133571034.5429 # total power usage of resultbus_cc1
clock_power_cc1        880150930.3762 # total power usage of clock_cc1
avg_rename_power_cc1         0.2010 # avg power usage of rename unit_cc1
avg_bpred_power_cc1          0.7496 # avg power usage of bpred unit_cc1
avg_window_power_cc1         1.4577 # avg power usage of instruction window_cc1
avg_lsq_power_cc1            0.1693 # avg power usage of lsq_cc1
avg_regfile_power_cc1        1.8896 # avg power usage of arch. regfile_cc1
avg_icache_power_cc1         1.3157 # avg power usage of icache_cc1
avg_dcache_power_cc1         1.9091 # avg power usage of dcache_cc1
avg_dcache2_power_cc1        0.2355 # avg power usage of dcache2_cc1
avg_alu_power_cc1            2.5648 # avg power usage of alu_cc1
avg_resultbus_power_cc1       1.0782 # avg power usage of resultbus_cc1
avg_clock_power_cc1          7.1049 # avg power usage of clock_cc1
fetch_stage_power_cc1  255847845.2210 # total power usage of fetch stage_cc1
dispatch_stage_power_cc1 24901976.5969 # total power usage of dispatch stage_cc1
issue_stage_power_cc1  918542573.4682 # total power usage of issue stage_cc1
avg_fetch_power_cc1          2.0653 # average power of fetch unit per cycle_cc1
avg_dispatch_power_cc1       0.2010 # average power of dispatch unit per cycle_cc1
avg_issue_power_cc1          7.4148 # average power of issue unit per cycle_cc1
total_power_cycle_cc1  2313532847.2254 # total power per cycle_cc1
avg_total_power_cycle_cc1      18.6756 # average total power per cycle_cc1
avg_total_power_insn_cc1      13.4475 # average total power per insn_cc1
rename_power_cc2       17976883.3524 # total power usage of rename unit_cc2
bpred_power_cc2        52493161.4668 # total power usage of bpred unit_cc2
window_power_cc2       127175339.7205 # total power usage of instruction window_cc2
lsq_power_cc2          13798145.6137 # total power usage of lsq_cc2
regfile_power_cc2      55188253.0527 # total power usage of arch. regfile_cc2
icache_power_cc2       162988148.5399 # total power usage of icache_cc2
dcache_power_cc2       165463673.8761 # total power usage of dcache_cc2
dcache2_power_cc2      15635528.9523 # total power usage of dcache2_cc2
alu_power_cc2          186223958.9593 # total power usage of alu_cc2
resultbus_power_cc2    81105614.4817 # total power usage of resultbus_cc2
clock_power_cc2        537583411.2953 # total power usage of clock_cc2
avg_rename_power_cc2         0.1451 # avg power usage of rename unit_cc2
avg_bpred_power_cc2          0.4237 # avg power usage of bpred unit_cc2
avg_window_power_cc2         1.0266 # avg power usage of instruction window_cc2
avg_lsq_power_cc2            0.1114 # avg power usage of instruction lsq_cc2
avg_regfile_power_cc2        0.4455 # avg power usage of arch. regfile_cc2
avg_icache_power_cc2         1.3157 # avg power usage of icache_cc2
avg_dcache_power_cc2         1.3357 # avg power usage of dcache_cc2
avg_dcache2_power_cc2        0.1262 # avg power usage of dcache2_cc2
avg_alu_power_cc2            1.5033 # avg power usage of alu_cc2
avg_resultbus_power_cc2       0.6547 # avg power usage of resultbus_cc2
avg_clock_power_cc2          4.3395 # avg power usage of clock_cc2
fetch_stage_power_cc2  215481310.0067 # total power usage of fetch stage_cc2
dispatch_stage_power_cc2 17976883.3524 # total power usage of dispatch stage_cc2
issue_stage_power_cc2  589402261.6035 # total power usage of issue stage_cc2
avg_fetch_power_cc2          1.7394 # average power of fetch unit per cycle_cc2
avg_dispatch_power_cc2       0.1451 # average power of dispatch unit per cycle_cc2
avg_issue_power_cc2          4.7578 # average power of issue unit per cycle_cc2
total_power_cycle_cc2  1415632119.3106 # total power per cycle_cc2
avg_total_power_cycle_cc2      11.4274 # average total power per cycle_cc2
avg_total_power_insn_cc2       8.2284 # average total power per insn_cc2
rename_power_cc3       20664450.1703 # total power usage of rename unit_cc3
bpred_power_cc3        99264329.0848 # total power usage of bpred unit_cc3
window_power_cc3       135015067.5303 # total power usage of instruction window_cc3
lsq_power_cc3          23628263.7873 # total power usage of lsq_cc3
regfile_power_cc3      71990057.3519 # total power usage of arch. regfile_cc3
icache_power_cc3       177373735.4341 # total power usage of icache_cc3
dcache_power_cc3       217817972.2944 # total power usage of dcache_cc3
dcache2_power_cc3      64869007.7868 # total power usage of dcache2_cc3
alu_power_cc3          389094671.4656 # total power usage of alu_cc3
resultbus_power_cc3    93458612.2563 # total power usage of resultbus_cc3
clock_power_cc3        768056831.6998 # total power usage of clock_cc3
avg_rename_power_cc3         0.1668 # avg power usage of rename unit_cc3
avg_bpred_power_cc3          0.8013 # avg power usage of bpred unit_cc3
avg_window_power_cc3         1.0899 # avg power usage of instruction window_cc3
avg_lsq_power_cc3            0.1907 # avg power usage of instruction lsq_cc3
avg_regfile_power_cc3        0.5811 # avg power usage of arch. regfile_cc3
avg_icache_power_cc3         1.4318 # avg power usage of icache_cc3
avg_dcache_power_cc3         1.7583 # avg power usage of dcache_cc3
avg_dcache2_power_cc3        0.5236 # avg power usage of dcache2_cc3
avg_alu_power_cc3            3.1409 # avg power usage of alu_cc3
avg_resultbus_power_cc3       0.7544 # avg power usage of resultbus_cc3
avg_clock_power_cc3          6.2000 # avg power usage of clock_cc3
fetch_stage_power_cc3  276638064.5189 # total power usage of fetch stage_cc3
dispatch_stage_power_cc3 20664450.1703 # total power usage of dispatch stage_cc3
issue_stage_power_cc3  923883595.1208 # total power usage of issue stage_cc3
avg_fetch_power_cc3          2.2331 # average power of fetch unit per cycle_cc3
avg_dispatch_power_cc3       0.1668 # average power of dispatch unit per cycle_cc3
avg_issue_power_cc3          7.4579 # average power of issue unit per cycle_cc3
total_power_cycle_cc3  2061232998.8617 # total power per cycle_cc3
avg_total_power_cycle_cc3      16.6389 # average total power per cycle_cc3
avg_total_power_insn_cc3      11.9810 # average total power per insn_cc3
total_rename_access       172041797 # total number accesses of rename unit
total_bpred_access         23211008 # total number accesses of bpred unit
total_window_access       613936852 # total number accesses of instruction window
total_lsq_access           55913411 # total number accesses of load/store queue
total_regfile_access      218049605 # total number accesses of arch. regfile
total_icache_access       186469287 # total number accesses of icache
total_dcache_access        54384954 # total number accesses of dcache
total_dcache2_access        7429401 # total number accesses of dcache2
total_alu_access          159661311 # total number accesses of alu
total_resultbus_access    170606108 # total number accesses of resultbus
avg_rename_access            1.3888 # avg number accesses of rename unit
avg_bpred_access             0.1874 # avg number accesses of bpred unit
avg_window_access            4.9559 # avg number accesses of instruction window
avg_lsq_access               0.4514 # avg number accesses of lsq
avg_regfile_access           1.7602 # avg number accesses of arch. regfile
avg_icache_access            1.5052 # avg number accesses of icache
avg_dcache_access            0.4390 # avg number accesses of dcache
avg_dcache2_access           0.0600 # avg number accesses of dcache2
avg_alu_access               1.2888 # avg number accesses of alu
avg_resultbus_access         1.3772 # avg number accesses of resultbus
max_rename_access                 4 # max number accesses of rename unit
max_bpred_access                  4 # max number accesses of bpred unit
max_window_access                17 # max number accesses of instruction window
max_lsq_access                    6 # max number accesses of load/store queue
max_regfile_access               12 # max number accesses of arch. regfile
max_icache_access                 4 # max number accesses of icache
max_dcache_access                 4 # max number accesses of dcache
max_dcache2_access                6 # max number accesses of dcache2
max_alu_access                    4 # max number accesses of alu
max_resultbus_access              8 # max number accesses of resultbus
max_cycle_power_cc1         48.4693 # maximum cycle power usage of cc1
max_cycle_power_cc2         32.0616 # maximum cycle power usage of cc2
max_cycle_power_cc3         35.3878 # maximum cycle power usage of cc3
sim_invalid_addrs                 0 # total non-speculative bogus addresses seen (debug var)
ld_text_base           0x0120000000 # program text (code) segment base
ld_text_size                1564672 # program text (code) size in bytes
ld_data_base           0x0140000000 # program initialized data segment base
ld_data_size                 277104 # program init'ed `.data' and uninit'ed `.bss' size in bytes
ld_stack_base          0x011ff9b000 # program stack segment base (highest address in stack)
ld_stack_size                 16384 # program initial stack size
ld_prog_entry          0x0120025f70 # program entry point (initial PC)
ld_environ_base        0x011ff97000 # program environment base address address
ld_target_big_endian              0 # target executable endian-ness, non-zero if big endian
mem.page_count                  390 # total number of pages allocated
mem.page_mem                  3120k # total size of memory pages allocated
mem.ptab_misses              823630 # total first level page table misses
mem.ptab_accesses        1116650881 # total page table accesses
mem.ptab_miss_rate           0.0007 # first level page table miss rate

