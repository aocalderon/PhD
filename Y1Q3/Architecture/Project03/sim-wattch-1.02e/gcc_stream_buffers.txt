sim-outorder: SimpleScalar/Alpha Tool Set version 3.0 of August, 2003.
Copyright (c) 1994-2003 by Todd M. Austin, Ph.D. and SimpleScalar, LLC.
All Rights Reserved. This version of SimpleScalar is licensed for academic
non-commercial use.  No portion of this work may be used by any commercial
entity, or for any commercial purpose, without the prior written permission
of SimpleScalar, LLC (info@simplescalar.com).


Processor Parameters:
Issue Width: 4
Window Size: 16
Number of Virtual Registers: 32
Number of Physical Registers: 16
Datapath Width: 64
Total Power Consumption: 74.544
Branch Predictor Power Consumption: 4.52313  (6.24%)
 branch target buffer power (W): 4.16837
 local predict power (W): 0.0879711
 global predict power (W): 0.0996078
 chooser power (W): 0.0702439
 RAS power (W): 0.0969383
Rename Logic Power Consumption: 0.417965  (0.576%)
 Instruction Decode Power (W): 0.0159915
 RAT decode_power (W): 0.113514
 RAT wordline_power (W): 0.0307815
 RAT bitline_power (W): 0.246771
 DCL Comparators (W): 0.0109075
Instruction Window Power Consumption: 2.20432  (3.04%)
 tagdrive (W): 0.0943488
 tagmatch (W): 0.033695
 Selection Logic (W): 0.0134217
 decode_power (W): 0.0532503
 wordline_power (W): 0.0844643
 bitline_power (W): 1.92514
Load/Store Queue Power Consumption: 0.96318  (1.33%)
 tagdrive (W): 0.457232
 tagmatch (W): 0.100774
 decode_power (W): 0.00799577
 wordline_power (W): 0.0150119
 bitline_power (W): 0.382166
Arch. Register File Power Consumption: 3.57247  (4.92%)
 decode_power (W): 0.113514
 wordline_power (W): 0.0844643
 bitline_power (W): 3.37449
Result Bus Power Consumption: 2.29754  (3.17%)
Total Clock Power: 26.0975  (36%)
Int ALU Power: 4.66013  (6.42%)
FP ALU Power: 14.281  (19.7%)
Instruction Cache Power Consumption: 2.21363  (3.05%)
 decode_power (W): 0.779481
 wordline_power (W): 0.028656
 bitline_power (W): 0.886372
 senseamp_power (W): 0.096
 tagarray_power (W): 0.423116
Itlb_power (W): 0.263317 (0.363%)
Data Cache Power Consumption: 5.18303  (7.14%)
 decode_power (W): 0.651055
 wordline_power (W): 0.196735
 bitline_power (W): 2.71235
 senseamp_power (W): 0.768
 tagarray_power (W): 0.854886
Dtlb_power (W): 0.901877 (1.24%)
Victim Cache Power Consumption: 0  (0%)
 decode_power (W): 0
 wordline_power (W): 0
 bitline_power (W): 0
 senseamp_power (W): 0
 tagarray_power (W): 0
Data Buffer Cache Power Consumption: 0.320702  (0.442%)
 decode_power (W): 0.000272983
 wordline_power (W): 0.0187999
 bitline_power (W): 0.0212757
 senseamp_power (W): 0.08
 tagarray_power (W): 0.200353
Instruction Buffer Cache Power Consumption: 0.435116  (0.6%)
 decode_power (W): 0.000272983
 wordline_power (W): 0.0359065
 bitline_power (W): 0.0425514
 senseamp_power (W): 0.16
 tagarray_power (W): 0.196385
Level 2 Cache Power Consumption: 4.2091 (5.8%)
 decode_power (W): 0.41817
 wordline_power (W): 0.0430878
 bitline_power (W): 3.0244
 senseamp_power (W): 0.192
 tagarray_power (W): 0.531433
warning: section `.comment' ignored...
sim: command line: ./sim-outorder -redir:sim gcc_stream_buffers.txt -cache:victim none ../benchmarks/cc1.alpha ../benchmarks/1stmt.i 

sim: simulation started @ Tue Jun  7 18:11:54 2016, options follow:

sim-outorder: This simulator implements a very detailed out-of-order issue
superscalar processor with a two-level memory system and speculative
execution support.  This simulator is a performance simulator, tracking the
latency of all pipeline operations.

# -config                     # load configuration from a file
# -dumpconfig                 # dump configuration to a file
# -h                    false # print help message    
# -v                    false # verbose operation     
# -d                    false # enable debug message  
# -i                    false # start in Dlite debugger
-seed                       1 # random number generator seed (0 for timer seed)
# -q                    false # initialize and terminate immediately
# -chkpt               <null> # restore EIO trace execution from <fname>
# -redir:sim     gcc_stream_buffers.txt # redirect simulator output to file (non-interactive only)
# -redir:prog          <null> # redirect simulated program output to file
-nice                       0 # simulator scheduling priority
-max:inst                   0 # maximum number of inst's to execute
-fastfwd                    0 # number of insts skipped before timing starts
# -ptrace              <null> # generate pipetrace, i.e., <fname|stdout|stderr> <range>
-fetch:ifqsize              4 # instruction fetch queue size (in insts)
-fetch:mplat                3 # extra branch mis-prediction latency
-fetch:speed                1 # speed of front-end of machine relative to execution core
-bpred                  bimod # branch predictor type {nottaken|taken|perfect|bimod|2lev|comb}
-bpred:bimod     2048 # bimodal predictor config (<table size>)
-bpred:2lev      1 1024 8 0 # 2-level predictor config (<l1size> <l2size> <hist_size> <xor>)
-bpred:comb      1024 # combining predictor config (<meta_table_size>)
-bpred:ras                  8 # return address stack size (0 for no return stack)
-bpred:btb       512 4 # BTB config (<num_sets> <associativity>)
# -bpred:spec_update       <null> # speculative predictors update in {ID|WB} (default non-spec)
-decode:width               4 # instruction decode B/W (insts/cycle)
-issue:width                4 # instruction issue B/W (insts/cycle)
-issue:inorder          false # run pipeline with in-order issue
-issue:wrongpath         true # issue instructions down wrong execution paths
-commit:width               4 # instruction commit B/W (insts/cycle)
-ruu:size                  16 # register update unit (RUU) size
-lsq:size                   8 # load/store queue (LSQ) size
-cache:victim            none # Victim cache config, i.e., {<config>|none}
-cache:viclat               1 # Victim cache hit latency (in cycles)
-cache:dsbuffer  dsbuf:1:32:16:f # Data Buffer cache config, i.e., {<config>|none}
-cache:dsbuflat             1 # Data Buffer cache hit latency (in cycles)
-cache:isbuffer  isbuf:1:64:16:f # Instruction Buffer cache config, i.e., {<config>|none}
-cache:isbuflat             1 # Instruction Buffer cache hit latency (in cycles)
-cache:dl1       dl1:128:32:4:l # l1 data cache config, i.e., {<config>|none}
-cache:dl1lat               1 # l1 data cache hit latency (in cycles)
-cache:dl2       ul2:1024:64:4:l # l2 data cache config, i.e., {<config>|none}
-cache:dl2lat               6 # l2 data cache hit latency (in cycles)
-cache:il1       il1:512:32:1:l # l1 inst cache config, i.e., {<config>|dl1|dl2|none}
-cache:il1lat               1 # l1 instruction cache hit latency (in cycles)
-cache:il2                dl2 # l2 instruction cache config, i.e., {<config>|dl2|none}
-cache:il2lat               6 # l2 instruction cache hit latency (in cycles)
-cache:flush            false # flush caches on system calls
-cache:icompress        false # convert 64-bit inst addresses to 32-bit inst equivalents
-mem:lat         18 2 # memory access latency (<first_chunk> <inter_chunk>)
-mem:width                  8 # memory access bus width (in bytes)
-tlb:itlb        itlb:16:4096:4:l # instruction TLB config, i.e., {<config>|none}
-tlb:dtlb        dtlb:32:4096:4:l # data TLB config, i.e., {<config>|none}
-tlb:lat                   30 # inst/data TLB miss latency (in cycles)
-res:ialu                   4 # total number of integer ALU's available
-res:imult                  1 # total number of integer multiplier/dividers available
-res:memport                2 # total number of memory system ports available (to CPU)
-res:fpalu                  4 # total number of floating point ALU's available
-res:fpmult                 1 # total number of floating point multiplier/dividers available
# -pcstat              <null> # profile stat(s) against text addr's (mult uses ok)
-bugcompat              false # operate in backward-compatible bugs mode (for testing only)

  Pipetrace range arguments are formatted as follows:

    {{@|#}<start>}:{{@|#|+}<end>}

  Both ends of the range are optional, if neither are specified, the entire
  execution is traced.  Ranges that start with a `@' designate an addrcc1.alpha: ../benchmarks/1stmt.i: No such file or directory
ess
  range to be traced, those that start with an `#' designate a cycle count
  range.  All other range values represent an instruction count range.  The
  second argument, if specified with a `+', indicates a value relative
  to the first argument, e.g., 1000:+100 == 1000:1100.  Program symbols may
  be used in all contexts.

    Examples:   -ptrace FOO.trc #0:#1000
                -ptrace BAR.trc @2000:
                -ptrace BLAH.trc :1500
                -ptrace UXXE.trc :
                -ptrace FOOBAR.trc @main:+278

  Branch predictor configuration examples for 2-level predictor:
    Configurations:   N, M, W, X
      N   # entries in first level (# of shift register(s))
      W   width of shift register(s)
      M   # entries in 2nd level (# of counters, or other FSM)
      X   (yes-1/no-0) xor history and address for 2nd level index
    Sample predictors:
      GAg     : 1, W, 2^W, 0
      GAp     : 1, W, M (M > 2^W), 0
      PAg     : N, W, 2^W, 0
      PAp     : N, W, M (M == 2^(N+W)), 0
      gshare  : 1, W, 2^W, 1
  Predictor `comb' combines a bimodal and a 2-level predictor.

  The cache config parameter <config> has the following format:

    <name>:<nsets>:<bsize>:<assoc>:<repl>

    <name>   - name of the cache being defined
    <nsets>  - number of sets in the cache
    <bsize>  - block size of the cache
    <assoc>  - associativity of the cache
    <repl>   - block replacement strategy, 'l'-LRU, 'f'-FIFO, 'r'-random, 'p'-PLRU

    Examples:   -cache:dl1 dl1:4096:32:1:l
                -dtlb dtlb:128:4096:32:r

  Cache levels can be unified by pointing a level of the instruction cache
  hierarchy at the data cache hiearchy using the "dl1" and "dl2" cache
  configuration arguments.  Most sensible combinations are supported, e.g.,

    A unified l2 cache (il2 is pointed at dl2):
      -cache:il1 il1:128:64:1:l -cache:il2 dl2
      -cache:dl1 dl1:256:32:1:l -cache:dl2 ul2:1024:64:2:l

    Or, a fully unified cache hierarchy (il1 pointed at dl1):
      -cache:il1 dl1
      -cache:dl1 ul1:256:32:1:l -cache:dl2 ul2:1024:64:2:l



sim: ** starting performance simulation ******
warning: partially supported sigaction() call...
warning: partially supported sigprocmask() call...

sim: ** simulation statistics **
sim_num_insn                  38160 # total number of instructions committed
sim_num_refs                   8334 # total number of loads and stores committed
sim_num_loads                  6129 # total number of loads committed
sim_num_stores            2205.0000 # total number of stores committed
sim_num_branches               6478 # total number of branches committed
sim_elapsed_time                  1 # total simulation time in seconds
sim_inst_rate            38160.0000 # simulation speed (in insts/sec)
sim_total_insn                44436 # total number of instructions executed
sim_total_refs                 9595 # total number of loads and stores executed
sim_total_loads                7121 # total number of loads executed
sim_total_stores          2474.0000 # total number of stores executed
sim_total_branches             7386 # total number of branches executed
sim_cycle                     30228 # total simulation time in cycles
sim_IPC                      1.2624 # instructions per cycle
sim_CPI                      0.7921 # cycles per instruction
sim_exec_BW                  1.4700 # total instructions (mis-spec + committed) per cycle
sim_IPB                      5.8907 # instruction per branch
IFQ_count                     70312 # cumulative IFQ occupancy
IFQ_fcount                    15814 # cumulative IFQ full count
ifq_occupancy                2.3261 # avg IFQ occupancy (insn's)
ifq_rate                     1.4700 # avg IFQ dispatch rate (insn/cycle)
ifq_latency                  1.5823 # avg IFQ occupant latency (cycle's)
ifq_full                     0.5232 # fraction of time (cycle's) IFQ was full
RUU_count                    272119 # cumulative RUU occupancy
RUU_fcount                    10497 # cumulative RUU full count
ruu_occupancy                9.0022 # avg RUU occupancy (insn's)
ruu_rate                     1.4700 # avg RUU dispatch rate (insn/cycle)
ruu_latency                  6.1238 # avg RUU occupant latency (cycle's)
ruu_full                     0.3473 # fraction of time (cycle's) RUU was full
LSQ_count                     62714 # cumulative LSQ occupancy
LSQ_fcount                      917 # cumulative LSQ full count
lsq_occupancy                2.0747 # avg LSQ occupancy (insn's)
lsq_rate                     1.4700 # avg LSQ dispatch rate (insn/cycle)
lsq_latency                  1.4113 # avg LSQ occupant latency (cycle's)
lsq_full                     0.0303 # fraction of time (cycle's) LSQ was full
sim_slip                     351248 # total number of slip cycles
avg_sim_slip                 9.2046 # the average slip between issue and retirement
bpred_bimod.lookups            7701 # total number of bpred lookups
bpred_bimod.updates            6478 # total number of updates
bpred_bimod.addr_hits          5255 # total number of address-predicted hits
bpred_bimod.dir_hits           5688 # total number of direction-predicted hits (includes addr-hits)
bpred_bimod.misses              790 # total number of misses
bpred_bimod.jr_hits             524 # total number of address-predicted hits for JR's
bpred_bimod.jr_seen             631 # total number of JR's seen
bpred_bimod.jr_non_ras_hits.PP           22 # total number of address-predicted hits for non-RAS JR's
bpred_bimod.jr_non_ras_seen.PP           58 # total number of non-RAS JR's seen
bpred_bimod.bpred_addr_rate    0.8112 # branch address-prediction rate (i.e., addr-hits/updates)
bpred_bimod.bpred_dir_rate    0.8780 # branch direction-prediction rate (i.e., all-hits/updates)
bpred_bimod.bpred_jr_rate    0.8304 # JR address-prediction rate (i.e., JR addr-hits/JRs seen)
bpred_bimod.bpred_jr_non_ras_rate.PP    0.3793 # non-RAS JR addr-pred rate (ie, non-RAS JR hits/JRs seen)
bpred_bimod.retstack_pushes          665 # total number of address pushed onto ret-addr stack
bpred_bimod.retstack_pops          693 # total number of address popped off of ret-addr stack
bpred_bimod.used_ras.PP          573 # total number of RAS predictions used
bpred_bimod.ras_hits.PP          502 # total number of RAS hits
bpred_bimod.ras_rate.PP    0.8761 # RAS prediction rate (i.e., RAS hits/used RAS)
il1.accesses                  46706 # total number of accesses
il1.hits                      45709 # total number of hits
il1.misses                      997 # total number of misses
il1.replacements                562 # total number of replacements
il1.writebacks                    0 # total number of writebacks
il1.invalidations                 0 # total number of invalidations
il1.miss_rate                0.0213 # miss rate (i.e., misses/ref)
il1.repl_rate                0.0120 # replacement rate (i.e., repls/ref)
il1.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
il1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
dl1.accesses                   8705 # total number of accesses
dl1.hits                       8060 # total number of hits
dl1.misses                      645 # total number of misses
dl1.replacements                161 # total number of replacements
dl1.writebacks                    0 # total number of writebacks
dl1.invalidations                 0 # total number of invalidations
dl1.miss_rate                0.0741 # miss rate (i.e., misses/ref)
dl1.repl_rate                0.0185 # replacement rate (i.e., repls/ref)
dl1.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
dl1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
dsbuf.accesses                  645 # total number of accesses
dsbuf.hits                      190 # total number of hits
dsbuf.misses                    455 # total number of misses
dsbuf.replacements             6457 # total number of replacements
dsbuf.writebacks                  0 # total number of writebacks
dsbuf.invalidations               0 # total number of invalidations
dsbuf.miss_rate              0.7054 # miss rate (i.e., misses/ref)
dsbuf.repl_rate             10.0109 # replacement rate (i.e., repls/ref)
dsbuf.wb_rate                0.0000 # writeback rate (i.e., wrbks/ref)
dsbuf.inv_rate               0.0000 # invalidation rate (i.e., invs/ref)
isbuf.accesses                  997 # total number of accesses
isbuf.hits                      437 # total number of hits
isbuf.misses                    560 # total number of misses
isbuf.replacements             6935 # total number of replacements
isbuf.writebacks                  0 # total number of writebacks
isbuf.invalidations               0 # total number of invalidations
isbuf.miss_rate              0.5617 # miss rate (i.e., misses/ref)
isbuf.repl_rate              6.9559 # replacement rate (i.e., repls/ref)
isbuf.wb_rate                0.0000 # writeback rate (i.e., wrbks/ref)
isbuf.inv_rate               0.0000 # invalidation rate (i.e., invs/ref)
ul2.accesses                  13424 # total number of accesses
ul2.hits                      11280 # total number of hits
ul2.misses                     2144 # total number of misses
ul2.replacements                125 # total number of replacements
ul2.writebacks                    0 # total number of writebacks
ul2.invalidations                 0 # total number of invalidations
ul2.miss_rate                0.1597 # miss rate (i.e., misses/ref)
ul2.repl_rate                0.0093 # replacement rate (i.e., repls/ref)
ul2.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
ul2.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
itlb.accesses                 46706 # total number of accesses
itlb.hits                     46671 # total number of hits
itlb.misses                      35 # total number of misses
itlb.replacements                 0 # total number of replacements
itlb.writebacks                   0 # total number of writebacks
itlb.invalidations                0 # total number of invalidations
itlb.miss_rate               0.0007 # miss rate (i.e., misses/ref)
itlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
itlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
itlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
dtlb.accesses                  8757 # total number of accesses
dtlb.hits                      8720 # total number of hits
dtlb.misses                      37 # total number of misses
dtlb.replacements                 0 # total number of replacements
dtlb.writebacks                   0 # total number of writebacks
dtlb.invalidations                0 # total number of invalidations
dtlb.miss_rate               0.0042 # miss rate (i.e., misses/ref)
dtlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
dtlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
dtlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
rename_power             12634.2607 # total power usage of rename unit
bpred_power             136725.0647 # total power usage of bpred unit
window_power             66632.1674 # total power usage of instruction window
lsq_power                29115.0047 # total power usage of load/store queue
regfile_power           107988.6868 # total power usage of arch. regfile
icache_power             74872.9948 # total power usage of icache
dcache_power            183934.5468 # total power usage of dcache
victim_power                 0.0000 # total power usage of victim cache
dsbuffer_power           36956.1056 # total power usage of dsbuffer cache
isbuffer_power           21112.2326 # total power usage of isbuffer cache
dcache2_power           127232.5371 # total power usage of dcache2
alu_power               572553.8500 # total power usage of alu
falu_power              431687.4266 # total power usage of falu
resultbus_power          69450.1264 # total power usage of resultbus
clock_power             788874.4026 # total power usage of clock
avg_rename_power             0.4180 # avg power usage of rename unit
avg_bpred_power              4.5231 # avg power usage of bpred unit
avg_window_power             2.2043 # avg power usage of instruction window
avg_lsq_power                0.9632 # avg power usage of lsq
avg_regfile_power            3.5725 # avg power usage of arch. regfile
avg_icache_power             2.4769 # avg power usage of icache
avg_dcache_power             6.0849 # avg power usage of dcache
avg_victim_power             0.0000 # avg power usage of victim cache
avg_dsbuffer_power           1.2226 # avg power usage of dsbuffer cache
avg_isbuffer_power           0.6984 # avg power usage of isbuffer cache
avg_dcache2_power            4.2091 # avg power usage of dcache2
avg_alu_power               18.9412 # avg power usage of alu
avg_falu_power              14.2810 # avg power usage of falu
avg_resultbus_power          2.2975 # avg power usage of resultbus
avg_clock_power             26.0975 # avg power usage of clock
fetch_stage_power       211598.0595 # total power usage of fetch stage
dispatch_stage_power     12634.2607 # total power usage of dispatch stage
issue_stage_power      1048918.2324 # total power usage of issue stage
avg_fetch_power              7.0001 # average power of fetch unit per cycle
avg_dispatch_power           0.4180 # average power of dispatch unit per cycle
avg_issue_power             34.7002 # average power of issue unit per cycle
total_power            2228081.9801 # total power per cycle
avg_total_power_cycle       71.7882 # average total power per cycle
avg_total_power_cycle_nofp_nod2      53.2981 # average total power per cycle
avg_total_power_insn        48.8346 # average total power per insn
avg_total_power_insn_nofp_nod2      36.2565 # average total power per insn
rename_power_cc1          6332.5951 # total power usage of rename unit_cc1
bpred_power_cc1          26073.5621 # total power usage of bpred unit_cc1
window_power_cc1         40147.8227 # total power usage of instruction window_cc1
lsq_power_cc1             3687.1339 # total power usage of lsq_cc1
regfile_power_cc1        52743.1432 # total power usage of arch. regfile_cc1
icache_power_cc1         40180.9488 # total power usage of icache_cc1
dcache_power_cc1         42001.0655 # total power usage of dcache_cc1
dcache2_power_cc1        28251.4486 # total power usage of dcache2_cc1
alu_power_cc1            74012.1919 # total power usage of alu_cc1
resultbus_power_cc1      31661.4393 # total power usage of resultbus_cc1
clock_power_cc1         187837.0110 # total power usage of clock_cc1
avg_rename_power_cc1         0.2095 # avg power usage of rename unit_cc1
avg_bpred_power_cc1          0.8626 # avg power usage of bpred unit_cc1
avg_window_power_cc1         1.3282 # avg power usage of instruction window_cc1
avg_lsq_power_cc1            0.1220 # avg power usage of lsq_cc1
avg_regfile_power_cc1        1.7448 # avg power usage of arch. regfile_cc1
avg_icache_power_cc1         1.3293 # avg power usage of icache_cc1
avg_dcache_power_cc1         1.3895 # avg power usage of dcache_cc1
avg_dcache2_power_cc1        0.9346 # avg power usage of dcache2_cc1
avg_alu_power_cc1            2.4485 # avg power usage of alu_cc1
avg_resultbus_power_cc1       1.0474 # avg power usage of resultbus_cc1
avg_clock_power_cc1          6.2140 # avg power usage of clock_cc1
fetch_stage_power_cc1    66254.5110 # total power usage of fetch stage_cc1
dispatch_stage_power_cc1    6332.5951 # total power usage of dispatch stage_cc1
issue_stage_power_cc1   219761.1021 # total power usage of issue stage_cc1
avg_fetch_power_cc1          2.1918 # average power of fetch unit per cycle_cc1
avg_dispatch_power_cc1       0.2095 # average power of dispatch unit per cycle_cc1
avg_issue_power_cc1          7.2701 # average power of issue unit per cycle_cc1
total_power_cycle_cc1   532928.3624 # total power per cycle_cc1
avg_total_power_cycle_cc1      17.6303 # average total power per cycle_cc1
avg_total_power_insn_cc1      11.9932 # average total power per insn_cc1
rename_power_cc2          4643.1786 # total power usage of rename unit_cc2
bpred_power_cc2          14650.4064 # total power usage of bpred unit_cc2
window_power_cc2         30931.8035 # total power usage of instruction window_cc2
lsq_power_cc2             2254.7210 # total power usage of lsq_cc2
regfile_power_cc2        14087.5524 # total power usage of arch. regfile_cc2
icache_power_cc2         40180.9488 # total power usage of icache_cc2
dcache_power_cc2         26484.5545 # total power usage of dcache_cc2
dcache2_power_cc2        28251.4486 # total power usage of dcache2_cc2
alu_power_cc2            47783.9630 # total power usage of alu_cc2
resultbus_power_cc2      19889.7211 # total power usage of resultbus_cc2
clock_power_cc2         119386.9533 # total power usage of clock_cc2
avg_rename_power_cc2         0.1536 # avg power usage of rename unit_cc2
avg_bpred_power_cc2          0.4847 # avg power usage of bpred unit_cc2
avg_window_power_cc2         1.0233 # avg power usage of instruction window_cc2
avg_lsq_power_cc2            0.0746 # avg power usage of instruction lsq_cc2
avg_regfile_power_cc2        0.4660 # avg power usage of arch. regfile_cc2
avg_icache_power_cc2         1.3293 # avg power usage of icache_cc2
avg_dcache_power_cc2         0.8762 # avg power usage of dcache_cc2
avg_dcache2_power_cc2        0.9346 # avg power usage of dcache2_cc2
avg_alu_power_cc2            1.5808 # avg power usage of alu_cc2
avg_resultbus_power_cc2       0.6580 # avg power usage of resultbus_cc2
avg_clock_power_cc2          3.9495 # avg power usage of clock_cc2
fetch_stage_power_cc2    54831.3552 # total power usage of fetch stage_cc2
dispatch_stage_power_cc2    4643.1786 # total power usage of dispatch stage_cc2
issue_stage_power_cc2   155596.2117 # total power usage of issue stage_cc2
avg_fetch_power_cc2          1.8139 # average power of fetch unit per cycle_cc2
avg_dispatch_power_cc2       0.1536 # average power of dispatch unit per cycle_cc2
avg_issue_power_cc2          5.1474 # average power of issue unit per cycle_cc2
total_power_cycle_cc2   348545.2512 # total power per cycle_cc2
avg_total_power_cycle_cc2      11.5305 # average total power per cycle_cc2
avg_total_power_insn_cc2       7.8438 # average total power per insn_cc2
rename_power_cc3          5273.3452 # total power usage of rename unit_cc3
bpred_power_cc3          25717.5921 # total power usage of bpred unit_cc3
window_power_cc3         33389.3447 # total power usage of instruction window_cc3
lsq_power_cc3             4795.4577 # total power usage of lsq_cc3
regfile_power_cc3        18830.0091 # total power usage of arch. regfile_cc3
icache_power_cc3         43650.1534 # total power usage of icache_cc3
dcache_power_cc3         40712.2824 # total power usage of dcache_cc3
dcache2_power_cc3        40556.7392 # total power usage of dcache2_cc3
alu_power_cc3            97638.1288 # total power usage of alu_cc3
resultbus_power_cc3      23135.0004 # total power usage of resultbus_cc3
clock_power_cc3         178646.0461 # total power usage of clock_cc3
avg_rename_power_cc3         0.1745 # avg power usage of rename unit_cc3
avg_bpred_power_cc3          0.8508 # avg power usage of bpred unit_cc3
avg_window_power_cc3         1.1046 # avg power usage of instruction window_cc3
avg_lsq_power_cc3            0.1586 # avg power usage of instruction lsq_cc3
avg_regfile_power_cc3        0.6229 # avg power usage of arch. regfile_cc3
avg_icache_power_cc3         1.4440 # avg power usage of icache_cc3
avg_dcache_power_cc3         1.3468 # avg power usage of dcache_cc3
avg_dcache2_power_cc3        1.3417 # avg power usage of dcache2_cc3
avg_alu_power_cc3            3.2301 # avg power usage of alu_cc3
avg_resultbus_power_cc3       0.7654 # avg power usage of resultbus_cc3
avg_clock_power_cc3          5.9100 # avg power usage of clock_cc3
fetch_stage_power_cc3    69367.7455 # total power usage of fetch stage_cc3
dispatch_stage_power_cc3    5273.3452 # total power usage of dispatch stage_cc3
issue_stage_power_cc3   240226.9532 # total power usage of issue stage_cc3
avg_fetch_power_cc3          2.2948 # average power of fetch unit per cycle_cc3
avg_dispatch_power_cc3       0.1745 # average power of dispatch unit per cycle_cc3
avg_issue_power_cc3          7.9472 # average power of issue unit per cycle_cc3
total_power_cycle_cc3   512344.0991 # total power per cycle_cc3
avg_total_power_cycle_cc3      16.9493 # average total power per cycle_cc3
avg_total_power_insn_cc3      11.5299 # average total power per insn_cc3
total_rename_access           44436 # total number accesses of rename unit
total_bpred_access             6478 # total number accesses of bpred unit
total_window_access          148734 # total number accesses of instruction window
total_lsq_access               8889 # total number accesses of load/store queue
total_regfile_access          54158 # total number accesses of arch. regfile
total_icache_access           47367 # total number accesses of icache
total_dcache_access            8705 # total number accesses of dcache
total_victim_access               0 # total number accesses of victim cache
total_dsbuffer_access           645 # total number accesses of dsbuffer cache
total_isbuffer_access           997 # total number accesses of isbuffer cache
total_dcache2_access          13424 # total number accesses of dcache2
total_alu_access              40947 # total number accesses of alu
total_resultbus_access        40478 # total number accesses of resultbus
avg_rename_access            1.4700 # avg number accesses of rename unit
avg_bpred_access             0.2143 # avg number accesses of bpred unit
avg_window_access            4.9204 # avg number accesses of instruction window
avg_lsq_access               0.2941 # avg number accesses of lsq
avg_regfile_access           1.7917 # avg number accesses of arch. regfile
avg_icache_access            1.5670 # avg number accesses of icache
avg_dcache_access            0.2880 # avg number accesses of dcache
avg_victim_access            0.0000 # avg number accesses of victim cache
avg_dsbuffer_access          0.0213 # avg number accesses of dsbuffer cache
avg_isbuffer_access          0.0330 # avg number accesses of isbuffer cache
avg_dcache2_access           0.4441 # avg number accesses of dcache2
avg_alu_access               1.3546 # avg number accesses of alu
avg_resultbus_access         1.3391 # avg number accesses of resultbus
max_rename_access                 4 # max number accesses of rename unit
max_bpred_access                  3 # max number accesses of bpred unit
max_window_access                16 # max number accesses of instruction window
max_lsq_access                    5 # max number accesses of load/store queue
max_regfile_access               11 # max number accesses of arch. regfile
max_icache_access                 4 # max number accesses of icache
max_dcache_access                 4 # max number accesses of dcache
max_victim_access                 0 # max number accesses of victim
max_dsbuffer_access               2 # max number accesses of dsbuffer
max_isbuffer_access               2 # max number accesses of isbuffer
max_dcache2_access               34 # max number accesses of dcache2
max_alu_access                    4 # max number accesses of alu
max_resultbus_access              5 # max number accesses of resultbus
max_cycle_power_cc1         46.8999 # maximum cycle power usage of cc1
max_cycle_power_cc2         30.8412 # maximum cycle power usage of cc2
max_cycle_power_cc3         34.1235 # maximum cycle power usage of cc3
sim_invalid_addrs                 0 # total non-speculative bogus addresses seen (debug var)
ld_text_base           0x0120000000 # program text (code) segment base
ld_text_size                1564672 # program text (code) size in bytes
ld_data_base           0x0140000000 # program initialized data segment base
ld_data_size                 277104 # program init'ed `.data' and uninit'ed `.bss' size in bytes
ld_stack_base          0x011ff9b000 # program stack segment base (highest address in stack)
ld_stack_size                 16384 # program initial stack size
ld_prog_entry          0x0120025f70 # program entry point (initial PC)
ld_environ_base        0x011ff97000 # program environment base address address
ld_target_big_endian              0 # target executable endian-ness, non-zero if big endian
mem.page_count                  221 # total number of pages allocated
mem.page_mem                  1768k # total size of memory pages allocated
mem.ptab_misses                 251 # total first level page table misses
mem.ptab_accesses           3649749 # total page table accesses
mem.ptab_miss_rate           0.0001 # first level page table miss rate

