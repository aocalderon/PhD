sim-outorder: SimpleScalar/Alpha Tool Set version 3.0 of August, 2003.
Copyright (c) 1994-2003 by Todd M. Austin, Ph.D. and SimpleScalar, LLC.
All Rights Reserved. This version of SimpleScalar is licensed for academic
non-commercial use.  No portion of this work may be used by any commercial
entity, or for any commercial purpose, without the prior written permission
of SimpleScalar, LLC (info@simplescalar.com).


Processor Parameters:
Issue Width: 4
Window Size: 16
Number of Virtual Registers: 32
Number of Physical Registers: 16
Datapath Width: 64
Total Power Consumption: 71.3822
Branch Predictor Power Consumption: 4.52313  (6.52%)
 branch target buffer power (W): 4.16837
 local predict power (W): 0.0879711
 global predict power (W): 0.0996078
 chooser power (W): 0.0702439
 RAS power (W): 0.0969383
Rename Logic Power Consumption: 0.417965  (0.602%)
 Instruction Decode Power (W): 0.0159915
 RAT decode_power (W): 0.113514
 RAT wordline_power (W): 0.0307815
 RAT bitline_power (W): 0.246771
 DCL Comparators (W): 0.0109075
Instruction Window Power Consumption: 2.20432  (3.18%)
 tagdrive (W): 0.0943488
 tagmatch (W): 0.033695
 Selection Logic (W): 0.0134217
 decode_power (W): 0.0532503
 wordline_power (W): 0.0844643
 bitline_power (W): 1.92514
Load/Store Queue Power Consumption: 0.96318  (1.39%)
 tagdrive (W): 0.457232
 tagmatch (W): 0.100774
 decode_power (W): 0.00799577
 wordline_power (W): 0.0150119
 bitline_power (W): 0.382166
Arch. Register File Power Consumption: 3.57247  (5.15%)
 decode_power (W): 0.113514
 wordline_power (W): 0.0844643
 bitline_power (W): 3.37449
Result Bus Power Consumption: 2.29754  (3.31%)
Total Clock Power: 26.0975  (37.6%)
Int ALU Power: 4.66013  (6.72%)
FP ALU Power: 14.281  (20.6%)
Instruction Cache Power Consumption: 2.21363  (3.19%)
 decode_power (W): 0.779481
 wordline_power (W): 0.028656
 bitline_power (W): 0.886372
 senseamp_power (W): 0.096
 tagarray_power (W): 0.423116
Itlb_power (W): 0.263317 (0.38%)
Data Cache Power Consumption: 5.18303  (7.47%)
 decode_power (W): 0.651055
 wordline_power (W): 0.196735
 bitline_power (W): 2.71235
 senseamp_power (W): 0.768
 tagarray_power (W): 0.854886
Dtlb_power (W): 0.901877 (1.3%)
Level 2 Cache Power Consumption: 1.80309 (2.6%)
 decode_power (W): 0.090611
 wordline_power (W): 0.0430878
 bitline_power (W): 1.14691
 senseamp_power (W): 0.192
 tagarray_power (W): 0.330473
warning: section `.comment' ignored...
sim: command line: ./sim-outorder -cache:dl2 ul2:128:128:4:l ../benchmarks/cc1.alpha ../benchmarks/1stmt.i 

sim: simulation started @ Thu Apr 14 17:54:01 2016, options follow:

sim-outorder: This simulator implements a very detailed out-of-order issue
superscalar processor with a two-level memory system and speculative
execution support.  This simulator is a performance simulator, tracking the
latency of all pipeline operations.

# -config                     # load configuration from a file
# -dumpconfig                 # dump configuration to a file
# -h                    false # print help message    
# -v                    false # verbose operation     
# -d                    false # enable debug message  
# -i                    false # start in Dlite debugger
-seed                       1 # random number generator seed (0 for timer seed)
# -q                    false # initialize and terminate immediately
# -chkpt               <null> # restore EIO trace execution from <fname>
# -redir:sim           <null> # redirect simulator output to file (non-interactive only)
# -redir:prog          <null> # redirect simulated program output to file
-nice                       0 # simulator scheduling priority
-max:inst                   0 # maximum number of inst's to execute
-fastfwd                    0 # number of insts skipped before timing starts
# -ptrace              <null> # generate pipetrace, i.e., <fname|stdout|stderr> <range>
-fetch:ifqsize              4 # instruction fetch queue size (in insts)
-fetch:mplat                3 # extra branch mis-prediction latency
-fetch:speed                1 # speed of front-end of machine relative to execution core
-bpred                  bimod # branch predictor type {nottaken|taken|perfect|bimod|2lev|comb}
-bpred:bimod     2048 # bimodal predictor config (<table size>)
-bpred:2lev      1 1024 8 0 # 2-level predictor config (<l1size> <l2size> <hist_size> <xor>)
-bpred:comb      1024 # combining predictor config (<meta_table_size>)
-bpred:ras                  8 # return address stack size (0 for no return stack)
-bpred:btb       512 4 # BTB config (<num_sets> <associativity>)
# -bpred:spec_update       <null> # speculative predictors update in {ID|WB} (default non-spec)
-decode:width               4 # instruction decode B/W (insts/cycle)
-issue:width                4 # instruction issue B/W (insts/cycle)
-issue:inorder          false # run pipeline with in-order issue
-issue:wrongpath         true # issue instructions down wrong execution paths
-commit:width               4 # instruction commit B/W (insts/cycle)
-ruu:size                  16 # register update unit (RUU) size
-lsq:size                   8 # load/store queue (LSQ) size
-cache:dl1       dl1:128:32:4:l # l1 data cache config, i.e., {<config>|none}
-cache:dl1lat               1 # l1 data cache hit latency (in cycles)
-cache:dl2       ul2:128:128:4:l # l2 data cache config, i.e., {<config>|none}
-cache:dl2lat               6 # l2 data cache hit latency (in cycles)
-cache:il1       il1:512:32:1:l # l1 inst cache config, i.e., {<config>|dl1|dl2|none}
-cache:il1lat               1 # l1 instruction cache hit latency (in cycles)
-cache:il2                dl2 # l2 instruction cache config, i.e., {<config>|dl2|none}
-cache:il2lat               6 # l2 instruction cache hit latency (in cycles)
-cache:flush            false # flush caches on system calls
-cache:icompress        false # convert 64-bit inst addresses to 32-bit inst equivalents
-mem:lat         18 2 # memory access latency (<first_chunk> <inter_chunk>)
-mem:width                  8 # memory access bus width (in bytes)
-tlb:itlb        itlb:16:4096:4:l # instruction TLB config, i.e., {<config>|none}
-tlb:dtlb        dtlb:32:4096:4:l # data TLB config, i.e., {<config>|none}
-tlb:lat                   30 # inst/data TLB miss latency (in cycles)
-res:ialu                   4 # total number of integer ALU's available
-res:imult                  1 # total number of integer multiplier/dividers available
-res:memport                2 # total number of memory system ports available (to CPU)
-res:fpalu                  4 # total number of floating point ALU's available
-res:fpmult                 1 # total number of floating point multiplier/dividers available
# -pcstat              <null> # profile stat(s) against text addr's (mult uses ok)
-bugcompat              false # operate in backward-compatible bugs mode (for testing only)

  Pipetrace range arguments are formatted as follows:

    {{@|#}<start>}:{{@|#|+}<end>}

  Both ends of the range are optional, if neither are specified, the entire
  execution is traced.  Ranges that start with a `@' designate an address
  range to be traced, those that start with an `#' designate a cycle count
  range.  All other range values represent an instruction count range.  The
  second argument, if specified with a `+', indicates a value relative
  to the first argument, e.g., 1000:+100 == 1000:1100.  Program symbols may
  be used in all contexts.

    Examples:   -ptrace FOO.trc #0:#1000
                -ptrace BAR.trc @2000:
                -ptrace BLAH.trc :1500
                -ptrace UXXE.trc :
                -ptrace FOOBAR.trc @main:+278

  Branch predictor configuration examples for 2-level predictor:
    Configurations:   N, M, W, X
      N   # entries in first level (# of shift register(s))
      W   width of shift register(s)
      M   # entries in 2nd level (# of counters, or other FSM)
      X   (yes-1/no-0) xor history and address for 2nd level index
    Sample predictors:
      GAg     : 1, W, 2^W, 0
      GAp     : 1, W, M (M > 2^W), 0
      PAg     : N, W, 2^W, 0
      PAp     : N, W, M (M == 2^(N+W)), 0
      gshare  : 1, W, 2^W, 1
  Predictor `comb' combines a bimodal and a 2-level predictor.

  The cache config parameter <config> has the following format:

    <name>:<nsets>:<bsize>:<assoc>:<repl>

    <name>   - name of the cache being defined
    <nsets>  - number of sets in the cache
    <bsize>  - block size of the cache
    <assoc>  - associativity of the cache
    <repl>   - block replacement strategy, 'l'-LRU, 'f'-FIFO, 'r'-random

    Examples:   -cache:dl1 dl1:4096:32:1:l
                -dtlb dtlb:128:4096:32:r

  Cache levels can be unified by pointing a level of the instruction cache
  hierarchy at the data cache hiearchy using the "dl1" and "dl2" cache
  configuration arguments.  Most sensible combinations are supported, e.g.,

    A unified l2 cache (il2 is pointed at dl2):
      -cache:il1 il1:128:64:1:l -cache:il2 dl2
      -cache:dl1 dl1:256:32:1:l -cache:dl2 ul2:1024:64:2:l

    Or, a fully unified cache hierarchy (il1 pointed at dl1):
      -cache:il1 dl1
      -cache:dl1 ul1:256:32:1:l -cache:dl2 ul2:1024:64:2:l



sim: ** starting performance simulation **
warning: partially supported sigaction() call...
 label_rtx emit_jump expand_label expand_goto expand_goto_internal expand_fixup fixup_gotos expand_asm expand_asm_operands expand_expr_stmt clear_last_expr expand_start_stmt_expr expand_end_stmt_expr expand_start_cond expand_end_cond expand_start_else expand_end_else expand_start_loop expand_start_loop_continue_elsewhere expand_loop_continue_here expand_end_loop expand_continue_loop expand_exit_loop expand_exit_loop_if_false expand_exit_something expand_null_return expand_null_return_1 expand_return drop_through_at_end_p tail_recursion_args expand_start_bindings use_variable use_variable_after expand_end_bindings expand_decl expand_decl_init expand_anon_union_decl expand_cleanups fixup_cleanups move_cleanups_up expand_start_case expand_start_case_dummy expand_end_case_dummy pushcase pushcase_range check_for_full_enumeration_handling expand_end_case do_jump_if_equal group_case_nodes balance_case_nodes node_has_low_bound node_has_high_bound node_is_bounded emit_jump_if_reachable emit_case_nodes get_frame_size assign_stack_local put_var_into_stack fixup_var_refs fixup_var_refs_insns fixup_var_refs_1 fixup_memory_subreg walk_fixup_memory_subreg fixup_stack_1 optimize_bit_field max_parm_reg_num get_first_nonparm_insn parm_stack_loc assign_parms get_structure_value_addr uninitialized_vars_warning setjmp_protect expand_function_start expand_function_end
time in parse: 0.000000
time in integration: 0.000000
time in jump: 0.000000
time in cse: 0.000000
time in loop: 0.000000
time in cse2: 0.000000
time in flow: 0.000000
time in combine: 0.000000
time in sched: 0.000000
time in local-alloc: 0.000000
time in global-alloc: 0.000000
time in sched2: 0.000000
time in dbranch: 0.000000
time in shorten-branch: 0.000000
time in stack-reg: 0.000000
time in final: 0.000000
time in varconst: 0.000000
time in symout: 0.000000
time in dump: 0.000000
warning: partially supported sigprocmask() call...

sim: ** simulation statistics **
sim_num_insn              145043042 # total number of instructions committed
sim_num_refs               51386980 # total number of loads and stores committed
sim_num_loads              33904322 # total number of loads committed
sim_num_stores         17482658.0000 # total number of stores committed
sim_num_branches           23211008 # total number of branches committed
sim_elapsed_time                152 # total simulation time in seconds
sim_inst_rate           954230.5395 # simulation speed (in insts/sec)
sim_total_insn            168116452 # total number of instructions executed
sim_total_refs             59202772 # total number of loads and stores executed
sim_total_loads            40436244 # total number of loads executed
sim_total_stores       18766528.0000 # total number of stores executed
sim_total_branches         26906733 # total number of branches executed
sim_cycle                 150565821 # total simulation time in cycles
sim_IPC                      0.9633 # instructions per cycle
sim_CPI                      1.0381 # cycles per instruction
sim_exec_BW                  1.1166 # total instructions (mis-spec + committed) per cycle
sim_IPB                      6.2489 # instruction per branch
IFQ_count                 298633787 # cumulative IFQ occupancy
IFQ_fcount                 66698770 # cumulative IFQ full count
ifq_occupancy                1.9834 # avg IFQ occupancy (insn's)
ifq_rate                     1.1166 # avg IFQ dispatch rate (insn/cycle)
ifq_latency                  1.7764 # avg IFQ occupant latency (cycle's)
ifq_full                     0.4430 # fraction of time (cycle's) IFQ was full
RUU_count                1156337031 # cumulative RUU occupancy
RUU_fcount                 36443148 # cumulative RUU full count
ruu_occupancy                7.6799 # avg RUU occupancy (insn's)
ruu_rate                     1.1166 # avg RUU dispatch rate (insn/cycle)
ruu_latency                  6.8782 # avg RUU occupant latency (cycle's)
ruu_full                     0.2420 # fraction of time (cycle's) RUU was full
LSQ_count                 406426320 # cumulative LSQ occupancy
LSQ_fcount                 13265656 # cumulative LSQ full count
lsq_occupancy                2.6993 # avg LSQ occupancy (insn's)
lsq_rate                     1.1166 # avg LSQ dispatch rate (insn/cycle)
lsq_latency                  2.4175 # avg LSQ occupant latency (cycle's)
lsq_full                     0.0881 # fraction of time (cycle's) LSQ was full
sim_slip                 1601087281 # total number of slip cycles
avg_sim_slip                11.0387 # the average slip between issue and retirement
bpred_bimod.lookups        28190580 # total number of bpred lookups
bpred_bimod.updates        23211008 # total number of updates
bpred_bimod.addr_hits      20044387 # total number of address-predicted hits
bpred_bimod.dir_hits       20737414 # total number of direction-predicted hits (includes addr-hits)
bpred_bimod.misses          2473594 # total number of misses
bpred_bimod.jr_hits         1708662 # total number of address-predicted hits for JR's
bpred_bimod.jr_seen         2178506 # total number of JR's seen
bpred_bimod.jr_non_ras_hits.PP       247371 # total number of address-predicted hits for non-RAS JR's
bpred_bimod.jr_non_ras_seen.PP       659018 # total number of non-RAS JR's seen
bpred_bimod.bpred_addr_rate    0.8636 # branch address-prediction rate (i.e., addr-hits/updates)
bpred_bimod.bpred_dir_rate    0.8934 # branch direction-prediction rate (i.e., all-hits/updates)
bpred_bimod.bpred_jr_rate    0.7843 # JR address-prediction rate (i.e., JR addr-hits/JRs seen)
bpred_bimod.bpred_jr_non_ras_rate.PP    0.3754 # non-RAS JR addr-pred rate (ie, non-RAS JR hits/JRs seen)
bpred_bimod.retstack_pushes      1903166 # total number of address pushed onto ret-addr stack
bpred_bimod.retstack_pops      1750214 # total number of address popped off of ret-addr stack
bpred_bimod.used_ras.PP      1519488 # total number of RAS predictions used
bpred_bimod.ras_hits.PP      1461291 # total number of RAS hits
bpred_bimod.ras_rate.PP    0.9617 # RAS prediction rate (i.e., RAS hits/used RAS)
il1.accesses              181316931 # total number of accesses
il1.hits                  176055665 # total number of hits
il1.misses                  5261266 # total number of misses
il1.replacements            5260754 # total number of replacements
il1.writebacks                    0 # total number of writebacks
il1.invalidations                 0 # total number of invalidations
il1.miss_rate                0.0290 # miss rate (i.e., misses/ref)
il1.repl_rate                0.0290 # replacement rate (i.e., repls/ref)
il1.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
il1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
dl1.accesses               53704863 # total number of accesses
dl1.hits                   52357139 # total number of hits
dl1.misses                  1347724 # total number of misses
dl1.replacements            1347212 # total number of replacements
dl1.writebacks               422891 # total number of writebacks
dl1.invalidations                 0 # total number of invalidations
dl1.miss_rate                0.0251 # miss rate (i.e., misses/ref)
dl1.repl_rate                0.0251 # replacement rate (i.e., repls/ref)
dl1.wb_rate                  0.0079 # writeback rate (i.e., wrbks/ref)
dl1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
ul2.accesses                7031881 # total number of accesses
ul2.hits                    5622192 # total number of hits
ul2.misses                  1409689 # total number of misses
ul2.replacements            1409177 # total number of replacements
ul2.writebacks               184057 # total number of writebacks
ul2.invalidations                 0 # total number of invalidations
ul2.miss_rate                0.2005 # miss rate (i.e., misses/ref)
ul2.repl_rate                0.2004 # replacement rate (i.e., repls/ref)
ul2.wb_rate                  0.0262 # writeback rate (i.e., wrbks/ref)
ul2.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
itlb.accesses             181316931 # total number of accesses
itlb.hits                 181226491 # total number of hits
itlb.misses                   90440 # total number of misses
itlb.replacements             90376 # total number of replacements
itlb.writebacks                   0 # total number of writebacks
itlb.invalidations                0 # total number of invalidations
itlb.miss_rate               0.0005 # miss rate (i.e., misses/ref)
itlb.repl_rate               0.0005 # replacement rate (i.e., repls/ref)
itlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
itlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
dtlb.accesses              54202655 # total number of accesses
dtlb.hits                  54181612 # total number of hits
dtlb.misses                   21043 # total number of misses
dtlb.replacements             20915 # total number of replacements
dtlb.writebacks                   0 # total number of writebacks
dtlb.invalidations                0 # total number of invalidations
dtlb.miss_rate               0.0004 # miss rate (i.e., misses/ref)
dtlb.repl_rate               0.0004 # replacement rate (i.e., repls/ref)
dtlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
dtlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
rename_power           62931316.6474 # total power usage of rename unit
bpred_power            681028239.7736 # total power usage of bpred unit
window_power           331895162.8499 # total power usage of instruction window
lsq_power              145021985.7721 # total power usage of load/store queue
regfile_power          537892194.5047 # total power usage of arch. regfile
icache_power           372942767.1015 # total power usage of icache
dcache_power           916178905.7994 # total power usage of dcache
dcache2_power          271483014.4761 # total power usage of dcache2
alu_power              2851893632.2736 # total power usage of alu
falu_power             2150237259.0041 # total power usage of falu
resultbus_power        345931431.1634 # total power usage of resultbus
clock_power            3929387397.2449 # total power usage of clock
avg_rename_power             0.4180 # avg power usage of rename unit
avg_bpred_power              4.5231 # avg power usage of bpred unit
avg_window_power             2.2043 # avg power usage of instruction window
avg_lsq_power                0.9632 # avg power usage of lsq
avg_regfile_power            3.5725 # avg power usage of arch. regfile
avg_icache_power             2.4769 # avg power usage of icache
avg_dcache_power             6.0849 # avg power usage of dcache
avg_dcache2_power            1.8031 # avg power usage of dcache2
avg_alu_power               18.9412 # avg power usage of alu
avg_falu_power              14.2810 # avg power usage of falu
avg_resultbus_power          2.2975 # avg power usage of resultbus
avg_clock_power             26.0975 # avg power usage of clock
fetch_stage_power      1053971006.8750 # total power usage of fetch stage
dispatch_stage_power   62931316.6474 # total power usage of dispatch stage
issue_stage_power      4862404132.3345 # total power usage of issue stage
avg_fetch_power              7.0001 # average power of fetch unit per cycle
avg_dispatch_power           0.4180 # average power of dispatch unit per cycle
avg_issue_power             32.2942 # average power of issue unit per cycle
total_power            10446586047.6066 # total power per cycle
avg_total_power_cycle       69.3822 # average total power per cycle
avg_total_power_cycle_nofp_nod2      53.2981 # average total power per cycle
avg_total_power_insn        62.1390 # average total power per insn
avg_total_power_insn_nofp_nod2      47.7340 # average total power per insn
rename_power_cc1       24792797.7423 # total power usage of rename unit_cc1
bpred_power_cc1        91636778.9982 # total power usage of bpred unit_cc1
window_power_cc1       172339697.0148 # total power usage of instruction window_cc1
lsq_power_cc1          20557716.6554 # total power usage of lsq_cc1
regfile_power_cc1      223393272.8856 # total power usage of arch. regfile_cc1
icache_power_cc1       161607550.7559 # total power usage of icache_cc1
dcache_power_cc1       232637296.9352 # total power usage of dcache_cc1
dcache2_power_cc1      11800842.4282 # total power usage of dcache2_cc1
alu_power_cc1          307314210.4747 # total power usage of alu_cc1
resultbus_power_cc1    129310379.3422 # total power usage of resultbus_cc1
clock_power_cc1        858991353.2283 # total power usage of clock_cc1
avg_rename_power_cc1         0.1647 # avg power usage of rename unit_cc1
avg_bpred_power_cc1          0.6086 # avg power usage of bpred unit_cc1
avg_window_power_cc1         1.1446 # avg power usage of instruction window_cc1
avg_lsq_power_cc1            0.1365 # avg power usage of lsq_cc1
avg_regfile_power_cc1        1.4837 # avg power usage of arch. regfile_cc1
avg_icache_power_cc1         1.0733 # avg power usage of icache_cc1
avg_dcache_power_cc1         1.5451 # avg power usage of dcache_cc1
avg_dcache2_power_cc1        0.0784 # avg power usage of dcache2_cc1
avg_alu_power_cc1            2.0411 # avg power usage of alu_cc1
avg_resultbus_power_cc1       0.8588 # avg power usage of resultbus_cc1
avg_clock_power_cc1          5.7051 # avg power usage of clock_cc1
fetch_stage_power_cc1  253244329.7541 # total power usage of fetch stage_cc1
dispatch_stage_power_cc1 24792797.7423 # total power usage of dispatch stage_cc1
issue_stage_power_cc1  873960142.8505 # total power usage of issue stage_cc1
avg_fetch_power_cc1          1.6820 # average power of fetch unit per cycle_cc1
avg_dispatch_power_cc1       0.1647 # average power of dispatch unit per cycle_cc1
avg_issue_power_cc1          5.8045 # average power of issue unit per cycle_cc1
total_power_cycle_cc1  2234381896.4608 # total power per cycle_cc1
avg_total_power_cycle_cc1      14.8399 # average total power per cycle_cc1
avg_total_power_insn_cc1      13.2907 # average total power per insn_cc1
rename_power_cc2       17566718.6691 # total power usage of rename unit_cc2
bpred_power_cc2        52493161.4671 # total power usage of bpred unit_cc2
window_power_cc2       124124911.6273 # total power usage of instruction window_cc2
lsq_power_cc2          13572162.0958 # total power usage of lsq_cc2
regfile_power_cc2      54137608.0617 # total power usage of arch. regfile_cc2
icache_power_cc2       161607550.7559 # total power usage of icache_cc2
dcache_power_cc2       163394528.8770 # total power usage of dcache_cc2
dcache2_power_cc2      6339540.5451 # total power usage of dcache2_cc2
alu_power_cc2          183184429.3806 # total power usage of alu_cc2
resultbus_power_cc2    79364817.7339 # total power usage of resultbus_cc2
clock_power_cc2        531820866.7771 # total power usage of clock_cc2
avg_rename_power_cc2         0.1167 # avg power usage of rename unit_cc2
avg_bpred_power_cc2          0.3486 # avg power usage of bpred unit_cc2
avg_window_power_cc2         0.8244 # avg power usage of instruction window_cc2
avg_lsq_power_cc2            0.0901 # avg power usage of instruction lsq_cc2
avg_regfile_power_cc2        0.3596 # avg power usage of arch. regfile_cc2
avg_icache_power_cc2         1.0733 # avg power usage of icache_cc2
avg_dcache_power_cc2         1.0852 # avg power usage of dcache_cc2
avg_dcache2_power_cc2        0.0421 # avg power usage of dcache2_cc2
avg_alu_power_cc2            1.2166 # avg power usage of alu_cc2
avg_resultbus_power_cc2       0.5271 # avg power usage of resultbus_cc2
avg_clock_power_cc2          3.5321 # avg power usage of clock_cc2
fetch_stage_power_cc2  214100712.2230 # total power usage of fetch stage_cc2
dispatch_stage_power_cc2 17566718.6691 # total power usage of dispatch stage_cc2
issue_stage_power_cc2  569980390.2597 # total power usage of issue stage_cc2
avg_fetch_power_cc2          1.4220 # average power of fetch unit per cycle_cc2
avg_dispatch_power_cc2       0.1167 # average power of dispatch unit per cycle_cc2
avg_issue_power_cc2          3.7856 # average power of issue unit per cycle_cc2
total_power_cycle_cc2  1387606295.9906 # total power per cycle_cc2
avg_total_power_cycle_cc2       9.2159 # average total power per cycle_cc2
avg_total_power_insn_cc2       8.2538 # average total power per insn_cc2
rename_power_cc3       21380570.5678 # total power usage of rename unit_cc3
bpred_power_cc3        111462028.0242 # total power usage of bpred unit_cc3
window_power_cc3       138712921.0855 # total power usage of instruction window_cc3
lsq_power_cc3          26016496.3576 # total power usage of lsq_cc3
regfile_power_cc3      81654753.3677 # total power usage of arch. regfile_cc3
icache_power_cc3       182741072.2144 # total power usage of icache_cc3
dcache_power_cc3       232369066.5320 # total power usage of dcache_cc3
dcache2_power_cc3      32311293.4365 # total power usage of dcache2_cc3
alu_power_cc3          437642370.9166 # total power usage of alu_cc3
resultbus_power_cc3    98240346.7484 # total power usage of resultbus_cc3
clock_power_cc3        834106347.3907 # total power usage of clock_cc3
avg_rename_power_cc3         0.1420 # avg power usage of rename unit_cc3
avg_bpred_power_cc3          0.7403 # avg power usage of bpred unit_cc3
avg_window_power_cc3         0.9213 # avg power usage of instruction window_cc3
avg_lsq_power_cc3            0.1728 # avg power usage of instruction lsq_cc3
avg_regfile_power_cc3        0.5423 # avg power usage of arch. regfile_cc3
avg_icache_power_cc3         1.2137 # avg power usage of icache_cc3
avg_dcache_power_cc3         1.5433 # avg power usage of dcache_cc3
avg_dcache2_power_cc3        0.2146 # avg power usage of dcache2_cc3
avg_alu_power_cc3            2.9067 # avg power usage of alu_cc3
avg_resultbus_power_cc3       0.6525 # avg power usage of resultbus_cc3
avg_clock_power_cc3          5.5398 # avg power usage of clock_cc3
fetch_stage_power_cc3  294203100.2386 # total power usage of fetch stage_cc3
dispatch_stage_power_cc3 21380570.5678 # total power usage of dispatch stage_cc3
issue_stage_power_cc3  965292495.0766 # total power usage of issue stage_cc3
avg_fetch_power_cc3          1.9540 # average power of fetch unit per cycle_cc3
avg_dispatch_power_cc3       0.1420 # average power of dispatch unit per cycle_cc3
avg_issue_power_cc3          6.4111 # average power of issue unit per cycle_cc3
total_power_cycle_cc3  2196637266.6415 # total power per cycle_cc3
avg_total_power_cycle_cc3      14.5892 # average total power per cycle_cc3
avg_total_power_insn_cc3      13.0662 # average total power per insn_cc3
total_rename_access       168116452 # total number accesses of rename unit
total_bpred_access         23211008 # total number accesses of bpred unit
total_window_access       600028410 # total number accesses of instruction window
total_lsq_access           55066214 # total number accesses of load/store queue
total_regfile_access      214392898 # total number accesses of arch. regfile
total_icache_access       181542818 # total number accesses of icache
total_dcache_access        53704863 # total number accesses of dcache
total_dcache2_access        7031881 # total number accesses of dcache2
total_alu_access          157035809 # total number accesses of alu
total_resultbus_access    168223169 # total number accesses of resultbus
avg_rename_access            1.1166 # avg number accesses of rename unit
avg_bpred_access             0.1542 # avg number accesses of bpred unit
avg_window_access            3.9852 # avg number accesses of instruction window
avg_lsq_access               0.3657 # avg number accesses of lsq
avg_regfile_access           1.4239 # avg number accesses of arch. regfile
avg_icache_access            1.2057 # avg number accesses of icache
avg_dcache_access            0.3567 # avg number accesses of dcache
avg_dcache2_access           0.0467 # avg number accesses of dcache2
avg_alu_access               1.0430 # avg number accesses of alu
avg_resultbus_access         1.1173 # avg number accesses of resultbus
max_rename_access                 4 # max number accesses of rename unit
max_bpred_access                  4 # max number accesses of bpred unit
max_window_access                17 # max number accesses of instruction window
max_lsq_access                    6 # max number accesses of load/store queue
max_regfile_access               12 # max number accesses of arch. regfile
max_icache_access                 4 # max number accesses of icache
max_dcache_access                 4 # max number accesses of dcache
max_dcache2_access                6 # max number accesses of dcache2
max_alu_access                    4 # max number accesses of alu
max_resultbus_access              9 # max number accesses of resultbus
max_cycle_power_cc1         47.4047 # maximum cycle power usage of cc1
max_cycle_power_cc2         31.9554 # maximum cycle power usage of cc2
max_cycle_power_cc3         35.4361 # maximum cycle power usage of cc3
sim_invalid_addrs                 0 # total non-speculative bogus addresses seen (debug var)
ld_text_base           0x0120000000 # program text (code) segment base
ld_text_size                1564672 # program text (code) size in bytes
ld_data_base           0x0140000000 # program initialized data segment base
ld_data_size                 277104 # program init'ed `.data' and uninit'ed `.bss' size in bytes
ld_stack_base          0x011ff9b000 # program stack segment base (highest address in stack)
ld_stack_size                 16384 # program initial stack size
ld_prog_entry          0x0120025f70 # program entry point (initial PC)
ld_environ_base        0x011ff97000 # program environment base address address
ld_target_big_endian              0 # target executable endian-ness, non-zero if big endian
mem.page_count                  390 # total number of pages allocated
mem.page_mem                  3120k # total size of memory pages allocated
mem.ptab_misses              791033 # total first level page table misses
mem.ptab_accesses        1104522227 # total page table accesses
mem.ptab_miss_rate           0.0007 # first level page table miss rate

