data0$Cores = as.numeric(data$Cores)
data1 = sqldf("SELECT Stage, Epsilon, Cores, avg(Time) AS Time FROM data0 GROUP BY 1, 2, 3")
if (!require("pacman")) install.packages("pacman")
pacman::p_load(ggplot2, data.table, foreach, sqldf, tidyr, stringr, dplyr)
options(digits = 15)
source('analyzeNohupLog.R')
PHD_HOME = Sys.getenv(c("PHD_HOME"))
PHD_PATH = params$phd_path
FILENAME = params$filename
EXTENSION = params$extension
runRandomTesterRunnerETL(PHD_HOME, PHD_PATH,FILENAME,EXTENSION)
data0 = read.csv(paste0(PHD_HOME,PHD_PATH,FILENAME,".csv"))
data1 = sqldf("SELECT Stage, Epsilon, Cores, avg(Time) AS Time FROM data0 GROUP BY 1, 2, 3")
View(data0)
View(data1)
temp_title = paste("(radius of disk in mts) in Berlin dataset.")
title = substitute(paste("Execution time by ", epsilon) ~ temp_title, list(temp_title = temp_title))
g = ggplot(data=data1, aes(x=factor(Epsilon), y=Time, fill=Cores)) +
geom_bar(stat="identity", position=position_dodge(width = 0.75),width = 0.75) +
labs(title=title, y="Time(s)", x=expression(paste(epsilon,"(mts)"))) +
facet_wrap(~Stage)
plot(g)
if (!require("pacman")) install.packages("pacman")
pacman::p_load(ggplot2, data.table, foreach, sqldf, tidyr, stringr, dplyr)
options(digits = 15)
source('analyzeNohupLog.R')
PHD_HOME = Sys.getenv(c("PHD_HOME"))
PHD_PATH = params$phd_path
FILENAME = params$filename
EXTENSION = params$extension
runRandomTesterRunnerETL(PHD_HOME, PHD_PATH,FILENAME,EXTENSION)
data0 = read.csv(paste0(PHD_HOME,PHD_PATH,FILENAME,".csv"))
data1 = sqldf("SELECT Stage, Epsilon, Cores, avg(Time) AS Time FROM data0 GROUP BY 1, 2, 3")
data1$Cores = factor(data1$Cores)
temp_title = paste("(radius of disk in mts) in Berlin dataset.")
title = substitute(paste("Execution time by ", epsilon) ~ temp_title, list(temp_title = temp_title))
g = ggplot(data=data1, aes(x=factor(Epsilon), y=Time, fill=Cores)) +
geom_bar(stat="identity", position=position_dodge(width = 0.75),width = 0.75) +
labs(title=title, y="Time(s)", x=expression(paste(epsilon,"(mts)"))) +
facet_wrap(~Stage)
plot(g)
if (!require("pacman")) install.packages("pacman")
pacman::p_load(ggplot2, data.table, foreach, sqldf, tidyr, stringr, dplyr)
pacman::p_load(ggplot2, data.table, foreach, sqldf, tidyr, stringr, dplyr)
options(digits = 15)
source('analyzeNohupLog.R')
PHD_HOME = Sys.getenv(c("PHD_HOME"))
PHD_PATH = params$phd_path
FILENAME = params$filename
EXTENSION = params$extension
if (!require("pacman")) install.packages("pacman")
pacman::p_load(ggplot2, data.table, foreach, sqldf, tidyr, stringr, dplyr)
pacman::p_load(ggplot2, data.table, foreach, sqldf, tidyr, stringr, dplyr)
options(digits = 15)
source('analyzeNohupLog.R')
PHD_HOME = Sys.getenv(c("PHD_HOME"))
PHD_PATH = params$phd_path
FILENAME = params$filename
EXTENSION = params$extension
url = paste0(PHD_HOME,PHD_PATH,FILENAME,".",EXTENSION)
cores_per_node = 7
lines = readLines(url)
data = c()
for(line in lines){
if(grepl("\\> \\d", line, perl = T)){
data = c(data, line)
}
}
data
url = paste0(PHD_HOME,PHD_PATH,FILENAME,".",EXTENSION)
lines = readLines(url)
data = c()
stages = c()
for(line in lines){
if(grepl("B*0K,", line)){
data = c(data, line)
}
if(grepl("\\> \\d", line, perl = T)){
stages = c(stages, line)
}
}
data = str_split_fixed(data, ">", 2)
data = as.data.frame(str_split_fixed(data[,2], ",", 9))
View(data)
names(data) = c("Dataset", "Epsilon", "Cores", "Mu", "Time", "NPairs", "NCenters", "NDisks", "NMaximals")
if (!require("pacman")) install.packages("pacman")
pacman::p_load(ggplot2, data.table, foreach, sqldf, tidyr, stringr, dplyr)
source('analyzeNohupLog.R')
PHD_HOME = Sys.getenv(c("PHD_HOME"))
PHD_PATH = params$phd_path
FILENAME = params$filename
EXTENSION = params$extension
runLogETL(PHD_HOME, PHD_PATH,FILENAME,EXTENSION)
data0 = read.csv(paste0(PHD_HOME,PHD_PATH,FILENAME,".csv"))
data = data0[, c(1, 2, 3, 5)]
names(data) = c("Dataset", "Epsilon", "Cores", "Time")
dataLevels = str_sub(str_trim(data$Dataset), 2, -2)
dataLevels = paste0(sort(as.numeric(levels(factor(dataLevels)))),"K")
data$Dataset = str_sub(str_trim(data$Dataset), 2)
data$Dataset = factor(data$Dataset, levels = dataLevels)
data$Time = as.numeric(data$Time)
data$Epsilon = as.numeric(data$Epsilon)
data$Cores = as.numeric(data$Cores)
data2 = sqldf("SELECT Dataset, Epsilon, Cores, avg(Time) AS Time FROM data GROUP BY 1, 2, 3")
View(data2)
View(data0)
if (!require("pacman")) install.packages("pacman")
pacman::p_load(ggplot2, data.table, foreach, sqldf, tidyr, stringr, dplyr)
source('analyzeNohupLog.R')
PHD_HOME = Sys.getenv(c("PHD_HOME"))
PHD_PATH = params$phd_path
FILENAME = params$filename
EXTENSION = params$extension
runLogETL(PHD_HOME, PHD_PATH,FILENAME,EXTENSION)
data0 = read.csv(paste0(PHD_HOME,PHD_PATH,FILENAME,".csv"))
data = data0[, c(1, 2, 3, 5)]
names(data) = c("Dataset", "Epsilon", "Cores", "Time")
dataLevels = str_sub(str_trim(data$Dataset), 2, -2)
dataLevels = paste0(sort(as.numeric(levels(factor(dataLevels)))),"K")
data$Dataset = str_sub(str_trim(data$Dataset), 2)
data$Dataset = factor(data$Dataset, levels = dataLevels)
data$Time = as.numeric(data$Time)
data$Epsilon = as.numeric(data$Epsilon)
data$Cores = as.numeric(data$Cores)
data2 = sqldf("SELECT Dataset, Epsilon, Cores, avg(Time) AS Time FROM data GROUP BY 1, 2, 3")
data
data[data$Cores == 21]
data[data$Cores == 21, ]
data[data$Cores == 21, c('Cores')]
data[data$Cores == 21, c('Cores')] = 6
data
if (!require("pacman")) install.packages("pacman")
pacman::p_load(ggplot2, data.table, foreach, sqldf, tidyr, stringr, dplyr)
source('analyzeNohupLog.R')
PHD_HOME = Sys.getenv(c("PHD_HOME"))
PHD_PATH = params$phd_path
FILENAME = params$filename
EXTENSION = params$extension
runLogETL(PHD_HOME, PHD_PATH,FILENAME,EXTENSION)
data0 = read.csv(paste0(PHD_HOME,PHD_PATH,FILENAME,".csv"))
data = data0[, c(1, 2, 3, 5)]
names(data) = c("Dataset", "Epsilon", "Cores", "Time")
dataLevels = str_sub(str_trim(data$Dataset), 2, -2)
dataLevels = paste0(sort(as.numeric(levels(factor(dataLevels)))),"K")
data$Dataset = str_sub(str_trim(data$Dataset), 2)
data$Dataset = factor(data$Dataset, levels = dataLevels)
data$Time = as.numeric(data$Time)
data$Epsilon = as.numeric(data$Epsilon)
data$Cores = as.numeric(data$Cores)
data[data$Cores == 21, c('Cores')] = 6
data[data$Cores == 28, c('Cores')] = 8
data2 = sqldf("SELECT Dataset, Epsilon, Cores, avg(Time) AS Time FROM data GROUP BY 1, 2, 3")
temp_title = paste("(radius of disk in mts) in Berlin dataset.")
title = substitute(paste("Execution time by ", epsilon) ~ temp_title, list(temp_title = temp_title))
g = ggplot(data=data1, aes(x=factor(Epsilon), y=Time, fill=Cores)) +
geom_bar(stat="identity", position=position_dodge(width = 0.75),width = 0.75) +
labs(title=title, y="Time(s)", x=expression(paste(epsilon,"(mts)"))) +
facet_wrap(~Stage)
temp_title = paste("(radius of disk in mts) in Berlin dataset.")
title = substitute(paste("Execution time by ", epsilon) ~ temp_title, list(temp_title = temp_title))
g = ggplot(data=data1, aes(x=factor(Epsilon), y=Time, fill=Cores)) +
geom_bar(stat="identity", position=position_dodge(width = 0.75),width = 0.75) +
labs(title=title, y="Time(s)", x=expression(paste(epsilon,"(mts)"))) +
facet_wrap(~Stage)
if (!require("pacman")) install.packages("pacman")
pacman::p_load(ggplot2, data.table, foreach, sqldf, tidyr, stringr, dplyr)
source('analyzeNohupLog.R')
PHD_HOME = Sys.getenv(c("PHD_HOME"))
PHD_PATH = params$phd_path
FILENAME = params$filename
EXTENSION = params$extension
runLogETL(PHD_HOME, PHD_PATH,FILENAME,EXTENSION)
data0 = read.csv(paste0(PHD_HOME,PHD_PATH,FILENAME,".csv"))
data = data0[, c(1, 2, 3, 5)]
names(data) = c("Dataset", "Epsilon", "Cores", "Time")
dataLevels = str_sub(str_trim(data$Dataset), 2, -2)
dataLevels = paste0(sort(as.numeric(levels(factor(dataLevels)))),"K")
data$Dataset = str_sub(str_trim(data$Dataset), 2)
data$Dataset = factor(data$Dataset, levels = dataLevels)
data$Time = as.numeric(data$Time)
data$Epsilon = as.numeric(data$Epsilon)
data$Cores = as.numeric(data$Cores)
data[data$Cores == 21, c('Cores')] = 6
data[data$Cores == 28, c('Cores')] = 8
data1 = sqldf("SELECT Dataset, Epsilon, Cores, avg(Time) AS Time FROM data GROUP BY 1, 2, 3")
temp_title = paste("(radius of disk in mts) in Berlin dataset.")
title = substitute(paste("Execution time by ", epsilon) ~ temp_title, list(temp_title = temp_title))
g = ggplot(data=data1, aes(x=factor(Epsilon), y=Time, fill=Cores)) +
geom_bar(stat="identity", position=position_dodge(width = 0.75),width = 0.75) +
labs(title=title, y="Time(s)", x=expression(paste(epsilon,"(mts)"))) +
facet_wrap(~Stage)
plot(g)
temp_title = paste("(radius of disk in mts) in Berlin dataset.")
title = substitute(paste("Execution time by ", epsilon) ~ temp_title, list(temp_title = temp_title))
g = ggplot(data=data1, aes(x=factor(Epsilon), y=Time, fill=Dataset)) +
geom_bar(stat="identity", position=position_dodge(width = 0.75),width = 0.75) +
labs(title=title, y="Time(s)", x=expression(paste(epsilon,"(mts)")))
plot(g)
View(data1)
data[data$Dataset == 'B60K' & data$Epsilon == 50,]
data[data$Dataset == 'B60K' && data$Epsilon == 50,]
data0[data0$Dataset == 'B60K' && data0$Epsilon == 50,]
data0[data0$Dataset == 'B60K' & data0$Epsilon == 50,]
data0[data0$Dataset == 'B60K' & data0$Epsilon == 50, 'Time']
mean(data0[data0$Dataset == 'B60K' & data0$Epsilon == 50, 'Time'])
temp = data0[data0$Dataset == 'B60K' & data0$Epsilon == 50, 'Time']
temp
temp < 1000
temp[temp < 1000]
mean(temp[temp < 1000])
data0[15,]
data0[15, 'Time'] = 110.25
data0[data0$Dataset == 'B60K' & data0$Epsilon == 50, 'Time']
data0[data0$Dataset == 'B60K' & data0$Epsilon == 50, ]
if (!require("pacman")) install.packages("pacman")
pacman::p_load(ggplot2, data.table, foreach, sqldf, tidyr, stringr, dplyr)
source('analyzeNohupLog.R')
PHD_HOME = Sys.getenv(c("PHD_HOME"))
PHD_PATH = params$phd_path
FILENAME = params$filename
EXTENSION = params$extension
runLogETL(PHD_HOME, PHD_PATH,FILENAME,EXTENSION)
data0 = read.csv(paste0(PHD_HOME,PHD_PATH,FILENAME,".csv"))
data = data0[, c(1, 2, 3, 5)]
names(data) = c("Dataset", "Epsilon", "Cores", "Time")
dataLevels = str_sub(str_trim(data$Dataset), 2, -2)
dataLevels = paste0(sort(as.numeric(levels(factor(dataLevels)))),"K")
data$Dataset = str_sub(str_trim(data$Dataset), 2)
data$Dataset = factor(data$Dataset, levels = dataLevels)
data$Time = as.numeric(data$Time)
data$Epsilon = as.numeric(data$Epsilon)
data$Cores = as.numeric(data$Cores)
data[data$Cores == 21, c('Cores')] = 6
data[data$Cores == 28, c('Cores')] = 8
data1 = sqldf("SELECT Dataset, Epsilon, Cores, avg(Time) AS Time FROM data GROUP BY 1, 2, 3")
temp_title = paste("(radius of disk in mts) in Berlin dataset.")
title = substitute(paste("Execution time by ", epsilon) ~ temp_title, list(temp_title = temp_title))
g = ggplot(data=data1, aes(x=factor(Epsilon), y=Time, fill=Dataset)) +
geom_bar(stat="identity", position=position_dodge(width = 0.75),width = 0.75) +
labs(title=title, y="Time(s)", x=expression(paste(epsilon,"(mts)")))
plot(g)
f = paste0(PHD_HOME,PHD_PATH,FILENAME,".txt")
lines = readLines(f)
output = paste0(PHD_HOME,PHD_PATH,"stages.dat")
cat("Dataset,Cores,Epsilon,Mu,Stages,Time", file=output, sep = "\n")
for(line in lines){
stage = "00.Setting mu="
if(grepl(stage, line)){
temp = str_split_fixed(line, ",", 4)
mu = str_split_fixed(temp[1], "=", 2)[,2]
mu = as.numeric(str_trim(mu))
epsilon = str_split_fixed(temp[2], "=", 2)[,2]
epsilon = as.numeric(str_trim(epsilon))
cores = str_split_fixed(temp[3], "=", 2)[,2]
cores = as.numeric(str_trim(cores))
dataset = str_split_fixed(temp[4], "=", 2)[,2]
dataset = str_sub(str_trim(dataset), 2)
}
stage = "01.Indexing points"
if(grepl(stage, line)){
time = str_split_fixed(line, "\\[", 2)
time = str_split_fixed(time[2], "s\\]", 2)[,1]
time = as.numeric(str_trim(time))
text = paste0(dataset,",",cores,",",epsilon,",",mu,",",stage,",",time,"\n")
cat(text, file=output, append = T)
}
stage = "02.Getting pairs"
if(grepl(stage, line)){
time = str_split_fixed(line, "\\[", 2)
time = str_split_fixed(time[2], "s\\]", 2)[,1]
time = as.numeric(str_trim(time))
text = paste0(dataset,",",cores,",",epsilon,",",mu,",",stage,",",time,"\n")
cat(text, file=output, append = T)
}
stage = "03.Computing centers"
if(grepl(stage, line)){
time = str_split_fixed(line, "\\[", 2)
time = str_split_fixed(time[2], "s\\]", 2)[,1]
time = as.numeric(str_trim(time))
text = paste0(dataset,",",cores,",",epsilon,",",mu,",",stage,",",time,"\n")
cat(text, file=output, append = T)
}
stage = "04.Indexing centers"
if(grepl(stage, line)){
time = str_split_fixed(line, "\\[", 2)
time = str_split_fixed(time[2], "s\\]", 2)[,1]
time = as.numeric(str_trim(time))
text = paste0(dataset,",",cores,",",epsilon,",",mu,",",stage,",",time,"\n")
cat(text, file=output, append = T)
}
stage = "05.Getting disks"
if(grepl(stage, line)){
time = str_split_fixed(line, "\\[", 2)
time = str_split_fixed(time[2], "s\\]", 2)[,1]
time = as.numeric(str_trim(time))
text = paste0(dataset,",",cores,",",epsilon,",",mu,",",stage,",",time,"\n")
cat(text, file=output, append = T)
}
stage = "06.Filtering less-than-mu disks"
if(grepl(stage, line)){
time = str_split_fixed(line, "\\[", 2)
time = str_split_fixed(time[2], "s\\]", 2)[,1]
time = as.numeric(str_trim(time))
text = paste0(dataset,",",cores,",",epsilon,",",mu,",",stage,",",time,"\n")
cat(text, file=output, append = T)
}
stage = "07.Prunning duplicate candidates"
if(grepl(stage, line)){
time = str_split_fixed(line, "\\[", 2)
time = str_split_fixed(time[2], "s\\]", 2)[,1]
time = as.numeric(str_trim(time))
text = paste0(dataset,",",cores,",",epsilon,",",mu,",",stage,",",time,"\n")
cat(text, file=output, append = T)
}
stage = " 08.Indexing candidates"
if(grepl(stage, line)){
time = str_split_fixed(line, "\\[", 2)
time = str_split_fixed(time[2], "s\\]", 2)[,1]
time = as.numeric(str_trim(time))
text = paste0(dataset,",",cores,",",epsilon,",",mu,",",stage,",",time,"\n")
cat(text, file=output, append = T)
}
stage = "09.Getting expansions"
if(grepl(stage, line)){
time = str_split_fixed(line, "\\[", 2)
time = str_split_fixed(time[2], "s\\]", 2)[,1]
time = as.numeric(str_trim(time))
text = paste0(dataset,",",cores,",",epsilon,",",mu,",",stage,",",time,"\n")
cat(text, file=output, append = T)
}
stage = "10.Finding maximal disks"
if(grepl(stage, line)){
time = str_split_fixed(line, "\\[", 2)
time = str_split_fixed(time[2], "s\\]", 2)[,1]
time = as.numeric(str_trim(time))
text = paste0(dataset,",",cores,",",epsilon,",",mu,",",stage,",",time,"\n")
cat(text, file=output, append = T)
}
stage = "11.Prunning duplicates"
if(grepl(stage, line)){
stage = "11.Prunning duplicates and subsets"
time = str_split_fixed(line, "\\[", 2)
time = str_split_fixed(time[2], "s\\]", 2)[,1]
time = as.numeric(str_trim(time))
text = paste0(dataset,",",cores,",",epsilon,",",mu,",",stage,",",time,"\n")
cat(text, file=output, append = T)
}
}
stages = read.csv(output)
datasetLevels = str_sub(str_trim(stages$Dataset), 1, -2)
datasetLevels = paste0(sort(as.numeric(levels(factor(datasetLevels)))),"K")
stages$Dataset = str_trim(stages$Dataset)
stages$Dataset = factor(stages$Dataset, levels = datasetLevels)
stages = sqldf("SELECT Dataset, Cores, Epsilon, Stages, AVG(Time) AS Time FROM stages GROUP BY Dataset, Cores, Epsilon, Stages")
temp_title = paste("(radius of disk in mts) in Berlin dataset.")
title = substitute(paste("Execution time by stages and ", epsilon) ~ temp_title, list(temp_title = temp_title))
g = ggplot(data=stages, aes(x=factor(Epsilon), y=Time, fill=Dataset)) +
geom_bar(stat="identity", position=position_dodge(width = 0.75), width = 0.75) +
labs(title=title, y="Time(s)", x=expression(paste(epsilon,"(mts)"))) +
facet_wrap(~Stages)
plot(g)
f = paste0(PHD_HOME,PHD_PATH,FILENAME,".txt")
lines = readLines(f)
output = paste0(PHD_HOME,PHD_PATH,"stages.dat")
cat("Dataset,Cores,Epsilon,Mu,Stages,Time", file=output, sep = "\n")
for(line in lines){
stage = "00.Setting mu="
if(grepl(stage, line)){
temp = str_split_fixed(line, ",", 4)
mu = str_split_fixed(temp[1], "=", 2)[,2]
mu = as.numeric(str_trim(mu))
epsilon = str_split_fixed(temp[2], "=", 2)[,2]
epsilon = as.numeric(str_trim(epsilon))
cores = str_split_fixed(temp[3], "=", 2)[,2]
cores = as.numeric(str_trim(cores))
dataset = str_split_fixed(temp[4], "=", 2)[,2]
dataset = str_sub(str_trim(dataset), 2)
}
stage = "01.Indexing points"
if(grepl(stage, line)){
time = str_split_fixed(line, "\\[", 2)
time = str_split_fixed(time[2], "s\\]", 2)[,1]
time = as.numeric(str_trim(time))
text = paste0(dataset,",",cores,",",epsilon,",",mu,",",stage,",",time,"\n")
cat(text, file=output, append = T)
}
stage = "02.Getting pairs"
if(grepl(stage, line)){
time = str_split_fixed(line, "\\[", 2)
time = str_split_fixed(time[2], "s\\]", 2)[,1]
time = as.numeric(str_trim(time))
text = paste0(dataset,",",cores,",",epsilon,",",mu,",",stage,",",time,"\n")
cat(text, file=output, append = T)
}
stage = "03.Computing centers"
if(grepl(stage, line)){
time = str_split_fixed(line, "\\[", 2)
time = str_split_fixed(time[2], "s\\]", 2)[,1]
time = as.numeric(str_trim(time))
text = paste0(dataset,",",cores,",",epsilon,",",mu,",",stage,",",time,"\n")
cat(text, file=output, append = T)
}
stage = "04.Indexing centers"
if(grepl(stage, line)){
time = str_split_fixed(line, "\\[", 2)
time = str_split_fixed(time[2], "s\\]", 2)[,1]
time = as.numeric(str_trim(time))
text = paste0(dataset,",",cores,",",epsilon,",",mu,",",stage,",",time,"\n")
cat(text, file=output, append = T)
}
stage = "05.Getting disks"
if(grepl(stage, line)){
time = str_split_fixed(line, "\\[", 2)
time = str_split_fixed(time[2], "s\\]", 2)[,1]
time = as.numeric(str_trim(time))
text = paste0(dataset,",",cores,",",epsilon,",",mu,",",stage,",",time,"\n")
cat(text, file=output, append = T)
}
stage = "06.Filtering less-than-mu disks"
if(grepl(stage, line)){
time = str_split_fixed(line, "\\[", 2)
time = str_split_fixed(time[2], "s\\]", 2)[,1]
time = as.numeric(str_trim(time))
text = paste0(dataset,",",cores,",",epsilon,",",mu,",",stage,",",time,"\n")
cat(text, file=output, append = T)
}
stage = "07.Prunning duplicate candidates"
if(grepl(stage, line)){
time = str_split_fixed(line, "\\[", 2)
time = str_split_fixed(time[2], "s\\]", 2)[,1]
time = as.numeric(str_trim(time))
text = paste0(dataset,",",cores,",",epsilon,",",mu,",",stage,",",time,"\n")
cat(text, file=output, append = T)
}
stage = " 08.Indexing candidates"
if(grepl(stage, line)){
time = str_split_fixed(line, "\\[", 2)
time = str_split_fixed(time[2], "s\\]", 2)[,1]
time = as.numeric(str_trim(time))
text = paste0(dataset,",",cores,",",epsilon,",",mu,",",stage,",",time,"\n")
cat(text, file=output, append = T)
}
stage = "09.Getting expansions"
if(grepl(stage, line)){
time = str_split_fixed(line, "\\[", 2)
time = str_split_fixed(time[2], "s\\]", 2)[,1]
time = as.numeric(str_trim(time))
text = paste0(dataset,",",cores,",",epsilon,",",mu,",",stage,",",time,"\n")
cat(text, file=output, append = T)
}
stage = "10.Finding maximal disks"
if(grepl(stage, line)){
time = str_split_fixed(line, "\\[", 2)
time = str_split_fixed(time[2], "s\\]", 2)[,1]
time = as.numeric(str_trim(time))
text = paste0(dataset,",",cores,",",epsilon,",",mu,",",stage,",",time,"\n")
cat(text, file=output, append = T)
}
stage = "11.Prunning duplicates"
if(grepl(stage, line)){
stage = "11.Prunning duplicates and subsets"
time = str_split_fixed(line, "\\[", 2)
time = str_split_fixed(time[2], "s\\]", 2)[,1]
time = as.numeric(str_trim(time))
text = paste0(dataset,",",cores,",",epsilon,",",mu,",",stage,",",time,"\n")
cat(text, file=output, append = T)
}
}
stages = read.csv(output)
datasetLevels = str_sub(str_trim(stages$Dataset), 1, -2)
datasetLevels = paste0(sort(as.numeric(levels(factor(datasetLevels)))),"K")
stages$Dataset = str_trim(stages$Dataset)
stages$Dataset = factor(stages$Dataset, levels = datasetLevels)
stages = sqldf("SELECT Dataset, Cores, Epsilon, Stages, AVG(Time) AS Time FROM stages GROUP BY Dataset, Cores, Epsilon, Stages")
temp_title = paste("(radius of disk in mts) in Berlin dataset.")
title = substitute(paste("Execution time by stages and ", epsilon) ~ temp_title, list(temp_title = temp_title))
g = ggplot(data=stages, aes(x=factor(Epsilon), y=Time, fill=Dataset)) +
geom_bar(stat="identity", position=position_dodge(width = 0.75), width = 0.75) +
labs(title=title, y="Time(s)", x=expression(paste(epsilon,"(mts)"))) +
facet_wrap(~Stages)
plot(g)
if (!require("pacman")) install.packages("pacman")
pacman::p_load(ggplot2, data.table, foreach, sqldf, tidyr, stringr, dplyr)
source('analyzeNohupLog.R')
PHD_HOME = Sys.getenv(c("PHD_HOME"))
PHD_PATH = params$phd_path
FILENAME = params$filename
EXTENSION = params$extension
runLogETL(PHD_HOME, PHD_PATH,FILENAME,EXTENSION)
data0 = read.csv(paste0(PHD_HOME,PHD_PATH,FILENAME,".csv"))
data = data0[, c(1, 2, 3, 5)]
names(data) = c("Dataset", "Epsilon", "Cores", "Time")
dataLevels = str_sub(str_trim(data$Dataset), 2, -2)
dataLevels = paste0(sort(as.numeric(levels(factor(dataLevels)))),"K")
data$Dataset = str_sub(str_trim(data$Dataset), 2)
data$Dataset = factor(data$Dataset, levels = dataLevels)
data$Time = as.numeric(data$Time)
data$Epsilon = as.numeric(data$Epsilon)
data$Cores = as.numeric(data$Cores)
data[data$Cores == 21, c('Cores')] = 6
data[data$Cores == 28, c('Cores')] = 8
data1 = sqldf("SELECT Dataset, Epsilon, Cores, avg(Time) AS Time FROM data GROUP BY 1, 2, 3")
temp_title = paste("(radius of disk in mts) in Berlin dataset.")
title = substitute(paste("Execution time by ", epsilon) ~ temp_title, list(temp_title = temp_title))
g = ggplot(data=data1, aes(x=factor(Epsilon), y=Time, fill=Dataset)) +
geom_bar(stat="identity", position=position_dodge(width = 0.75),width = 0.75) +
labs(title=title, y="Time(s)", x=expression(paste(epsilon,"(mts)")))
plot(g)
library(readr)
stages <- read_csv("~/Documents/PhD/Code/Y3Q1/Scripts/Scaleup/stages.dat")
View(stages)
mean(31.807,31.908,32.098,32,399)
