View(times)
PHD_HOME = Sys.getenv(c("PHD_HOME"))
PATH = "Y3Q1/Scripts/Scaleup/"
source('~/Documents/PhD/Code/Y3Q1/Scripts/R/analyzeNohupLog.R')
source('~/Documents/PhD/Code/Y3Q1/Scripts/R/analyzeNohupLog.R')
lines = read.table(paste0(PHD_HOME,PHD_PATH,FILENAME,".txt"), header = F)
f = paste0(PHD_HOME,PHD_PATH,FILENAME,".txt")
f = paste0(PHD_HOME,PHD_PATH,FILENAME,".txt")
lines = read.table(f, header = F)
lines = readLines(f)
output = paste0(PHD_HOME,PHD_PATH,"Berlin_Stages.dat")
cat("Dataset,Cores,Epsilon,Mu,Stages,Time", file=output, sep = "\n")
for(line in lines){
stage = "00.Setting mu="
if(grepl(stage, line)){
temp = str_split_fixed(line, ",", 4)
mu = str_split_fixed(temp[1], "=", 2)[,2]
mu = as.numeric(str_trim(mu))
epsilon = str_split_fixed(temp[2], "=", 2)[,2]
epsilon = as.numeric(str_trim(epsilon))
cores = str_split_fixed(temp[3], "=", 2)[,2]
cores = as.numeric(str_trim(cores))
dataset = str_split_fixed(temp[4], "=", 2)[,2]
dataset = str_sub(str_trim(dataset), 2)
}
stage = "01.Indexing points"
if(grepl(stage, line)){
time = str_split_fixed(line, "\\[", 2)
time = str_split_fixed(time[2], "s\\]", 2)[,1]
time = as.numeric(str_trim(time))
text = paste0(dataset,",",cores,",",epsilon,",",mu,",",stage,",",time,"\n")
cat(text, file=output, append = T)
}
stage = "02.Getting pairs"
if(grepl(stage, line)){
time = str_split_fixed(line, "\\[", 2)
time = str_split_fixed(time[2], "s\\]", 2)[,1]
time = as.numeric(str_trim(time))
text = paste0(dataset,",",cores,",",epsilon,",",mu,",",stage,",",time,"\n")
cat(text, file=output, append = T)
}
stage = "03.Computing centers"
if(grepl(stage, line)){
time = str_split_fixed(line, "\\[", 2)
time = str_split_fixed(time[2], "s\\]", 2)[,1]
time = as.numeric(str_trim(time))
text = paste0(dataset,",",cores,",",epsilon,",",mu,",",stage,",",time,"\n")
cat(text, file=output, append = T)
}
stage = "04.Indexing centers"
if(grepl(stage, line)){
time = str_split_fixed(line, "\\[", 2)
time = str_split_fixed(time[2], "s\\]", 2)[,1]
time = as.numeric(str_trim(time))
text = paste0(dataset,",",cores,",",epsilon,",",mu,",",stage,",",time,"\n")
cat(text, file=output, append = T)
}
stage = "05.Getting disks"
if(grepl(stage, line)){
time = str_split_fixed(line, "\\[", 2)
time = str_split_fixed(time[2], "s\\]", 2)[,1]
time = as.numeric(str_trim(time))
text = paste0(dataset,",",cores,",",epsilon,",",mu,",",stage,",",time,"\n")
cat(text, file=output, append = T)
}
stage = "06.Filtering less-than-mu disks"
if(grepl(stage, line)){
time = str_split_fixed(line, "\\[", 2)
time = str_split_fixed(time[2], "s\\]", 2)[,1]
time = as.numeric(str_trim(time))
text = paste0(dataset,",",cores,",",epsilon,",",mu,",",stage,",",time,"\n")
cat(text, file=output, append = T)
}
stage = "07.Prunning duplicate candidates"
if(grepl(stage, line)){
time = str_split_fixed(line, "\\[", 2)
time = str_split_fixed(time[2], "s\\]", 2)[,1]
time = as.numeric(str_trim(time))
text = paste0(dataset,",",cores,",",epsilon,",",mu,",",stage,",",time,"\n")
cat(text, file=output, append = T)
}
stage = " 08.Indexing candidates"
if(grepl(stage, line)){
time = str_split_fixed(line, "\\[", 2)
time = str_split_fixed(time[2], "s\\]", 2)[,1]
time = as.numeric(str_trim(time))
text = paste0(dataset,",",cores,",",epsilon,",",mu,",",stage,",",time,"\n")
cat(text, file=output, append = T)
}
stage = "09.Getting expansions"
if(grepl(stage, line)){
time = str_split_fixed(line, "\\[", 2)
time = str_split_fixed(time[2], "s\\]", 2)[,1]
time = as.numeric(str_trim(time))
text = paste0(dataset,",",cores,",",epsilon,",",mu,",",stage,",",time,"\n")
cat(text, file=output, append = T)
}
stage = "10.Finding maximal disks"
if(grepl(stage, line)){
time = str_split_fixed(line, "\\[", 2)
time = str_split_fixed(time[2], "s\\]", 2)[,1]
time = as.numeric(str_trim(time))
text = paste0(dataset,",",cores,",",epsilon,",",mu,",",stage,",",time,"\n")
cat(text, file=output, append = T)
}
stage = "11.Prunning duplicates"
if(grepl(stage, line)){
stage = "11.Prunning duplicates and subsets"
time = str_split_fixed(line, "\\[", 2)
time = str_split_fixed(time[2], "s\\]", 2)[,1]
time = as.numeric(str_trim(time))
text = paste0(dataset,",",cores,",",epsilon,",",mu,",",stage,",",time,"\n")
cat(text, file=output, append = T)
}
}
data = read.csv(output)
View(data)
View(data)
View(data)
View(data)
if (!require("pacman")) install.packages("pacman")
pacman::p_load(ggplot2, data.table, foreach, sqldf, tidyr, stringr, dplyr)
source('analyzeNohupLog.R')
PHD_HOME = Sys.getenv(c("PHD_HOME"))
PHD_PATH = "Y3Q1/Scripts/Scaleup/"
FILENAME = "nohup"
EXTENSION = "out"
runLogETL(PHD_HOME, PHD_PATH,FILENAME,EXTENSION)
data = read.csv(paste0(PHD_HOME,PHD_PATH,FILENAME,".csv"))
data = data[, c(1, 2, 3, 5)]
names(data) = c("Dataset", "Epsilon", "Cores", "Time")
data$Dataset = str_sub(str_trim(data$Dataset), 2)
data$Dataset = factor(data$Dataset, levels = paste0(seq(20, 80, 20), "K"))
data$Time = as.numeric(data$Time)
data$Epsilon = as.numeric(data$Epsilon)
data$Cores = as.numeric(data$Cores)
data2 = sqldf("SELECT Dataset, Epsilon, Cores, avg(Time) AS Time FROM data GROUP BY 1, 2, 3")
View(data2)
View(data)
if (!require("pacman")) install.packages("pacman")
pacman::p_load(ggplot2, data.table, foreach, sqldf, tidyr, stringr, dplyr)
source('analyzeNohupLog.R')
PHD_HOME = Sys.getenv(c("PHD_HOME"))
PHD_PATH = "Y3Q1/Scripts/Scaleup/"
FILENAME = "nohup"
EXTENSION = "out"
runLogETL(PHD_HOME, PHD_PATH,FILENAME,EXTENSION)
data0 = read.csv(paste0(PHD_HOME,PHD_PATH,FILENAME,".csv"))
data = data0[, c(1, 2, 3, 5)]
names(data) = c("Dataset", "Epsilon", "Cores", "Time")
data$Dataset = str_sub(str_trim(data$Dataset), 2)
data$Dataset = factor(data$Dataset, levels = paste0(seq(20, 80, 20), "K"))
data$Time = as.numeric(data$Time)
data$Epsilon = as.numeric(data$Epsilon)
data$Cores = as.numeric(data$Cores)
data2 = sqldf("SELECT Dataset, Epsilon, Cores, avg(Time) AS Time FROM data GROUP BY 1, 2, 3")
View(data0)
source('~/.active-rstudio-document')
sample(1:10, 5)
sample(1:10, 10)
sample(1:10, 10, replace = T)
sample(1:10, 10)
source('~/Documents/PhD/Code/Y3Q1/Datasets/Original/makeSample.R')
source('~/Documents/PhD/Code/Y3Q1/Datasets/Original/makeSample.R')
View(data)
View(data0)
a = 19538.2756795988
round(a * 2)/2
data
source('~/Documents/PhD/Code/Y3Q1/Datasets/Original/makeSample.R')
data
source('~/Documents/PhD/Code/Y3Q1/Datasets/Original/makeSample.R')
data
source('~/Documents/PhD/Code/Y3Q1/Datasets/Original/makeSample.R')
data
source('~/Documents/PhD/Code/Y3Q1/Datasets/Original/makeSample.R')
data
names(data) = c('id', 'x', 'y')
data$t = 0
data = data[ , list(id = min(id)), by = c('x', 'y', 't')]
source('~/Documents/PhD/Code/Y3Q1/Datasets/Original/makeSample.R')
source('~/Documents/PhD/Code/Y3Q1/Datasets/Original/makeSample.R')
source('~/Documents/PhD/Code/Y3Q1/Datasets/Original/makeSample.R')
source('~/Documents/PhD/Code/Y3Q1/Datasets/Original/makeSample.R')
data
source('~/Documents/PhD/Code/Y3Q1/Datasets/Original/makeSample.R')
source('~/Documents/PhD/Code/Y3Q1/Datasets/Original/makeSample.R')
if (!require("pacman")) install.packages("pacman")
pacman::p_load(ggplot2, data.table, foreach, sqldf, tidyr, stringr, dplyr)
source('analyzeNohupLog.R')
PHD_HOME = Sys.getenv(c("PHD_HOME"))
PHD_PATH = params$phd_path
FILENAME = params$filename
EXTENSION = params$extension
source('analyzeNohupLog.R')
runLogETL(PHD_HOME, PHD_PATH,FILENAME,EXTENSION)
data0 = read.csv(paste0(PHD_HOME,PHD_PATH,FILENAME,".csv"))
data = data0[, c(1, 2, 3, 5)]
View(data0)
View(data)
names(data) = c("Dataset", "Epsilon", "Cores", "Time")
data$Dataset
data$Dataset = str_sub(str_trim(data$Dataset), 2)
data$Dataset
data$Dataset = factor(data$Dataset)
data$Dataset
levels(data$Dataset)
str_sub(data$Dataset, 1, -1)
str_sub(data$Dataset, 2, -1)
str_sub(data$Dataset, 1, -2)
data$Dataset
str_sub(data$Dataset, 1, -2)
factor(str_sub(data$Dataset, 1, -2))
as.numeric(factor(str_sub(data$Dataset, 1, -2)))
factor(str_sub(data$Dataset, 1, -2))
levels(factor(str_sub(data$Dataset, 1, -2)))
as.numeric(levels(factor(str_sub(data$Dataset, 1, -2))))
sort(as.numeric(levels(factor(str_sub(data$Dataset, 1, -2)))))
paste0(sort(as.numeric(levels(factor(str_sub(data$Dataset, 1, -2))))),"K")
data0 = read.csv(paste0(PHD_HOME,PHD_PATH,FILENAME,".csv"))
data = data0[, c(1, 2, 3, 5)]
names(data) = c("Dataset", "Epsilon", "Cores", "Time")
data$Dataset = str_sub(str_trim(data$Dataset), 2, -2)
dataLevels = paste0(sort(as.numeric(levels(factor(data$Dataset)))),"K")
data$Dataset = factor(data$Dataset, levels = dataLevels)
data$Time = as.numeric(data$Time)
data$Epsilon = as.numeric(data$Epsilon)
data$Cores = as.numeric(data$Cores)
data2 = sqldf("SELECT Dataset, Epsilon, Cores, avg(Time) AS Time FROM data GROUP BY 1, 2, 3")
View(data2)
View(data)
if (!require("pacman")) install.packages("pacman")
pacman::p_load(ggplot2, data.table, foreach, sqldf, tidyr, stringr, dplyr)
source('analyzeNohupLog.R')
PHD_HOME = Sys.getenv(c("PHD_HOME"))
PHD_PATH = params$phd_path
FILENAME = params$filename
EXTENSION = params$extension
runLogETL(PHD_HOME, PHD_PATH,FILENAME,EXTENSION)
data0 = read.csv(paste0(PHD_HOME,PHD_PATH,FILENAME,".csv"))
data = data0[, c(1, 2, 3, 5)]
names(data) = c("Dataset", "Epsilon", "Cores", "Time")
dataLevels = str_sub(str_trim(data$Dataset), 2, -2)
dataLevels = paste0(sort(as.numeric(levels(dataLevels))),"K")
data$Dataset = str_sub(str_trim(data$Dataset), 2)
data$Dataset = factor(data$Dataset, levels = dataLevels)
data$Time = as.numeric(data$Time)
data$Epsilon = as.numeric(data$Epsilon)
data$Cores = as.numeric(data$Cores)
data2 = sqldf("SELECT Dataset, Epsilon, Cores, avg(Time) AS Time FROM data GROUP BY 1, 2, 3")
View(data2)
data = data0[, c(1, 2, 3, 5)]
names(data) = c("Dataset", "Epsilon", "Cores", "Time")
View(data)
dataLevels = str_sub(str_trim(data$Dataset), 2, -2)
dataLevels = paste0(sort(as.numeric(levels(dataLevels))),"K")
if (!require("pacman")) install.packages("pacman")
pacman::p_load(ggplot2, data.table, foreach, sqldf, tidyr, stringr, dplyr)
source('analyzeNohupLog.R')
PHD_HOME = Sys.getenv(c("PHD_HOME"))
PHD_PATH = params$phd_path
FILENAME = params$filename
EXTENSION = params$extension
runLogETL(PHD_HOME, PHD_PATH,FILENAME,EXTENSION)
data0 = read.csv(paste0(PHD_HOME,PHD_PATH,FILENAME,".csv"))
data = data0[, c(1, 2, 3, 5)]
names(data) = c("Dataset", "Epsilon", "Cores", "Time")
dataLevels = str_sub(str_trim(data$Dataset), 2, -2)
dataLevels = paste0(sort(as.numeric(levels(factor(dataLevels)))),"K")
data$Dataset = str_sub(str_trim(data$Dataset), 2)
data$Dataset = factor(data$Dataset, levels = dataLevels)
data$Time = as.numeric(data$Time)
data$Epsilon = as.numeric(data$Epsilon)
data$Cores = as.numeric(data$Cores)
data2 = sqldf("SELECT Dataset, Epsilon, Cores, avg(Time) AS Time FROM data GROUP BY 1, 2, 3")
View(data2)
if (!require("pacman")) install.packages("pacman")
pacman::p_load(ggplot2, data.table, foreach, sqldf, tidyr, stringr, dplyr)
PHD_HOME = Sys.getenv(c("PHD_HOME"))
PHD_PATH = params$phd_path
FILENAME = params$filename
EXTENSION = params$extension
url = paste0(PHD_HOME,PHD_PATH,FILENAME,EXTENSION)
read.table(url, sep = "\-\> \d+\.")
read.table(url, sep = ",")
url = paste0(PHD_HOME,PHD_PATH,FILENAME,".",EXTENSION)
read.table(url, sep = ",")
data0 = read.table(url, sep = ",")
data0$V1
data0$V2
str_split(data0$V2, "-> \d+.")
str_split(data0$V2, "-> d+.")
separate(data0, V2, into = c("millis", "stage"), sep = "\-\> \d+\.")
separate(data0, V2, into = c("millis", "stage"), sep = "-\> \d+\.")
separate(data0, V2, into = c("millis", "stage"), sep = "-> [\\d]+\\.")
d = separate(data0, V2, into = c("millis", "stage"), sep = "-> [\\d]+\\.")
paste(d$V1,d$millis,sep = ".")
as.Date.POSIXct(paste(d$V1,d$millis,sep = "."))
as.Date(paste(d$V1,d$millis,sep = "."))
as.Date.POSIXlt(paste(d$V1,d$millis,sep = "."))
as.POSIXct(paste(d$V1,d$millis,sep = "."))
t = as.POSIXct(paste(d$V1,d$millis,sep = "."))
t[0]
as.numeric(t[0])
as.numeric(t[1])
as.numeric(t[2])
t[1]
t[2]
data1
data0 = read.table(url, sep = ",")
names(data0) = c("DateTime", "MillisStage", "Time", "N", "Epsilon", "Cores")
data1 = separate(data0, MillisStage, into = c("Millis", "Stage"), sep = "-> [\\d]+\\.")
data1
as.numeric(data1$DateTime)
as.numeric(as.Date(data1$DateTime))
as.Date(data1$DateTime)
as.POSIXct(data1$DateTime)
as.POSIXlt(data1$DateTime)
as.numeric(as.POSIXlt(data1$DateTime))
as.numeric(as.POSIXlt(data1$DateTime)) + data1$Millis
as.numeric(as.POSIXlt(data1$DateTime)) + as.numeric(data1$Millis)
as.numeric(as.POSIXlt(data1$DateTime)) + as.numeric(data1$Millis) / 1000
as.numeric(as.POSIXlt(data1$DateTime)) + (as.numeric(data1$Millis) / 1000)
as.numeric(data1$Millis) / 1000
as.numeric(as.POSIXlt(data1$DateTime))
as.numeric(as.POSIXlt(data1$DateTime)) + as.numeric(data1$Millis) / 1000
as.numeric(as.POSIXlt(data1$DateTime)) + as.numeric(data1$Millis) / 1000
a = as.numeric(as.POSIXlt(data1$DateTime)) + as.numeric(data1$Millis) / 1000
a
a[1]
as.numeric(data1$Millis) / 1000
m = as.numeric(data1$Millis) / 1000
m
class(m)
d = as.numeric(as.POSIXlt(data1$DateTime))
class(d)
m[1]
d[1]
d[1] + m[1]
15 + 0.1
d[1] ++ m[1]
class(15)
class(0.01)
str(d)
str(m)
15 + m[1]
d[1] + 0.01
d[1] + 0.1
d[1] + 1
options(digits = 3)
d[1] + 1
d[1] + m[1]
as.numeric(as.POSIXlt(data1$DateTime)) + as.numeric(data1$Millis) / 1000
d[1] + 0.01
paste(as.numeric(as.POSIXlt(data1$DateTime)),data1$Millis), sep = ".")
paste(as.numeric(as.POSIXlt(data1$DateTime)),data1$Millis, sep = ".")
as.numeric(paste(as.numeric(as.POSIXlt(data1$DateTime)),data1$Millis, sep = "."))
paste(as.numeric(as.POSIXlt(data1$DateTime)),data1$Millis, sep = ".")
options(scipen=999)
as.numeric(paste(as.numeric(as.POSIXlt(data1$DateTime)),data1$Millis, sep = "."))
options(scipen=999)
options(digits = 9)
paste(as.numeric(as.POSIXlt(data1$DateTime)),data1$Millis, sep = ".")
as.numeric(paste(as.numeric(as.POSIXlt(data1$DateTime)),data1$Millis, sep = "."))
options(scipen = 0)
options(digits = 9)
as.numeric(paste(as.numeric(as.POSIXlt(data1$DateTime)),data1$Millis, sep = "."))
paste(as.numeric(as.POSIXlt(data1$DateTime)),data1$Millis, sep = ".")
str_trim(paste(as.numeric(as.POSIXlt(data1$DateTime)),data1$Millis, sep = "."))
as.numeric(str_trim(paste(as.numeric(as.POSIXlt(data1$DateTime)),data1$Millis, sep = ".")))
as.numeric(str_trim(paste(as.numeric(as.POSIXlt(data1$DateTime)),data1$Millis, sep = ",")))
as.numeric(str_trim(paste(as.numeric(as.POSIXlt(data1$DateTime)),data1$Millis, sep = ".")))
as.numeric(as.POSIXlt(data1$DateTime)) + as.numeric(data1$Millis) / 1000
options(digits = 9)
options(scipen = 0)
as.numeric(as.POSIXlt(data1$DateTime)) + as.numeric(data1$Millis) / 1000
options(digits = 3)
options(scipen = 0)
as.numeric(as.POSIXlt(data1$DateTime)) + as.numeric(data1$Millis) / 1000
options(scipen = 3)
as.numeric(as.POSIXlt(data1$DateTime)) + as.numeric(data1$Millis) / 1000
options(scipen = 0)
as.numeric(as.POSIXlt(data1$DateTime)) + as.numeric(data1$Millis) / 1000
options(scipen = 1)
as.numeric(as.POSIXlt(data1$DateTime)) + as.numeric(data1$Millis) / 1000
options(scipen = 2)
as.numeric(as.POSIXlt(data1$DateTime)) + as.numeric(data1$Millis) / 1000
options(scipen = 0)
as.numeric(as.POSIXlt(data1$DateTime)) + as.numeric(data1$Millis) / 1000
a = as.numeric(as.POSIXlt(data1$DateTime)) + as.numeric(data1$Millis) / 1000
a
a[1]
a[1] - a[2]
a[2] - a[1]
a[300] - a[1]
a[299] - a[1]
options(digits = 9)
a[299] - a[1]
a[300] - a[1]
a[2] - a[1]
a[3] - a[1]
a[4] - a[1]
a[5] - a[1]
url = paste0(PHD_HOME,PHD_PATH,FILENAME,".",EXTENSION)
data0 = read.table(url, sep = ",")
names(data0) = c("DateTime", "MillisStage", "Time", "N", "Epsilon", "Cores")
data1 = separate(data0, MillisStage, into = c("Millis", "Stage"), sep = "-> [\\d]+\\.")
data1$Timestamp = as.numeric(as.POSIXlt(data1$DateTime)) + as.numeric(data1$Millis) / 1000
View(data1)
options(digits = 9)
options(scipen = 3)
PHD_HOME = Sys.getenv(c("PHD_HOME"))
PHD_PATH = params$phd_path
FILENAME = params$filename
EXTENSION = params$extension
url = paste0(PHD_HOME,PHD_PATH,FILENAME,".",EXTENSION)
data0 = read.table(url, sep = ",")
names(data0) = c("DateTime", "MillisStage", "Time", "N", "Epsilon", "Cores")
data1 = separate(data0, MillisStage, into = c("Millis", "Stage"), sep = "-> [\\d]+\\.")
data1$Timestamp = as.numeric(as.POSIXlt(data1$DateTime)) + as.numeric(data1$Millis) / 1000
options(scipen = 0)
PHD_HOME = Sys.getenv(c("PHD_HOME"))
PHD_PATH = params$phd_path
FILENAME = params$filename
EXTENSION = params$extension
url = paste0(PHD_HOME,PHD_PATH,FILENAME,".",EXTENSION)
data0 = read.table(url, sep = ",")
names(data0) = c("DateTime", "MillisStage", "Time", "N", "Epsilon", "Cores")
data1 = separate(data0, MillisStage, into = c("Millis", "Stage"), sep = "-> [\\d]+\\.")
data1$Timestamp = as.numeric(as.POSIXlt(data1$DateTime)) + as.numeric(data1$Millis) / 1000
options(digits = 16)
options(scipen = 0)
PHD_HOME = Sys.getenv(c("PHD_HOME"))
PHD_PATH = params$phd_path
FILENAME = params$filename
EXTENSION = params$extension
url = paste0(PHD_HOME,PHD_PATH,FILENAME,".",EXTENSION)
data0 = read.table(url, sep = ",")
names(data0) = c("DateTime", "MillisStage", "Time", "N", "Epsilon", "Cores")
data1 = separate(data0, MillisStage, into = c("Millis", "Stage"), sep = "-> [\\d]+\\.")
data1$Timestamp = as.numeric(as.POSIXlt(data1$DateTime)) + as.numeric(data1$Millis) / 1000
if (!require("pacman")) install.packages("pacman")
pacman::p_load(ggplot2, data.table, foreach, sqldf, tidyr, stringr, dplyr)
options(digits = 16)
options(scipen = 0)
PHD_HOME = Sys.getenv(c("PHD_HOME"))
PHD_PATH = params$phd_path
FILENAME = params$filename
EXTENSION = params$extension
url = paste0(PHD_HOME,PHD_PATH,FILENAME,".",EXTENSION)
data0 = read.table(url, sep = ",")
names(data0) = c("DateTime", "MillisStage", "Time", "N", "Epsilon", "Cores")
data1 = separate(data0, MillisStage, into = c("Millis", "Stage"), sep = "-> [\\d]+\\.")
data1$Timestamp = as.numeric(as.POSIXlt(data1$DateTime)) + as.numeric(data1$Millis) / 1000
data$Time = as.numeric(data$Time)
if (!require("pacman")) install.packages("pacman")
pacman::p_load(ggplot2, data.table, foreach, sqldf, tidyr, stringr, dplyr)
options(digits = 16)
options(scipen = 0)
PHD_HOME = Sys.getenv(c("PHD_HOME"))
PHD_PATH = params$phd_path
FILENAME = params$filename
EXTENSION = params$extension
url = paste0(PHD_HOME,PHD_PATH,FILENAME,".",EXTENSION)
data0 = read.table(url, sep = ",")
names(data0) = c("DateTime", "MillisStage", "Time", "N", "Epsilon", "Cores")
data1 = separate(data0, MillisStage, into = c("Millis", "Stage"), sep = "-> [\\d]+\\.")
data1$Timestamp = as.numeric(as.POSIXlt(data1$DateTime)) + as.numeric(data1$Millis) / 1000
data1$Time = as.numeric(data1$Time)
data1$Epsilon = as.numeric(data1$Epsilon)
data1$Cores = as.numeric(data1$Cores)
data2 = sqldf("SELECT Stage, Epsilon, Cores, avg(Time) AS Time FROM data1 GROUP BY 1, 2, 3")
View(data2)
temp_title = paste("(radius of disk in mts) in Berlin dataset.")
title = substitute(paste("Execution time by ", epsilon) ~ temp_title, list(temp_title = temp_title))
g = ggplot(data=data2, aes(x=factor(Epsilon), y=Time, fill=Dataset)) +
geom_bar(stat="identity", position=position_dodge(width = 0.75),width = 0.75) +
labs(title=title, y="Time(s)", x=expression(paste(epsilon,"(mts)")))
plot(g)
View(data2)
temp_title = paste("(radius of disk in mts) in Berlin dataset.")
title = substitute(paste("Execution time by ", epsilon) ~ temp_title, list(temp_title = temp_title))
g = ggplot(data=data2, aes(x=factor(Epsilon), y=Time, fill=Stage)) +
geom_bar(stat="identity", position=position_dodge(width = 0.75),width = 0.75) +
labs(title=title, y="Time(s)", x=expression(paste(epsilon,"(mts)")))
plot(g)
if (!require("pacman")) install.packages("pacman")
pacman::p_load(ggplot2, data.table, foreach, sqldf, tidyr, stringr, dplyr)
options(digits = 16)
options(scipen = 0)
PHD_HOME = Sys.getenv(c("PHD_HOME"))
PHD_PATH = params$phd_path
FILENAME = params$filename
EXTENSION = params$extension
url = paste0(PHD_HOME,PHD_PATH,FILENAME,".",EXTENSION)
data0 = read.table(url, sep = ",")
names(data0) = c("DateTime", "MillisStage", "Time", "N", "Epsilon", "Cores")
data1 = separate(data0, MillisStage, into = c("Millis", "Stage"), sep = "-> [\\d]+\\.")
data1$Timestamp = as.numeric(as.POSIXlt(data1$DateTime)) + as.numeric(data1$Millis) / 1000
data1$Time = as.numeric(data1$Time)
data1$Epsilon = as.numeric(data1$Epsilon)
data1$Cores = as.numeric(data1$Cores)
data2 = sqldf("SELECT Stage, Epsilon, Cores, avg(Time) AS Time FROM data1 GROUP BY 1, 2, 3")
temp_title = paste("(radius of disk in mts) in Berlin dataset.")
title = substitute(paste("Execution time by ", epsilon) ~ temp_title, list(temp_title = temp_title))
g = ggplot(data=data2, aes(x=factor(Epsilon), y=Time, fill=factor(Cores))) +
geom_bar(stat="identity", position=position_dodge(width = 0.75),width = 0.75) +
labs(title=title, y="Time(s)", x=expression(paste(epsilon,"(mts)"))) +
facet_wrap(~Stages)
plot(g)
View(data2)
View(data2)
